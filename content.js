
const state = {
    active: null
}

function getEndereço (local) {
    let locais_audiencias = {
        "1ª VARA FEDERAL": "AV. DR. CARLOS RODRIGUES DA CRUZ, 1500 - CAPUCHO, ARACAJU - SE, 49081-083",
        "2ª VARA FEDERAL": "AV. DR. CARLOS RODRIGUES DA CRUZ, 1500 - CAPUCHO, ARACAJU - SE, 49081-083",
        "3ª VARA FEDERAL": "AV. DR. CARLOS RODRIGUES DA CRUZ, 1500 - CAPUCHO, ARACAJU - SE, 49081-083",
        "4ª VARA FEDERAL": "AV. DR. CARLOS RODRIGUES DA CRUZ, 1500 - CAPUCHO, ARACAJU - SE, 49081-083",
        "5ª VARA FEDERAL": "PRAÇA CAMERINO, 227 - CENTRO, ARACAJU - SE, 49015-060",
        "6ª VARA FEDERAL": "RUA MARIA SOUZA CARVALHO, 01 - BAIRRO MARIANGA, ITABAIANA/SE - 49500-000",
        "7ª VARA FEDERAL": "PRAÇA ENGENHEIRO JORGE - S/N, ESTÂNCIA - SE, 49200-000",
        "8ª VARA FEDERAL": "PRAÇA RUI MENDES, 21 - CENTRO, LAGARTO - SE, 49400-970",
        "9ª VARA FEDERAL": "AV JOÃO BARBOSA PORTO, Nº. 1600, BAIRRO BELA VISTA, PROPRIÁ/SE (MESMO RECINTO DA VARA DO TRABALHO)",
        "1ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "2ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "3ª VARA CÍVEL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "4ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "5ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "6ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "7ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "8ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "9ª VARA CÍVEL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "10ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "11ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "12ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "13ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "14ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "15ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "17ª VARA CÍVEL DE ARACAJU": "FÓRUM DES. LUIZ C. FONTES - AV. GENTIL TAVARES, 380, GETULIO VARGAS, ARACAJU/SE, 49055-260",
        "18ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "19ª VARA CÍVEL DE ARACAJU": "FÓRUNS INTEGRADOS II - AV. VISCONDE DE MARACAJU, S/N , DEZOITO DO FORTE, ARACAJU/SE, 49070-460",
        "20ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "21ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "22ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "23ª VARA CÍVEL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "24ª VARA CÍVEL DE ARACAJU": "FÓRUNS INTEGRADOS II - AV. VISCONDE DE MARACAJU, S/N , DEZOITO DO FORTE, ARACAJU/SE, 49070-460",
        "25ª VARA CÍVEL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "26ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "27ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "28ª VARA CÍVEL DE ARACAJU": "FÓRUNS INTEGRADOS IV - RUA ALEXANDRE ALCINO, S/N, SANTA MARIA, ARACAJU/SE, 49044-090",
        "1º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS II - AV. VISCONDE DE MARACAJU, S/N, DEZOITO DO FORTE, ARACAJU/SE, 49070-460",
        "2º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "3º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "4º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "5º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "7º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS IV - RUA ALEXANDRE ALCINO, S/N, SANTA MARIA, ARACAJU/SE, 49044-090",
        "8º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS II - AV. VISCONDE DE MARACAJU, S/N, DEZOITO DO FORTE, ARACAJU/SE, 49070-460",
        "9º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "10º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "19º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS II - AV. VISCONDE DE MARACAJU, S/N, DEZOITO DO FORTE, ARACAJU/SE, 49070-460",
        "24º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS II - AV. VISCONDE DE MARACAJU, S/N, DEZOITO DO FORTE, ARACAJU/SE, 49070-460",
        "28º JUIZADO ESPECIAL DE ARACAJU": "RUA ALEXANDRE ALCINO, S/N, SANTA MARIA, ARACAJU/SE",
        "1º JUIZADO ESPECIAL DA FAZENDA PÚBLICA DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "2º JUIZADO ESPECIAL DA FAZENDA PÚBLICA DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "JUIZADO ESPECIAL CRIMINAL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "1ª VARA CRIMINAL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. TANCREDO NEVES, S/N, BAIRRO CAPUCHO - 1º PISO, CAPUCHO, ARACAJU/SE, 49081-901",
        "2ª VARA CRIMINAL DE ARACAJU": "CENTRO ADMINISTRATIVO GOVERNADOR AUGUSTO FRANCO, CAPUCHO, ARACAJU/SE, 49081-901",
        "3ª VARA CRIMINAL DE ARACAJU": "CENTRO ADMINISTRATIVO GOVERNADOR AUGUSTO FRANCO, CAPUCHO, ARACAJU/SE, 49081-901",
        "4ª VARA CRIMINAL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "5ª VARA CRIMINAL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "6ª VARA CRIMINAL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "7ª VARA CRIMINAL DE ARACAJU": "FÓRUM OLÍMPIO MENDONÇA - AV. CENTRAL-03, S/N CJ. ORLANDO DANTAS , SÃO CONRADO, ARACAJU/SE, 49092-230",
        "8ª VARA CRIMINAL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "9ª VARA CRIMINAL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "VARA DE ACIDENTES E DELITOS DE TRÂNSITO": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "VARA DE EXECUÇÃO DE MEDIDAS E PENAS ALTERNATIVAS": "FÓRUM OLÍMPIO MENDONÇA - AV. CENTRAL 3, S/N - CONJ. ORLANDO DANTAS, SÃO CONRADO, ARACAJU/SE, 49092-230",
        "JUIZADO DE VIOLÊNCIA DOMÉSTICA E FAMILIAR CONTRA A MULHER": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "CENTRAL PLANTONISTA 1º GRAU - ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "16ª VARA PRIVATIVA DO JUIZADO DA INFÂNCIA E DA JUVENTUDE": "FÓRUM DES. LUIZ C. FONTES - AV. GENTIL TAVARES, 380, GETULIO VARGAS, ARACAJU/SE, 49055-260",
        "1ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 1º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "2ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 1º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "3ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 2º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "4ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 2º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "5ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 3º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "6ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 3º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "7ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 4º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "8ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 4º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "9ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), TÉRREO - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "CEJUSC": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "CEJUSC TRABALHISTA": "EDIFÍCIO SEDE (PRÉDIO AMARELO - CENTRO ADMINISTRATIVO) - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO, ARACAJU/SE, CEP 49080-190",
        "GABINETE DA PRESIDÊNCIA": "EDIFÍCIO SEDE (PRÉDIO AMARELO - CENTRO ADMINISTRATIVO AUGUSTO FRANCO), 4º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO, ARACAJU/SE, 49080-190",
        "JAE": "EDIFÍCIO SEDE (PRÉDIO AMARELO - CENTRO ADMINISTRATIVO AUGUSTO FRANCO), 4º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO, ARACAJU/SE, 49080-190",
        "1ª VARA CÍVEL DE SOCORRO": "FÓRUM DES. ARTUR OSCAR DE O. DÉDA - RUA MANOEL PASSOS, FÓRUM ARTHUR OCAR DE O. DEDA, CENTRO, N. SRA. DO SOCORRO/SE, 49160-000",
        "2ª VARA CÍVEL DE SOCORRO": "FÓRUM DES. ARTUR OSCAR DE O. DÉDA - RUA MANOEL PASSOS, FÓRUM ARTHUR OCAR DE O. DEDA, CENTRO, N. SRA. DO SOCORRO/SE, 49160-000",
        "3ª VARA CÍVE DE SOCORRO": "FÓRUM DES. PEDRO B. DE ANDRADE - AV. COLETORA C, S/N, FÓRUM DES. PEDRO BARRETO, MARCOS FREIRE II, N. SRA. DO SOCORRO/SE, 49160-000",
        "4ª VARA CÍVEL DE SOCORRO": "FÓRUM BEL. LUIZ AUGUSTO BARRETO - RODOVIA BR 101, S/N, KM 92.5,PARQUE DOS FARÓIS, N. SRA. DO SOCORRO/SE, 49160-000",
        "1ª VARA CRIMINAL DE SOCORRO": "FÓRUM BEL. LUIZ AUGUSTO BARRETO - RODOVIA BR 101, S/N, KM 92.5,PARQUE DOS FARÓIS, N. SRA. DO SOCORRO/SE, 49160-000",
        "2ª VARA CRIMINAL DE SOCORRO": "FÓRUM BEL. LUIZ AUGUSTO BARRETO - RODOVIA BR 101, S/N, KM 92.5,PARQUE DOS FARÓIS, N. SRA. DO SOCORRO/SE, 49160-000",
        "3ª VARA CRIMINAL DE SOCORRO": "FÓRUM BEL. LUIZ AUGUSTO BARRETO - RODOVIA BR 101, S/N, KM 92.5,PARQUE DOS FARÓIS, N. SRA. DO SOCORRO/SE, 49160-000",
        "1º JUIZADO ESPECIAL CÍVEL E CRIMINAL DE NOSSA SRA DO SOCORRO": "FÓRUM DES. PEDRO B. DE ANDRADE - AV. COLETORA C, S/N, FÓRUM DES. PEDRO BARRETO, MARCOS FREIRE II, N. SRA. DO SOCORRO/SE, 49160-000",
        "2º JUIZADO ESPECIAL CÍVEL E CRIMINAL DE NOSSA SRA DO SOCORRO": "FÓRUM DES. ARTUR OSCAR DE O. DÉDA - RUA MANOEL PASSOS, FÓRUM ARTHUR OCAR DE O. DEDA, CENTRO, N. SRA. DO SOCORRO/SE, 49160-000",
        "AQUIDABÃ": "FÓRUM DE AQUIDABÃ - RUA EDUARDO CHAVES, Nº 93, CENTRO, AQUIDABÃ/SE, 49790-000",
        "GRACCHO CARDOSO": "FÓRUM DE GRACCHO CARDOSO - RUA EDUARDO CHAVES, Nº 93, CENTRO, AQUIDABÃ/SE, 49790-000",
        "MURIBECA": "FÓRUM DE MURIBECA - RUA EDUARDO CHAVES, CENTRO, AQUIDABÃ/SE, 49790-000",
        "ARAUÁ": "FÓRUM DE ARAUÁ - RUA JOAQUIM COSTA NASCIMENTO S/N, CENTRO, ARAUA/SE, 49220-000",
        "PEDRINHAS": "FÓRUM DE PEDRINHAS - RODOVIA BOQUIM-PEDRINHAS, S/N, BUENOS AIRES, PEDRINHAS/SE, 49350-000",
        "1ª VARA CÍVEL E CRIMINAL DA BARRA DOS COQUEIROS": "FÓRUM DA BARRA DOS COQUEIROS - RODOVIA EDILSON TÁVORA, SN, CENTRO, BARRA DOS COQUEIROS/SE, 49140-000",
        "2ª VARA CÍVEL E CRIMINAL DA BARRA DOS COQUEIROS": "FÓRUM DA BARRA DOS COQUEIROS - RODOVIA EDILSON TÁVORA, SN, CENTRO, BARRA DOS COQUEIROS/SE, 49140-000",
        "CEJUS BARRA DOS COQUEIROS": "FÓRUM DA BARRA DOS COQUEIROS - RODOVIA EDILSON TÁVORA, SN, CENTRO, BARRA DOS COQUEIROS/SE, 49140-000",
        "BOQUIM": "FÓRUM DE BOQUIM: PQ. CITRÍCOLA GOV. JOÃO ALVES FILHO, S/Nº, CENTRO, BOQUIM/SE, 49360-000",
        "CAMPO DO BRITO": "FÓRUM DE CAMPO DO BRITO - RUA GABRIEL DE LIMA, S/N, CENTRO, CAMPO DO BRITO/SE, 49520-000",
        "CEJUSC CAMPO DO BRITO": "FÓRUM DE CAMPO DO BRITO - RUA GABRIEL DE LIMA, S/N, CENTRO, CAMPO DO BRITO/SE, 49520-000",
        "MACAMBIRA": "FÓRUM DE CAMPO DO BRITO - RUA GABRIEL DE LIMA, S/N, CENTRO, CAMPO DO BRITO/SE, 49520-000",
        "SÃO DOMINGOS": "FÓRUM DE SÃO DOMINGOS - RUA JOSÉ JUNIOR FILHO S/N, CENTRO, SÃO DOMINGOS/SE, 49525-000",
        "CANINDÉ DE SÃO FRANCISCO": "FÓRUM DE CANINDÉ DE SÃO FRANCISCO - PRAÇA PADRE CICERO, S/N, CENTRO, CANINDÉ DE SÃO FRANCISCO/SE, 49820-000",
        "CAPELA": "FÓRUM DE CAPELA - RODOVIA MANOEL DANTAS, S/Nº, CENTRO, CAPELA/SE, 49700-000",
        "CARIRA": "FÓRUM DE CARIRA - AV. AROALDO CHAGAS, S/N, CENTRO, CARIRA/SE, 49550-000",
        "CARMÓPOLIS": "FÓRUM DE CARMÓPOLIS - RUA JOSÉ AMADO ALVES, 420, TRAPIÁ I, CARMÓPOLIS/SE, 49740-000",
        "CEJUSC CARMÓPOLIS": "FÓRUM DE CARMÓPOLIS - RUA JOSÉ AMADO ALVES, 420, TRAPIÁ I, CARMÓPOLIS/SE, 49740-000",
        "GENERAL MAYNARD": "FÓRUM DE CARMÓPOLIS - RUA JOSÉ AMADO ALVES, 420, TRAPIÁ I, CARMÓPOLIS/SE, 49740-000",
        "ROSÁRIO DO CATETE": "FÓRUM DE CARMÓPOLIS - RUA JOSÉ AMADO ALVES, 420, TRAPIÁ I, CARMÓPOLIS/SE, 49740-000",
        "CEDRO DE SÃO JOÃO": "FÓRUM DE CEDRO DE SÃO JOÃO - RUA ANTÔNIO BATISTA, Nº105, CENTRO, CEDRO DE SÃO JOÃO/SE, 49930-000",
        "CEJUSC CEDRO DE SÃO JOÃO": "FÓRUM DE CEDRO DE SÃO JOÃO - RUA ANTÔNIO BATISTA, Nº105, CENTRO, CEDRO DE SÃO JOÃO/SE, 49930-000",
        "AMPARO DO SÃO FRANCISCO": "FÓRUM DE CEDRO DE SÃO JOÃO - RUA ANTÔNIO BATISTA, Nº105, CENTRO, CEDRO DE SÃO JOÃO/SE, 49930-000",
        "MALHADA DOS BOIS": "FÓRUM DE CEDRO DE SÃO JOÃO - RUA ANTÔNIO BATISTA, Nº105, CENTRO, CEDRO DE SÃO JOÃO/SE, 49930-000",
        "SÃO FRANCISCO": "FÓRUM DE CEDRO DE SÃO JOÃO - RUA ANTÔNIO BATISTA, Nº105, CENTRO, CEDRO DE SÃO JOÃO/SE, 49930-000",
        "TELHA": "FÓRUM DE CEDRO DE SÃO JOÃO - RUA ANTÔNIO BATISTA, Nº105, CENTRO, CEDRO DE SÃO JOÃO/SE, 49930-000",
        "CRISTINÁPOLIS": "FÓRUM DE CRISTINÁPOLIS - PRAÇA DA BANDEIRA, Nº 245, CENTRO, CRISTINÁPOLIS/SE, 49270-000",
        "TOMAR DO GERU": "FÓRUM DE CRISTINÁPOLIS - PRAÇA DA BANDEIRA, Nº 245, CENTRO, CRISTINÁPOLIS/SE, 49270-000",
        "1ª VARA CIVEL DE ESTÂNCIA": "FÓRUM MINISTRO HEITOR DE SOUZA - AV. TENENTE ELOY, Nº 470, CENTRO, ESTÂNCIA/SE, 49200-000",
        "2ª VARA CIVEL DE ESTÂNCIA": "FÓRUM MINISTRO HEITOR DE SOUZA - AV. TENENTE ELOY, Nº 470, CENTRO, ESTÂNCIA/SE, 49200-000",
        "CEJUSC DE ESTÂNCIA": "FÓRUM MINISTRO HEITOR DE SOUZA - AV. TENENTE ELOY, Nº 470, CENTRO, ESTÂNCIA/SE, 49200-000",
        "VARA CRIMINAL DE ESTÂNCIA": "FÓRUM MINISTRO HEITOR DE SOUZA - AV. TENENTE ELOY, Nº 470, CENTRO, ESTÂNCIA/SE, 49200-000",
        "JUIZADO ESPECIAL CÍVEL E CRIMINAL DE ESTÂNCIA": "FÓRUM MINISTRO HEITOR DE SOUZA - AV. TENENTE ELOY, Nº 470, CENTRO, ESTÂNCIA/SE, 49200-000",
        "NUSESP - 3º NÚCLEO": "FÓRUM MINISTRO HEITOR DE SOUZA - AV. TENENTE ELOY, Nº 470, CENTRO, ESTÂNCIA/SE, 49200-000",
        "FREI PAULO": "FÓRUM DE FREI PAULO - TRAVESSA CORONEL CASSIMIRO, 79, CENTRO, FREI PAULO/SE, 49514-000",
        "PEDRA MOLE": "FÓRUM DE FREI PAULO - TRAVESSA CORONEL CASSIMIRO, 79, CENTRO, FREI PAULO/SE, 49514-000",
        "PINHÃO": "FÓRUM DE FREI PAULO - TRAVESSA CORONEL CASSIMIRO, 79, CENTRO, FREI PAULO/SE, 49514-000",
        "GARARU": "FÓRUM DE GARARU - AVENIDA PRESIDENTE COSTA E SILVA,S/N, CENTRO, GARARU/SE, 49830-000",
        "CANHOBA": "FÓRUM DE GARARU - AVENIDA PRESIDENTE COSTA E SILVA,S/N, CENTRO, GARARU/SE, 49830-000",
        "ITABI": "FÓRUM DE GARARU - AVENIDA PRESIDENTE COSTA E SILVA,S/N, CENTRO, GARARU/SE, 49830-000",
        "NOSSA SENHORA DE LOURDES": "FÓRUM DE GARARU - AVENIDA PRESIDENTE COSTA E SILVA,S/N, CENTRO, GARARU/SE, 49830-000",
        "INDIAROBA": "FÓRUM DE INDIAROBA - PRAÇA JOÃO ALVES FILHO, 87, CENTRO, INDIAROBA/SE",
        "SANTA LUZIA DO ITANHY": "FÓRUM DE INDIAROBA - PRAÇA JOÃO ALVES FILHO, 87, CENTRO, INDIAROBA/SE",
        "CEJUSC SANTA LUZIA DO ITANHY": "FÓRUM DE INDIAROBA - PRAÇA JOÃO ALVES FILHO, 87, CENTRO, INDIAROBA/SE",
        "1ª VARA CIVEL DE ITABAIANA": "FÓRUM MAURÍCIO GRACCHO CARDOSO - AV. DR. LUIZ MAGALHÃES S/N, CENTRO, ITABAIANA/SE, 49503-256",
        "2ª VARA CIVEL DE ITABAIANA": "FÓRUM MAURÍCIO GRACCHO CARDOSO - AV. DR. LUIZ MAGALHÃES S/N, CENTRO, ITABAIANA/SE, 49503-256",
        "CEJUSC ITABAIANA": "FÓRUM MAURÍCIO GRACCHO CARDOSO - AV. DR. LUIZ MAGALHÃES S/N, CENTRO, ITABAIANA/SE, 49503-256",
        "1ª VARA CRIMINAL DE ITABAIANA": "FÓRUM MAURÍCIO GRACCHO CARDOSO - AV. DR. LUIZ MAGALHÃES S/N, CENTRO, ITABAIANA/SE, 49503-256",
        "2ª VARA CRIMINAL DE ITABAIANA": "FÓRUM MAURÍCIO GRACCHO CARDOSO - AV. DR. LUIZ MAGALHÃES S/N, CENTRO, ITABAIANA/SE, 49503-256",
        "JUIZADO ESPECIAL CÍVEL E CRIMINAL DE ITABAIANA": "FÓRUM MAURÍCIO GRACCHO CARDOSO - AV. DR. LUIZ MAGALHÃES S/N, CENTRO, ITABAIANA/SE, 49503-256",
        "ITABAIANINHA": "FÓRUM DE ITABAIANINHA - RUA FRANCISCO SEVERO, Nº 228, CENTRO, ITABAIANINHA/SE, 49290-000",
        "1ª VARA CÍVEL E CRIMINAL DE ITAPORANGA D'AJUDA": "FÓRUM FELISBELO FREIRE - AV. EMÍDIO MAXI NETO, S/N, CENTRO, ITAPORANGA D AJUDA/SE, 49120-000",
        "2ª VARA CÍVEL E CRIMINAL DE ITAPORANGA D'AJUDA": "FÓRUM FELISBELO FREIRE - AV. EMÍDIO MAXI NETO, S/N, CENTRO, ITAPORANGA D AJUDA/SE, 49120-000",
        "CEJUSC ITAPORANGA D'AJUDA": "FÓRUM FELISBELO FREIRE - AV. EMÍDIO MAXI NETO, S/N, CENTRO, ITAPORANGA D AJUDA/SE, 49120-000",
        "SALGADO": "FÓRUM DRA. GICÉLIA DE ATORRES, AV 4 DE OUTUBRO S/N, ESTAÇÃO, SALGADO/SE, 49390-000",
        "JAPARATUBA": "FÓRUM DE JAPARATUBA - RODOVIA LÚCIO PRADO, Nº 40, CENTRO, JAPARATUBA/SE, 49960-000",
        "PIRAMBU": "FÓRUM DE PIRAMBU - RUA MÁRIO TRINDADE CRUZ, S/N, CENTRO, PIRAMBU/SE, 49190-000",
        "1ª VARA CIVEL DE LAGARTO": "FÓRUM DE LAGARTO - ROD. ANTÔNIO MARTINS DE MENEZES, KM 36, S/N, HORTA, LAGARTO/SE, 49400-000",
        "2ª VARA CIVEL DE LAGARTO": "FÓRUM DE LAGARTO - ROD. ANTÔNIO MARTINS DE MENEZES, KM 36, S/N, HORTA, LAGARTO/SE, 49400-000",
        "CEJUSC LAGARTO": "FÓRUM DE LAGARTO - ROD. ANTÔNIO MARTINS DE MENEZES, KM 36, S/N, HORTA, LAGARTO/SE, 49400-000",
        "VARA CRIMINAL DE LAGARTO": "FÓRUM DE LAGARTO - ROD. ANTÔNIO MARTINS DE MENEZES, KM 36, S/N, HORTA, LAGARTO/SE, 49400-000",
        "JUIZADO ESPECIAL CÍVEL E CRIMINAL DE LAGARTO": "FÓRUM DE LAGARTO - ROD. ANTÔNIO MARTINS DE MENEZES, KM 36, S/N, HORTA, LAGARTO/SE, 49400-000",
        "NUSESP - 4º NÚCLEO": "FÓRUM DES. EPAMINONDAS S. DE ANDRADE LIMA - RODOVIA LOURIVAL BATISTA, KM 36, S/Nº, HORTA, LAGARTO/SE, 49400-000",
        "1ª VARA CÍVEL E CRIMINAL DE LARANJEIRAS": "FÓRUM DE LARANJEIRAS - ALAMÊDA IÊDA ROSA,S/N, CONJ. MANOEL DO PRADO FRANCO, LARANJEIRAS/SE, 49170-000",
        "2ª VARA CÍVEL E CRIMINAL DE LARANJEIRAS": "FÓRUM DE LARANJEIRAS - ALAMÊDA IÊDA ROSA,S/N, CONJ. MANOEL DO PRADO FRANCO, LARANJEIRAS/SE, 49170-000",
        "AREIA BRANCA": "FÓRUM DE AREIA BRANCA - LARGO MANOEL DO PRADO FRANCO,S/N, CENTRO, AREIA BRANCA/SE, 49580-000",
        "MALHADOR": "FÓRUM DE MALHADOR - AV. VALTER FRANCO, Nº 1060, CENTRO, MALHADOR/SE, 49570-000",
        "MOITA BONITA": "FÓRUM DE MOITA BONITA - AV. VALTER FRANCO, Nº 1060, CENTRO, MALHADOR/SE, 49570-000",
        "MARUIM": "FÓRUM DE MARUIM - RUA ALVARO GARCEZ, Nº 315, BOA HORA, MARUIM/SE, 49770-000",
        "SANTO AMARO": "FÓRUM DE SANTO AMARO - TRAVESSA CARLOS SIMEÃO, S/N, CENTRO, SANTO AMARO/SE, 49180-000",
        "1ª VARA CÍVEL E CRIMINAL DE NOSSA SENHORA DA GLÓRIA": "FÓRUM DE NOSSA SENHORA DA GLÓRIA - AVENIDA MANOEL ELÍGIO DA MOTA, S/Nº , BRASÍLIA, NOSSA SENHORA DA GLÓRIA/SE, 49680-000",
        "2ª VARA CÍVEL E CRIMINAL DE NOSSA SENHORA DA GLÓRIA": "FÓRUM DE NOSSA SENHORA DA GLÓRIA - AVENIDA MANOEL ELÍGIO DA MOTA, S/Nº , BRASÍLIA, NOSSA SENHORA DA GLÓRIA/SE, 49680-000",
        "FEIRA NOVA": "FÓRUM DE NOSSA SENHORA DA GLÓRIA - AVENIDA MANOEL ELÍGIO DA MOTA, S/Nº , BRASÍLIA, NOSSA SENHORA DA GLÓRIA/SE, 49680-000",
        "MONTE ALEGRE": "FÓRUM DE MONTE ALEGRE DE SERGIPE - PRAÇA PASSOS PORTO, Nº335, MONTEALEGRE@TJSE.JUS.BR, CENTRO, MONTE ALEGRE DE SERGIPE/SE, 49690-000",
        "1ª VARA CÍVEL E CRIMINAL DE NOSSA SENHORA DAS DORES": "FÓRUM DE NOSSA SENHORA DAS DORES - PRAÇA. DES. ALOÍSIO DE ABREU LIMA, Nº 01, CENTRO, NOSSA SENHORA DAS DORES/SE, 49600-000",
        "2ª VARA CÍVEL E CRIMINAL DE NOSSA SENHORA DAS DORES": "FÓRUM DE NOSSA SENHORA DAS DORES - PRAÇA. DES. ALOÍSIO DE ABREU LIMA, Nº 01, CENTRO, NOSSA SENHORA DAS DORES/SE, 49600-000",
        "CUMBE": "FÓRUM DE NOSSA SENHORA DAS DORES - PRAÇA. DES. ALOÍSIO DE ABREU LIMA, Nº 01, CENTRO, NOSSA SENHORA DAS DORES/SE, 49600-000",
        "SIRIRI": "FÓRUM DE NOSSA SENHORA DAS DORES - PRAÇA. DES. ALOÍSIO DE ABREU LIMA, Nº 01, CENTRO, NOSSA SENHORA DAS DORES/SE, 49600-000",
        "1ª VARA CÍVEL E CRIMINAL DE NEÓPOLIS": "FÓRUM DE NEÓPOLIS - PÇA. MONS. JOSÉ MORENO DE SANTANA S/N, CENTRO, NEÓPOLIS/SE, 49980-000",
        "2ª VARA CÍVEL E CRIMINAL DE NEÓPOLIS": "FÓRUM DE NEÓPOLIS - PÇA. MONS. JOSÉ MORENO DE SANTANA S/N, CENTRO, NEÓPOLIS/SE, 49980-000",
        "JAPOATÃ": "FÓRUM JAPOATÃ - RUA GETULIO VARGAS, S/N, CENTRO, JAPOATÃ/SE, 49950-000",
        "SANTANA DO SÃO FRANCISCO": "FÓRUM DE SANTANA DO SÃO FRANCISCO - RUA DAS FLORES, S/N, CENTRO, SANTANA DO SÃO FRANCISCO/SE, 49985-000",
        "BREJO GRANDE": "FÓRUM DESEMBARGADOR ANTÔNIO MACHADO - RUA ALTO DA BOA VISTA, Nº 293, CENTRO, PACATUBA/SE, 49985-000",
        "ILHA DAS FLORES": "FÓRUM DESEMBARGADOR ANTÔNIO MACHADO - RUA ALTO DA BOA VISTA, Nº 293, CENTRO, PACATUBA/SE, 49985-000",
        "PACATUBA": "FÓRUM DESEMBARGADOR ANTÔNIO MACHADO - RUA ALTO DA BOA VISTA, Nº 293, CENTRO, PACATUBA/SE, 49985-000",
        "POÇO REDONDO": "FÓRUM DE POÇO REDONDO - AV. ALCINO ALVES COSTA, Nº 983, CENTRO, POÇO REDONDO/SE, 49810-000",
        "POÇO VERDE": "FÓRUM DE POÇO VERDE - AV. SÃO JOSÉ, S/N, CENTRO, POÇO VERDE/SE, 49490-000",
        "PORTO DA FOLHA": "FÓRUM DE PORTO DA FOLHA - RUA AUGUSTO CÉSAR LEITE, Nº189, CENTRO, PORTO DA FOLHA/SE, 49800-000",
        "1ª VARA CÍVEL E CRIMINAL DE PROPRIÁ": "FÓRUM JUIZ JOÃO FERNANDES DE BRITO - AVENIDA JOÃO BARBOSA PORTO, S/Nº, BELA VISTA, PROPRIÁ/SE - 49900-000",
        "2ª VARA CÍVEL E CRIMINAL DE PROPRIÁ": "FÓRUM JUIZ JOÃO FERNANDES DE BRITO - AVENIDA JOÃO BARBOSA PORTO, S/Nº, BELA VISTA, PROPRIÁ/SE - 49900-000",
        "CEJUSC PROPRIÁ": "FÓRUM JUIZ JOÃO FERNANDES DE BRITO - AV. JOÃO BARBOSA PORTO, S/N, BRASÍLIA, PROPRIÁ/SE - 49900-000",
        "NUSESP - 6º NÚCLEO": "FÓRUM JUIZ JOÃO FERNANDES DE BRITO - AVENIDA JOÃO BARBOSA PORTO, S/Nº, BELA VISTA, PROPRIÁ/SE - 49900-000",
        "RIACHÃO DO DANTAS": "FÓRUM DE RIACHÃO DO DANTAS - ROD. RIACHÃO-LAGARTO, S/N, CENTRO, RIACHÃO DO DANTAS/SE, 49320-000",
        "RIACHUELO": "FÓRUM DE RIACHUELO - RUA SANTA MARIA, S/N, CENTRO, RIACHUELO/SE, 49130-000",
        "DIVINA PASTORA": "FÓRUM DE DIVINA PASTORA - PRACA DA BANDEIRA, S/N, CENTRO, DIVINA PASTORA/SE, 49650-000",
        "SANTA ROSA DE LIMA": "FÓRUM DE SANTA ROSA DE LIMA - RUA SANTA MARIA, S/N, CENTRO, RIACHUELO/SE, 49130-000",
        "RIBEIRÓPOLIS": "FÓRUM DE RIBEIRÓPOLIS - PRAÇA MANOEL DO CARMO DE JESUS, S/N, CENTRO, RIBEIRÓPOLIS/SE, 49530-000",
        "SÃO MIGUEL DO ALEIXO": "FÓRUM DE RIBEIRÓPOLIS - PRAÇA MANOEL DO CARMO DE JESUS, S/N, CENTRO, RIBEIRÓPOLIS/SE, 49530-000",
        "NOSSA SENHORA APARECIDA": "FÓRUM DE RIBEIRÓPOLIS - PRAÇA MANOEL DO CARMO DE JESUS, S/N, CENTRO, RIBEIRÓPOLIS/SE, 49530-000",
        "1ª VARA CÍVEL SÃO CRISTÓVÃO": "LARGO JOEL FONTES COSTA, S/N, CENTRO. SÃO CRISTÓVÃO/SE, 49100-000",
        "2ª VARA CÍVEL SÃO CRISTÓVÃO": "FÓRUM PROF. GONÇALO ROLLEMBERG LEITE - AV. MARECHAL RONDON, S/N, CAMPUS UNIVERSITÁRIO, ROSA ELZE, SÃO CRISTÓVÃO/SE, 49100-000",
        "VARA CRIMINAL DE SÃO CRISTÓVÃO": "LARGO JOEL FONTES COSTA, S/N, CENTRO, SÃO CRISTÓVÃO/SE, 49100-000",
        "JUIZADO ESPECIAL CÍVEL E CRIMINAL DE SÃO CRISTÓVÃO": "FÓRUM PROF. GONÇALO ROLLEMBERG LEITE - AV. MARECHAL RONDON, S/N, CAMPUS UNIVERSITÁRIO, ROSA ELZE, SÃO CRISTÓVÃO/SE, 49100-000",
        "1ª VARA CÍVEL E CRIMINAL DE SIMÃO DIAS": "FÓRUM DE SIMÃO DIAS - RODOVIA LOURIVAL BAPTISTA - SE 240, Nº 2398, CENTRO, SIMÃO DIAS/SE, 49480-000",
        "2ª VARA CÍVEL E CRIMINAL DE SIMÃO DIAS": "FÓRUM DE SIMÃO DIAS - RODOVIA LOURIVAL BAPTISTA - SE 240, Nº 2398, CENTRO, SIMÃO DIAS/SE, 49480-000",
        "1ª VARA CÍVEL DE TOBIAS BARRETO": "FÓRUM DE TOBIAS BARRETO - AVENIDA JOSÉ DAVI DOS SANTOS, S/N, SANTA RITA, TOBIAS BARRETO/SE, 49300-000",
        "2ª VARA CÍVEL DE TOBIAS BARRETO": "FÓRUM DE TOBIAS BARRETO - AV. JOSÉ DAVI DOS SANTOS, S/N, SANTA RITA, TOBIAS BARRETO/SE, 49300-000",
        "UMBAÚBA": "FÓRUM DE UMBAÚBA - RUA DES. JOSÉ NOLASCO DE CARVALHO, S/N, CENTRO, UMBAÚBA/SE, 49260-000",
        "1ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "2ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "3ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "4ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "5ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "6ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "7ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "8ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "9ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "10ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "11ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "12ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "13ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "14ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "15ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "16ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "17ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "18ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "19ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "20ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "21ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "22ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "23ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "24ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "25ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "26ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "27ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "SUBSEÇÃO JUDICIÁRIA DE ANÁPOLIS - 1ª VARA FEDERAL": "EDIFÍCIO-SEDE - AV. UNIVERSITÁRIA, QD. 02, LT. 05, JARDIM BANDEIRANTES, ANÁPOLIS/GO - CEP: 75083-035",
        "SUBSEÇÃO JUDICIÁRIA DE ANÁPOLIS - 2ª VARA FEDERAL": "EDIFÍCIO-SEDE - AV. UNIVERSITÁRIA, QD. 02, LT. 05, JARDIM BANDEIRANTES, ANÁPOLIS/GO - CEP: 75083-035",
        "SUBSEÇÃO JUDICIÁRIA DE APARECIDA DE GOIÂNIA - JUIZADO ESPECIAL FEDERAL": "EDIFÍCIO GAMA DIAS - AV. REP. LÍBANO ESQ. COM AV. B, QD. D-1, LTS. 21/30, 2º ANDAR, SETOR OESTE, GOIÂNIA/GO - CEP: 74115-030",
        "SUBSEÇÃO JUDICIÁRIA DE FORMOSA": "EDIFÍCIO-SEDE - RUA ITIQUIRA COM RUA LINDOLFO GONÇALVES, Nº 1000, SETOR NORDESTE, FORMOSA/GO - CEP: 73807-145",
        "SUBSEÇÃO JUDICIÁRIA DE ITUMBIARA": "EDIFÍCIO-SEDE - AV. JOÃO PAULO II, Nº 185, BAIRRO ERNESTINA BORGES DE ANDRADE, ITUMBIARA/GO - CEP: 75528-370 (TÉRREO DO EDIFÍCIO DO FÓRUM)",
        "SUBSEÇÃO JUDICIÁRIA DE JATAÍ": "EDIFÍCIO-SEDE - RUA NICOLAU ZAIDEM, Nº 1135, QD. 45, VILA FÁTIMA - CENTRO, JATAÍ/GO - CEP: 75803-055 (ANTIGO FÓRUM DA CIDADE)",
        "SUBSEÇÃO JUDICIÁRIA DE LUZIÂNIA": "EDIFÍCIO-SEDE - RUA DR. JOÃO TEIXEIRA, Nº 596, QD. 73, LT. 21-A, ED. IACI AMARAL, CENTRO, LUZIÂNIA/GO - CEP: 72800-440",
        "SUBSEÇÃO JUDICIÁRIA DE RIO VERDE": "EDIFÍCIO-SEDE - AVENIDA JOSÉ WALTER, Nº 500, QUADRA 49, LOTES 10/11, SETOR MORADA DO SOL, RIO VERDE/GO - CEP: 75908-740",
        "SUBSEÇÃO JUDICIÁRIA DE URUAÇU": "EDIFÍCIO-SEDE - AV. TOCANTINS, Nº 17, QD. 7, LT. 16, CENTRO, URUAÇU/GO - CEP: 76400-000"
    }

    if (local.value.length == 0)
        return ""
    else {
        let locais = Object.entries(locais_audiencias)
        for (const [key,value] of locais) {
            if (removeAcentuacaoString(key) == removeAcentuacaoString(local.value)){
                return `${key}: ${value}`
            }
        }
        return local.value
    }
}


let submit = true
const url_processos_cadastro = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/processos/formulario"
const url_processos = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/processos/default"
const url_compromissos = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/compromissos/formulario"
const url_compromisso_ficha = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/compromissos/ficha"
const url_compromisso_default = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/compromissos/default"
const url_tarefas = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/tarefas/formulario"
const url_tarefas_ficha = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/tarefas/default"
const link_processos_ajax = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/processos/ficha.asp?idPK="
const link_cliente_ajax = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/clientes/ficha.asp?idPK="
const url_cliente_addtarefa = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/clientes/default"

let cliente = {
        cliente: {
            nome: null,
            cpf: null,
            cidade: null,
            estado: null,
            local_atendido: null,
            parceiro: null,
            id: null
        },
        processo: {
            origem: null,
            dependente: null,
            coletivo: false,
            reu: null,
            responsavel: null,
            natureza: null,
            merito: null,
            cidade: null,
            estado: null,
            vara: null,
            cpf_demais_envolvidos: [],
            id_demais_envolvidos: []
        },
        compromisso: {
            atualizar: true,
            prazo_interno: null,
            prazo_fatal: null,
            tarefa_restante: null,
            tarefa_sequencia: null,
            tipo_compromisso: null,
            tipo_tarefa: null,
            descricao: null,
            semanas: null
        }
    }

function ouvirEventos (target) {
    for(let prop in target){
        if(prop.substr(0,2) == "on"){
            target.addEventListener(prop.substr(2), function(e){
                console.log(e.type,e.target)
           })
        }
     }
     
    var eventos = ['click', 'blur', 'mouseover', 'mouseup', 'mousedown','animationstart','animationend','animationiteration']
    for(let evt of eventos){
        target.addEventListener(evt, function(e){
            console.log(e.type)
        })
    }
}

async function criarTarefaColetivo () {

    const data_finalizacao = document.querySelector("#dataParaFinalizacao").value
    const descricao = document.querySelector("#descricao").value
    const idResponsavel = document.querySelector("#idResponsavel").value
    const idExecutor = document.querySelector("#idExecutor").value
    const idTipoTarefa = document.querySelector("#idTipoTarefa").value

    const url = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/tarefas/formularioScript.asp"

    cliente.processo.id_demais_envolvidos.forEach(id => {
        //makeRequest(url,id)
    })

    function makeRequest(url,id) {

        const textoEnviado = `idPK=&idCO=&idPR=&idCL=${id}&org=&superior=&idResponsavelAvisado=&agendada=n&idTipoTarefa=${idTipoTarefa}&dataParaFinalizacaoAgendada=&onde=&horarioInicial=&horarioFinal=&dataParaFinalizacao=${data_finalizacao}&descricao=${descricao}&idResponsavel=${idResponsavel}&idExecutor=${idExecutor}&lembreteQuandoFinalizarPara=&btnGravar=Gravar+informa%C3%A7%C3%B5es`

        const method = 'POST'

        let httpRequest = new XMLHttpRequest()
        httpRequest.onreadystatechange = alertContents;
        httpRequest.open(method, url)
        httpRequest.setRequestHeader('Content-Type','application/x-www-form-urlencoded')
        httpRequest.send(textoEnviado)

        function alertContents() {
            if (httpRequest.readyState === 4) {
                if (httpRequest.status === 200) {
                    alert("Tarefa criada com sucesso")
    
                } else {
                    alert('Houve um problema com a requisição')
                }
            }
        }
    }
        
}

function calculaPascoa(ano) {
    let X
    let Y

    if (ano >= 2020 && ano <= 2099) {
        X = 24
        Y = 5
    }
    if (ano >= 2100 && ano <= 2199) {
        X = 24
        Y = 6
    }
    if (ano >= 2200 && ano <= 2299) {
        X = 25
        Y = 7
    }

    let a = ano%19
    let b = ano%4
    let c = ano%7
    let d = (19*a + X)%30
    let e = (2*b+4*c+6*d+Y)%7
    let DIA
    let MES

    if (d+e > 9) {
        DIA = d+e-9
        MES = 3
    }
    else {
        DIA = d+e+22
        MES = 2
    }
    if (MES == 3 && DIA == 26)
        DIA = 19
    if (MES == 3 && DIA == 25 && d == 28 && a > 10)
        DIA = 18

    return new Date(ano,MES,DIA)
}

function FeriadosFixos (ano, parametro) {

    const tarefaContatar = (parametro == 1)
    const tarefaAdvogado = (parametro == 2)
    const indexDia = 1
    const indexMes = 0
    const indexJaneiro = 0

    //console.log(tarefaContatar, tarefaAdvogado, parametro)

    function setIntervaloFeriadosJudiciario(diaInicio, mesInicio, diaFinal, mesFinal) {
        let feriados = []
        let condicao = true
        let dia = diaInicio
        let mes = mesInicio
        const fimMesDezembro = 31
        const diaPrimeiro = 1

        while(condicao) {
            feriados.push([mes, dia])
            dia++
            if (dia > fimMesDezembro) {
                dia = diaPrimeiro
                mes = indexJaneiro
            }
            if ((dia > diaFinal) && (mes == mesFinal)) {
                condicao = false
            }
        }

        return feriados
    }

    let resultados = []

    const diaInicioForense = 20
    const mesInicioForense = 11
    const diaFimForense = 6
    const mesFimForense = 0

    const forense = setIntervaloFeriadosJudiciario(diaInicioForense, mesInicioForense, diaFimForense, mesFimForense)

    const diaInicioFeriasAdvogados = 20
    const mesInicioFeriasAdvogados = 11
    const diaFimFeriasAdvogados = 20
    const mesFimFeriasAdvogados = 0

    const advogados = setIntervaloFeriadosJudiciario(diaInicioFeriasAdvogados, mesInicioFeriasAdvogados, diaFimFeriasAdvogados, mesFimFeriasAdvogados)

    let datas = { // [mes, dia] (indice do mes de 0 a 11)
        nacional: [
            [0,1], //CONFRATERNIZAÇÃO UNIVERSAL
            [3,21], //TIRADENTES
            [4,1], //DIA DO TRABALHO
            [8,7], //INDEPENDÊNCIA DO BRASIL
            [9,12], //DIA DAS CRIANÇAS - DIA DA PADROEIRA DO BRASIL
            [10,2], //FINADOS
            [10,15], //PROCLAMAÇÃO DA REPÚBLICA
            [11,25], //NATAL
        ],
        recesso_forense : forense, //Recesso Forense 20/12 a 06/01
        ferias_advogados: advogados, //Recesso dos advogados 20/12 a 20/01 Art. 220 NCPC
        justica_nacional: [
            [7,11], //DIA DO MAGISTRADO
            [9,31], //DIA DO FUNCIONÁRIO PÚBLICO
            [10,1], //LEI FEDERAL Nº 5.010/66
            [11,8] //DIA DA JUSTIÇA
        ],
        TRF1: [
            [10,24], //Copa do mundo - Jogo do Brasil
            [10,28], //Copa do mundo - Jogo do Brasil
            [11,2] //Copa do mundo - Jogo do Brasil
        ],
        'SE': [
            [5,24], //SÃO JOÃO
            [6,8], //EMANCIPAÇÃO POLÍTICA DE SERGIPE
            [10,28] //JOGO DA COPA - PORTARIA GP1 72/2022 TJSE
        ],
        'AQUIDABA': [
            [3,4], //EMANCIPAÇÃO POLÍTICA
            [6,26] //PADROEIRA
        ],
        'ARACAJU': [
            [11,8], //PADROEIRA
            [2,17] //ANIVERSÁRIO DE ARACAJU
        ],
        'ARAUA': [
            [3,9], //EMANCIPAÇÃO POLÍTICA
            [9,5], //SÃO BENEDITO
            [11,8] //PADROEIRA
        ],
        'AREIA BRANCA': [
            [10,11], //FUNDAÇÃO DA CIDADE
            [11,8] //PADROEIRA
        ],
        'BARRA DOS COQUEIROS': [
            [10,25], //EMANCIPAÇÃO POLÍTICA
            [11,13] //PADROEIRA
        ],
        'BOQUIM': [
            [2,21], //CRIAÇÃO DO MUNICÍPIO
            [6,26] //PADROEIRA
        ],
        'CAMPO DO BRITO': [
            [7,15], //PADROEIRA
            [9,29] //EMANCIPAÇÃO POLÍTICA
        ],
        'CANINDE DE SAO FRANCISCO': [
            [10,25], //EMANCIPAÇÃO POLÍTICA
            [11,8] //EMANCIPAÇÃO POLÍTICA
        ],
        'CAPELA': [
            [1,2], //PADROEIRO
            [7,28] //EMANCIPAÇÃO POLÍTICA
        ],
        'CARIRA': [
            [4,2], //PADROEIRA
            [10,25] //EMANCIPAÇÃO POLÍTICA
        ],
        'CARMOPOLIS': [
            [6,16], //PADROEIRA
            [9,16], //EMANCIPAÇÃO POLÍTICA
            [10,29] //DIA DO EVANGÉLICO
        ],
        'CEDRO DE SAO JOAO': [
            [5,24], //PADROEIRO
            [9,4] //EMANCIPAÇÃO POLÍTICA
        ],
        'CRISTINAPOLIS': [
            [3,24], //EMANCIPAÇÃO POLÍTICA
            [6,31], //FERIADO MUNICIPAL EVANGÉLICO
            [9,4] //PADROEIRO
        ],
        'DIVINA PASTORA': [
            [2,13] //EMANCIPAÇÃO POLÍTICA
        ],
        'ESTANCIA': [
            [4,4], //ANIVERSÁRIO DA CIDADE
            [11,12] //PADROEIRA
        ],
        'FREI PAULO': [
            [5,30], //PADROEIRO
            [9,23] //EMANCIPAÇÃO POLÍTICA
        ],
        'GARARU': [
            [2,15], //EMANCIPAÇÃO POLÍTICA
            [4,10], //FESTA DO CRUZEIRO
            [7,15] //DIA DA ASSUNÇÃO DE NOSSA SENHORA
        ],
        'INDIAROBA': [
            [2,28], //EMANCIPAÇÃO POLÍTICA
            [11,8] //PADROEIRA
        ],
        'ITABAIANA': [
            [0,27], //PADROEIRO
            [5,13], //EMANCIPAÇÃO POLÍTICA
            [7,28] //PADROEIRA
        ],
        'ITABAIANINHA': [
            [9,19], //EMANCIPAÇÃO POLÍTICA
            [11,8] //PADROEIRA
        ],
        'ITAPORANGA DAJUDA': [
            [1,2], //PADROEIRA
            [2,28] //EMANCIPAÇÃO POLÍTICA
        ],
        'JAPARATUBA': [
            [5,11], //EMANCIPAÇÃO POLÍTICA
            [11,8] //PADROEIRA
        ],
        'JAPOATA': [
            [10,23], //EMANCIPAÇÃO POLÍTICA
            [10,25] //PADROEIRA
        ],
        'LAGARTO': [
            [3,20], //EMANCIPAÇÃO POLÍTICA
            [8,8] //PADROEIRA
        ],
        'LARANJEIRAS': [
            [5,26], //PADROEIRA
            [7,7] //EMANCIPAÇÃO POLÍTICA
        ],
        'MALHADOR': [
            [2,19], //PADROEIRO
            [10,25] //EMANCIPAÇÃO POLÍTICA
        ],
        'MARUIM': [
            [0,21], //PADROEIRO
            [4,5], //EMANCIPAÇÃO POLÍTICA
            [7,15] //CO-PADROEIRA NOSSA SENHORA DA PAZ
        ],
        'MONTE ALEGRE DE SERGIPE': [
            [5,24], //PADROEIRO
            [10,25] //EMANCIPAÇÃO POLÍTICA
        ],
        'NEOPOLIS': [
            [5,13], //PADROEIRO
            [5,29], //SÃO PEDRO
            [9,7], //NOSSA SENHORA DO ROSÁRIO
            [9,18] //FUNDAÇÃO DA CIDADE
        ],
        'NOSSA SENHORA DA GLORIA': [
            [0,5], //FESTA DOS SANTOS REIS
            [7,15], //PADROEIRA
            [8,26] //EMANCIPAÇÃO POLÍTICA
        ],
        'NOSSA SENHORA DAS DORES': [
            [5,11], //EMANCIPAÇÃO POLÍTICA
            [8,15] //PADROEIRA
        ],
        'SOCORRO': [
            [1,2], //PADROEIRA
            [6,7], //EMANCIPAÇÃO POLÍTICA
            [7,15] //FESTA DE NOSSA SENHORA DO AMPARO
        ],
        'PACATUBA': [
            [10,20], //PADROEIRO
            [10,25] //EMANCIPAÇÃO POLÍTICA
        ],
        'PEDRINHAS': [
            [2,19], //PADROEIRO
            [10,25] //EMANCIPAÇÃO POLÍTICA
        ],
        'PIRAMBU': [
            [1,11], //PADROEIRA
            [10,26] //EMANCIPAÇÃO POLÍTICA
        ],
        'POCO REDONDO': [
            [7,15], //PADROEIRA
            [10,25] //EMANCIPAÇÃO POLÍTICA
        ],
        'POCO VERDE': [
            [0,21], //PADROEIRO
            [4,3], //CO-PADROEIRA
            [10,25] //EMANCIPAÇÃO POLÍTICA
        ],
        'PORTO DA FOLHA': [
            [1,19], //EMANCIPAÇÃO POLÍTICA
            [11,7] //PADROEIRA
        ],
        'PROPRIA': [
            [1,7], //EMANCIPAÇÃO POLÍTICA
            [5,13] //PADROEIRO
        ],
        'RIACHAO DO DANTAS': [
            [4,9], //EMANCIPAÇÃO POLÍTICA
            [10,21] //PADROEIRA
        ],
        'RIACHUELO': [
            [0,25], //EMANCIPAÇÃO POLÍTICA
            [5,11], //BATALHA NAVAL DE RIACHUELO
            [11,8] //PADROEIRA
        ],
        'RIBEIROPOLIS': [
            [9,30], //PADROEIRO
            [11,18] //EMANCIPAÇÃO POLÍTICA
        ],
        'SALGADO': [
            [0,22], //PADROEIRO
            [9,4] //EMANCIPAÇÃO POLÍTICA
        ],
        'SANTANA DO SAO FRANCISCO': [
            [3,6], //EMANCIPAÇÃO POLÍTICA
            [6,26] //PADROEIRA
        ],
        'SANTO AMARO DAS BROTAS': [
            [0,15], //PADROEIRA
            [11,15] //EMANCIPAÇÃO POLÍTICA
        ],
        'SAO CRISTOVAO': [
            [8,8] //PADROEIRA
        ],
        'SAO DOMINGOS': [
            [9,21], //EMANCIPAÇÃO POLÍTICA
            [7,8] //PADROEIRO
        ],
        'SIMAO DIAS': [
            [5,12], //EMANCIPAÇÃO POLÍTICA
            [6,26] //PADROEIRA
        ],
        'TOBIAS BARRETO': [
            [5,7], //ANIVERSÁRIO DE NASCIMENTO DE TOBIAS BARRETO DE MENEZES
            [7,15], //PADROEIRA
            [9,23] //EMANCIPAÇÃO POLÍTICA
        ],
        'UMBAUBA': [
            [1,2], //PADROEIRA
            [1,6] //EMANCIPAÇÃO POLÍTICA
        ]
    }
    
    datas.nacional.forEach(feriado => {
        resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
    })

    if (tarefaContatar) {
        datas.SE.forEach(feriado => {
            resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
        })
        datas.ARACAJU.forEach(feriado => {
            resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
        })
    }

    if (tarefaAdvogado) {
        datas.justica_nacional.forEach(feriado => {
            resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
        })

        datas.ferias_advogados.forEach(feriado => {
            if (feriado[indexMes] == indexJaneiro)
                resultados.push(new Date(ano+1, feriado[indexMes], feriado[indexDia]))
            else
                resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
        })

        if (cliente.processo.estado == 'SE') {
            datas.SE.forEach(feriado => {
                resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
            })
        }

        if (cliente.processo.estado == 'DF' || cliente.processo.estado == 'GO') {
            datas.TRF1.forEach(feriado => {
                resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
            })
        }
        
        let date = Object.entries(datas)
        for (const [key,value] of date) {
            if (key == cliente.processo.cidade){
                value.forEach(feriado => {
                    resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
                })
            }
        }
        //console.log('entrou aqui')
    }

    datas.recesso_forense.forEach(feriado => {
        if (feriado[indexMes] == indexJaneiro)
            resultados.push(new Date(ano+1, feriado[indexMes], feriado[indexDia]))
        else
            resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
    })

    //console.log(resultados)

    return resultados
}

function calculaFeriados(parametro) {
    let date = new Date()
    let ano = date.getFullYear()
    let fixos = FeriadosFixos(ano,parametro)
    let pascoa = calculaPascoa(ano)
    let date_1 = new Date(pascoa.valueOf())
    let date_2 = new Date(pascoa.valueOf())
    let date_3 = new Date(pascoa.valueOf())
    let date_4 = new Date(pascoa.valueOf())
    let date_5 = new Date(pascoa.valueOf())
    let date_6 = new Date(pascoa.valueOf())
    let quarta_santa = new Date (date_1.setDate(pascoa.getDate()-4))
    let quinta_santa = new Date (date_2.setDate(pascoa.getDate()-3))
    let paixao = new Date (date_3.setDate(pascoa.getDate()-2))
    let segunda_carnaval = new Date (date_4.setDate(pascoa.getDate()-48))
    let terca_carnaval = new Date (date_5.setDate(pascoa.getDate()-47))
    let corpus = new Date (date_6.setDate(pascoa.getDate()+60))
    let variaveis = [segunda_carnaval,terca_carnaval,quarta_santa,quinta_santa,paixao,pascoa,corpus]
    let feriados = []

    fixos.forEach(e => {
        feriados.push(e)
    })
    variaveis.forEach(e => {
        feriados.push(e)
    })
    
    return feriados
}

function contarDias(inicial,final, parametro) {
    const diasSemana = ['domingo', 'segunda', 'terça', 'quarta', 'quinta', 'sexta', 'sábado']
    let contaTodos = 0
    let contaUteis = 0
    let domingos = 0
    let i
    let date = new Date(inicial[2],inicial[1],inicial[0])
    let condiction

    if (date.toDateString() == final.toDateString())
        return 0

    while (date < final) {
        date.setDate(date.getDate() + 1)
        //console.log(date)
        condiction = isFeriado(date, parametro)
        i = date.getDay()

        if (i == 0) {
            domingos++
        }

        if ((i > 0 && i < 6) && (!condiction)) {
            contaUteis++
        } 
        contaTodos++
        //console.log(date, contaUteis, diasSemana[date.getDay()], 'feriado: ' + condiction)
    }

    cliente.compromisso.semanas = domingos

    return { uteis: contaUteis, todosDias: contaTodos}
}

function dataContato(intervalo,data_interno,parametro, todosDias) {
    const diasSemana = ['domingo', 'segunda', 'terça', 'quarta', 'quinta', 'sexta', 'sábado']
    let hoje = new Date()
    hoje.setHours(0,0,0,0)
    let date
    let fim_intervalo = Number(intervalo)
    let condiction
    
    if (intervalo > 0) {
        let c = 0
        date = new Date(data_interno)
        while (c < fim_intervalo) {
            date.setDate(date.getDate() -1)
            condiction = isFeriado(date, parametro)
            i = date.getDay()
            if ((i > 0) && (i < 6) && !condiction) {
                ++c
            }
            //console.log(date, c, diasSemana[date.getDay()], 'feriado: ' + condiction)
        }
    } else {
        date = new Date(data_interno)
    }

    let ano_contato = date.getFullYear()
    let mes_contato = date.getMonth()+1
    let dia_contato = date.getDate()

    hoje.setDate(hoje.getDate() + todosDias)
    //console.log(hoje, todosDias)

    return `${dia_contato < 10 ? '0'.concat(dia_contato) : dia_contato}/${mes_contato < 10 ? '0'.concat(mes_contato) : mes_contato}/${ano_contato}`
}

function extrairDataPrazoFatalInput (prazo_fatal) {
    let data = prazo_fatal.split('/')
    return [data[0],Number(data[1])-1,data[2]]
}

function calculaIntervaloTarefas (dias) {
    const { tipo_compromisso, tipo_tarefa, tarefa_sequencia, semanas, tarefa_restante } = cliente.compromisso
    const { estado } = cliente.processo
    let cont_dois = {
        outros: ["EMENDAR","DADOS PERÍCIA SOCIAL","DADOS COMPLEMENTARES"],
        financeiro: ["ALVARÁ","RPV","PRECATÓRIO"]
    }
    let cont_tres = "PERÍCIA"
    let cont_quatro = ["AUDIÊNCIA DE CONCILIAÇÃO","AUDIÊNCIA INAUGURAL", "AUDIÊNCIA CONCILIATÓRIA", "AUDIÊNCIA INICIAL", "AUDIÊNCIA DE INTERROGATÓRIO"]
    let cont_cinco = ["AUDIÊNCIA DE INSTRUÇÃO", "AUDIÊNCIA DE INSTRUÇÃO E JULGAMENTO", "AUDIÊNCIA UNA"]

    if (((cont_cinco.includes(tipo_compromisso) && dias > 11) || (cont_quatro.includes(tipo_compromisso) && dias > 10) || (tipo_compromisso.search(cont_tres) == 0) && dias > 10)) {
        if (semanas >= 2) {
            if (tipo_tarefa == 'ANÁLISE')
                return dias-1
            if ((tipo_tarefa == 'CONTATAR CLIENTE' || tipo_tarefa == 'SMS E WHATSAPP')) {
                if (estado != 'GO' && estado != 'DF')
                    return dias-2
                else {
                    if (tipo_compromisso.search(cont_tres) == -1) {
                        if (tipo_tarefa == 'CONTATAR CLIENTE')
                            return dias-3
                        if (tipo_tarefa == 'SMS E WHATSAPP')
                            return dias-2
                    }
                    if (tipo_tarefa == 'CONTATAR CLIENTE')
                        return dias-3
                    if (tipo_tarefa == 'SMS E WHATSAPP')
                        return dias-2
                }
            }
            if (tipo_tarefa == 'LEMBRAR CLIENTE')
                return 2
            if (tipo_tarefa == 'ATO ORDINATÓRIO')
                return dias-1
        }
    }
    else {
        const ehAudienciaOuPericia = (cont_cinco.includes(tipo_compromisso) || cont_quatro.includes(tipo_compromisso) || tipo_compromisso.search(cont_tres) == 0)
        if (ehAudienciaOuPericia) {
            if ((tarefa_restante == tarefa_sequencia) && tipo_compromisso.search(cont_tres) == -1)
                return 0
            else
                if (tipo_tarefa == 'LEMBRAR CLIENTE')
                    return 2
            if (estado == 'GO' || estado == 'DF') {
                if (tipo_tarefa == 'CONTATAR CLIENTE')
                    return dias-1
            }
            return dias-1
        }
    }
    
    if (cont_dois.outros.includes(tipo_compromisso)) {
        if (tipo_tarefa == 'CONTATAR CLIENTE') {
            return dias-1
        }
    }

    const indiceTarefa = ((cliente.processo.estado == 'DF') || (cliente.processo.estado == 'GO') ? 1 : 2)

    if (cont_dois.financeiro.includes(tipo_compromisso)) {
        if (tipo_compromisso == 'RPV' && tarefa_restante == indiceTarefa) {
            return 0
        }

        if (tipo_compromisso == 'RPV' && tarefa_restante != indiceTarefa) {
            return dias-5
        }
    }

    return 0
}

function calcularDataTarefa(parametro) {
    let data_finalizacao = document.querySelector("#dataParaFinalizacao")
    let data_finalizacao_agendada = document.querySelector("#dataParaFinalizacaoAgendada")
    let hoje = new Date()
    let ano = hoje.getFullYear()
    let mes = hoje.getMonth()
    let dia = hoje.getDate()
    let data = extrairDataPrazoFatalInput(cliente.compromisso.prazo_interno)
    let data_interno = new Date(data[2],data[1],data[0])

    let dias = contarDias([dia, mes, ano], data_interno, parametro)
    const { uteis, todosDias} = dias
    //console.log('dias úteis: ' + uteis + ', dias totais: ' + todosDias)
    
    let intervalo = calculaIntervaloTarefas (uteis)

    console.log('intervalo: ' + intervalo)
    
    let data_tarefa = dataContato(intervalo, data_interno, parametro, todosDias)

    //console.log(data_tarefa)
    
    data_finalizacao.value = data_tarefa
    data_finalizacao_agendada.value = data_tarefa

    data_finalizacao_agendada.addEventListener('blur', e => {
        data_finalizacao.value = e.target.value
        if ((cliente.compromisso.tipo_tarefa == "CONTATAR CLIENTE" || cliente.compromisso.tipo_tarefa == "LEMBRAR CLIENTE") && (cliente.processo.estado != "DF" || cliente.processo.estado != "GO")) {
            let contactdiv = document.querySelector("#contactdiv")
            if (contactdiv != null) {
                contactdiv.parentNode.removeChild(contactdiv)
                validaExecutorContatar()
            }
        }
    })
    data_finalizacao.addEventListener('blur', e => {
        data_finalizacao_agendada.value = e.target.value
        if ((cliente.compromisso.tipo_tarefa == "CONTATAR CLIENTE" || cliente.compromisso.tipo_tarefa == "LEMBRAR CLIENTE") && (cliente.processo.estado != "DF" || cliente.processo.estado != "GO")) {
            let contactdiv = document.querySelector("#contactdiv")
            if (contactdiv != null) {
                contactdiv.parentNode.removeChild(contactdiv)
                validaExecutorContatar()
            }
        }
    })
}

async function desativarAtualizacao() {
    cliente.compromisso.atualizar = false
}

async function saveInfoCompromissos() {
    let descricao_tarefa = document.querySelector("#descricao")
    let option_ul = document.querySelector("#fdt-form > div:nth-child(6) > div:nth-child(1) > div > div > ul")
    let tipos = {
        "AUDIÊNCIA": "6",
        "PERÍCIA": "16",
        "RPV": "22",
        "ALVARÁ": "4",
        "PRECATÓRIO": "20"
    }
    let tipos_array = Object.entries(tipos)

    if (descricao_tarefa !== null) {
        descricao_tarefa.focus()
        descricao_tarefa.addEventListener('change',async event => {
            let intimacao = "15"
            event.target.value = event.target.value.toUpperCase()
            let tarefaIdentificada
            let indexTipoTarefa
            
            if (option_ul !== null) {
                for (const [key,value] in tipos_array) {
                    indexTipoTarefa = removeAcentuacaoString(event.target.value).search(removeAcentuacaoString(tipos_array[key][0]))
                    tarefaIdentificada = (indexTipoTarefa == 0)
                    if (tarefaIdentificada) {
                        intimacao = tipos_array[key][1]
                    }
                }
                option_ul.children[intimacao].children[0].click()
            }
        })
    }

}

function getIdCliente(url) {
    let indice_cliente = url.search("idPR=")
    return url.slice(indice_cliente+5)
}

function submitPesquisaProcesso() {
    let subBtn = document.querySelector("#fdt-form > div:nth-child(6) > div:nth-child(4) > input")
    subBtn.click()
}

function addEventoPasteProcesso (processo_input) {
    processo_input.addEventListener('paste', () => {
        setTimeout(() => {
            processo_input.value = removeCaracteresProcesso(processo_input.value)
            submitPesquisaProcesso()
        }, 10);
    })
}

function removeCaracteresProcesso(numeroProcesso) {
    
    let processoFormatado = ''

    function isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    for (let index = 0; index < numeroProcesso.length; index++) {
        if (isNumber(numeroProcesso[index]))
            processoFormatado += numeroProcesso[index]
    }

    return processoFormatado
}

function formataNumProcesso () {
    let processo_input = document.querySelector("#bsAdvProcessosTexto")
    let processo_input_cad = document.querySelector("#numero")
    
    
    if (processo_input !== null) {
        addEventoPasteProcesso(processo_input)
    }
    if (processo_input_cad !== null) {
        processo_input_cad.addEventListener('change', event => {
                event.target.value = removeCaracteresProcesso(event.target.value)
        })
    }
}

function selectRespExec (adv) {
    let responsavel_select = document.querySelector("#fdt-form > div:nth-child(13) > div:nth-child(1) > div > div > ul")
    let executor_select = document.querySelector("#fdt-form > div:nth-child(13) > div:nth-child(2) > div > div > ul")
    for (let index = 0; index < responsavel_select.children.length; index++) {
        if (responsavel_select.children[index].innerText == adv.responsavel) 
            responsavel_select.children[index].children[0].click()
        if (responsavel_select.children[index].innerText == adv.executor)
            executor_select.children[index].children[0].click()
    }
}

function createListaTarefas () {
    let divtarefa = document.querySelector('#divTipoTarefaNormal')
    divtarefa.style.position = 'relative'
    let div = document.createElement('div')
    let h1 = document.createElement('h3')
    let h2 = document.createElement('h3')
    h1.setAttribute('class','title')
    h2.setAttribute('class','title')
    
    divtarefa.style.position = 'relative'
    div.setAttribute('id','contactdiv')
    div.style.position = 'absolute'
    div.style.right = '5%'
    div.style.top = '0px'
    div.style.textAlign = 'center'
    div.style.background = 'dimgray'
    div.style.borderRadius = '5px'
    divtarefa.appendChild(div)
    div.appendChild(h1)
    let p1 = document.createElement('p')
    let p3 = document.createElement('p')
    p1.innerHTML = `Local atendido:`
    p3.innerHTML = `${cliente.cliente.local_atendido}`
    p1.style.color = 'white'
    p3.style.color = 'white'
    let p2 = document.createElement('p')
    let p4 = document.createElement('p')
    p2.innerHTML = `Cidade do cliente:`
    p4.innerHTML = `${cliente.cliente.cidade}`
    p2.style.color = 'white'
    p4.style.color = 'white'
    let p5 = document.createElement('p')
    let p6 = document.createElement('p')
    p5.innerHTML = `Parceiro:`
    p6.innerHTML = `${cliente.cliente.parceiro}`
    p5.style.color = 'white'
    p6.style.color = 'white'
    div.appendChild(p1)
    div.appendChild(p3)
    div.appendChild(p2)
    div.appendChild(p4)
    div.appendChild(p5)
    div.appendChild(p6)
    div.appendChild(h2)
    let h = document.querySelectorAll('.title')
    h1.innerHTML = 'INFO CLIENTE'
    h2.innerHTML = 'TAREFAS ADM'
    h.forEach(e => {
        e.style.background = 'whitesmoke'
        e.style.padding = '5px'
        e.style.textAlign = 'center'
        e.style.fontStyle = 'bold'
        e.style.borderRadius = '5px'
        e.style.top = '0px'
    })
}

function addListaTarefas(adm,data) {
    let ano = 2022
    let date = `${data[0]}/${data[1]}/${data[2]}`
    let div = document.querySelector('#contactdiv')
    let p1 = document.createElement('p')

    p1.innerHTML = `${adm[1].slice(0,adm[1].search(' '))}: ${adm[4]}`
    p1.style.color = 'white'

    if (adm[3] != null) {
        for (let index = 0; index < adm[3].length; index++) {
            if (date == `${adm[3][index]}/${ano}`) 
                p1.style.color = 'yellow'
        }
    }

    div.appendChild(p1)
}

async function getTarefasAdm(element,data){ 
    let idExecutor = element[0]

    // uso da API para fornecer acesso a realizar requests ao servidor
    let xhttp = new XMLHttpRequest();
    // esta função é chamado sempre que o atributo readyState sofre alteração
    xhttp.onreadystatechange = function() {
        // readyState = 4   - referente a request concluida
        // status     = 200 - referente ao status code http 'OK'
        if (this.readyState == 4 && this.status == 200) {
            // responsável por coletar a resposta. 
            let response  = this.responseText
            // preenchimento do resultado no HTML
            let parser = new DOMParser()
            let doc = parser.parseFromString(response,'text/html')
            let tarefas = doc.documentElement.querySelectorAll('body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div.table-responsive > table > tbody > tr')
            let contador = 0
            tarefas.forEach(e => {
                if (e.children[2] != null) {
                    if ((e.children[2].innerText.match("[0-9]*")[0].length >= 12) && !(e.children[3].innerText.search('Acompanhar') == 0)) {
                        contador++
                    }
                }
            })
            element[4] = contador
            addListaTarefas(element,data)
        }

        // Responsável por tratar o retorno que não for bem sucedido
        if (this.readyState == 4 && this.status !== 200){
            console.log('Data not found!') 
        }
    };
    // URL
    let url = 'http://fabioribeiro.eastus.cloudapp.azure.com/adv/tarefas/default.asp'

    // configuração para request
    xhttp.open("POST", url, true)
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')

    // envio da request
    xhttp.send(`bsAdvTarefas=s&bsAdvTarefasTecnica=&bsAdvTarefasDe=${data[0]}%2F${data[1]}%2F${data[2]}&bsAdvTarefasAte=${data[0]}%2F${data[1]}%2F${data[2]}&bsAdvTarefasTitulo=&bsAdvTarefasTipo=&bsAdvTarefasStatus=p&bsAdvTarefasAgendada=&bsAdvTarefasResponsavel=&bsAdvTarefasExecutor=${idExecutor}&bsAdvTarefasCompromisso=&bsAdvTarefasCliente=&bsAdvTarefasCpf=&filtrar=Filtrar`)
}


async function validaExecutorContatar () {
    let data_input = document.querySelector('#dataParaFinalizacao')
    createListaTarefas()
    setTimeout(async () => {
        let adm = await requererTarefasContatar(data_input.value.split('/'))

        adm.forEach(e => {
            if (e[2] != null)
                if (e[2].length > 1) {
                    e[2].forEach(local => {
                        if (local == cliente.cliente.local_atendido) {
                            return e[1]
                        }
                    })
                }
                else
                    if (e[2] == cliente.cliente.local_atendido) {
                        return e[1]
                    }
        })
        let min = adm[0][3]
        for (let index = 1; index < adm.length-1; index++) {
            if (min > adm[index][3]) {
                min = adm[index][3]
            } 
        }
        return adm
    }, 100);
    
    async function requererTarefasContatar(data) {
        let adm = []

        let viagemAsley = ["20/09","27/09","04/10","11/10","18/10","25/10","01/11","10/11","24/11", "06/12","13/12","20/12"]
        let viagemRobert = ["20/09","27/09","04/10","13/10","18/10","25/10","01/11","08/11","22/11","06/12","13/12","20/12"]
        let viagemGonzaga = ["28/09","05/10","19/10","09/11","16/11","23/11"]
        let viagemHenrique = ["07/12","14/12","21/12"]
        const idSamara = 169, idRuan = 87, idSandoval = 22, idAsley = 131, idCarlosH = 94, idMarcoR = 141, idVictorM = 120, idYuriD = 161

        let parceiros = ['ELIZEU ( PARCEIRO)','MARIA DO POV. PREGUIÇA','AGENOR (PARCEIRO)','ELIZANGELA ( PARCEIRA)','ERMINIO','AUGUSTO ( PARCEIRO)']

        let varaEstancia = ['7ª VARA FEDERAL', '1ª VARA CIVEL DE ESTÂNCIA', '2ª VARA CIVEL DE ESTÂNCIA', 'JUIZADO ESPECIAL CÍVEL E CRIMINAL DE ESTÂNCIA', 'VARA DE ESTÂNCIA', 'VARA DO TRABALHO DE ESTÂNCIA']

        let estancia = [[idRuan,"RUAN APARICIO DOS SANTOS",null,null,0],[idSamara,"SAMARA ALBUQUERQUE CRUZ",null,null,0],[idSandoval,"SANDOVAL FILHO CORREIA LIMA FILHO",null,null,0]]

        let aracaju = [
            [idAsley,"ASLEY RODRIGO DE MELO LIMA",["ALAGOINHAS"],viagemAsley,0],
            [idCarlosH,"CARLOS HENRIQUE ESPASIANI",["UMBAÚBA","LOTEAMENTO JEOVA (BOTAFOGO)"],viagemHenrique,0],
            //[115,"GABRIEL FRANÇA VITAL",["CARMOPÓLIS","TOBIAS BARRETO","PEDRINHAS","SANTO AMARO"],null,null,0],
            [idMarcoR,"MARCOS ROBERT DE MELO LIMA",["ESTANCIA","CAPELA","JAPARATUBA","CONDE/BA"],viagemRobert,0],
            //[178,"MATHEUS GONZAGA LEMOS",["CARMOPÓLIS","TOBIAS BARRETO","PEDRINHAS","SANTO AMARO"],viagemGonzaga,0],
            [idVictorM,"VICTOR MENDES DOS SANTOS",null,null,0],
            [idYuriD,"YURI DIAS PEREIRA",null,null,0]
        ]

        if (((cliente.cliente.cidade == "ESTANCIA" && cliente.cliente.local_atendido == "ESTANCIA")) || ((parceiros.includes(cliente.cliente.parceiro)) && varaEstancia.includes(cliente.processo.vara)))
            estancia.forEach(e => {
                adm.push(e)
            })
        else {
            if (varaEstancia.includes(cliente.processo.vara)) {
                alert("Verificar executor manualmente!")
                aracaju.forEach(e => {
                    adm.push(e)
                })
                estancia.forEach(e => {
                    adm.push(e)
                })
            }
            else
                aracaju.forEach(e => {
                    adm.push(e)
                })
        }

        adm.forEach(async e => {
            await getTarefasAdm(e,data)
        })
        
        return adm
    }
}

async function validaResponsavelTj (num) {
    let tarefa = cliente.compromisso.tipo_tarefa
    let digito = Number(cliente.processo.origem[num-1])
    let financeiro = ["RPV TRF1 BRASÌLIA", "RPV TRF1 GOIÁS", "RPV TRF5 ARACAJU", "RPV TRF5 ESTÂNCIA", "RPV TRF1 BAHIA", "PRECATÓRIO"]
    let adm = ["CONTATAR CLIENTE","LEMBRAR CLIENTE"]
    let sac = "SMS E WHATSAPP"
    let natureza = cliente.processo.natureza

    if (tarefa == "RECEBIMENTO DE ALVARÁ" && cliente.compromisso.tarefa_restante == 2) {
        return {responsavel: "LUCIANA DOS SANTOS ARAUJO",executor: "LUCIANA LIMA REZENDE"}
    }

    if (financeiro.includes(tarefa) && cliente.compromisso.tarefa_restante == 2) {
        let eh_mateus_financeiro = await getFinanceiro()
        setFinanceiro(!eh_mateus_financeiro)
        return {responsavel: "LUCIANA DOS SANTOS ARAUJO",executor: eh_mateus_financeiro ? "MATEUS DOS SANTOS SILVA":"OVERLANDIA SANTOS MELO"}
    }
    if (adm.includes(tarefa)){
        if (cliente.cliente.cidade == "ESTANCIA" && cliente.cliente.local_atendido == "ESTANCIA")
            return {responsavel: "SANDOVAL FILHO CORREIA LIMA FILHO",executor: "SANDOVAL FILHO CORREIA LIMA FILHO"}
        return {responsavel: "JULIANO OLIVEIRA DE SOUZA",executor: "JULIANO OLIVEIRA DE SOUZA"}
    }
    if (sac == tarefa)
        return {responsavel: "HENYR GOIS DOS SANTOS",executor: "HENYR GOIS DOS SANTOS"}
    if (natureza == "TRABALHISTA")
        return {responsavel: "VICTOR HUGO SOUSA ANDRADE",executor: "VICTOR HUGO SOUSA ANDRADE"}
    if (natureza == "PREVIDENCIÁRIA")
        return {responsavel: "KEVEN FARO DE CARVALHO",executor: "KEVEN FARO DE CARVALHO"}
    if (natureza == "BANCÁRIO") {
        const rodrigo = [5]
        const gabriel = [1,4,9]
        if (rodrigo.includes(digito) || tarefa == "SESSÃO DE JULGAMENTO" || tarefa.search("AUDIÊNCIA") == 0)
            return {responsavel: "RODRIGO AGUIAR SANTOS",executor: "RODRIGO AGUIAR SANTOS"}
        if (gabriel.includes(digito))
            return {responsavel: "RODRIGO AGUIAR SANTOS",executor: "GABRIEL DAVILA FILGUEIRAS MELLONE"}
        return {responsavel: "RODRIGO AGUIAR SANTOS",executor: "ANTONIO RABELO NOLES DE ABREU"}
    }
    if (natureza == "CÍVEL" || natureza == "CONSUMIDOR" || natureza == "SERVIDOR PÚBLICO") {
        const ala = [0,1,4,6,8]
            if (ala.includes(digito) && tarefa != "SESSÃO DE JULGAMENTO" && tarefa.search("AUDIÊNCIA") != 0)
                return {responsavel: "RODRIGO AGUIAR SANTOS",executor: "ALÃ FEITOSA CARVALHO"}
            return {responsavel: "RODRIGO AGUIAR SANTOS",executor: "RODRIGO AGUIAR SANTOS"}
    }
}

async function validaResponsavelFederal (num) {
    let tarefa = cliente.compromisso.tipo_tarefa
    let numero_processo = cliente.processo.origem
    let financeiro = ["RPV TRF1 BRASÌLIA", "RPV TRF1 GOIÁS", "RPV TRF5 ARACAJU", "RPV TRF5 ESTÂNCIA", "RPV TRF1 BAHIA", "PRECATÓRIO"]
    let adm = ["CONTATAR CLIENTE","LEMBRAR CLIENTE"]
    let sac = "SMS E WHATSAPP"
    let secao = numero_processo.slice(num-4,num)
    let secao_df_go = ["3400","3501","3502","3506","3306", "0015"]
    let setimo_digito = Number(numero_processo[6])
    let digito_verificador = numero_processo.slice(13,16)
    let natureza = cliente.processo.natureza
    const indiceTarefa = ((cliente.processo.estado == 'DF') || (cliente.processo.estado == 'GO') ? 1 : 2)
    console.log(indiceTarefa)

    if ((tarefa == "RECEBIMENTO DE ALVARÁ") && (cliente.compromisso.tarefa_restante == indiceTarefa)) {
        return {responsavel: "LUCIANA DOS SANTOS ARAUJO",executor: "LUCIANA LIMA REZENDE"}
    }

    if (financeiro.includes(tarefa) && cliente.compromisso.tarefa_restante == indiceTarefa) {
        let eh_mateus_financeiro = await getFinanceiro()
        setFinanceiro(!eh_mateus_financeiro)
        return {responsavel: "LUCIANA DOS SANTOS ARAUJO",executor: eh_mateus_financeiro ? "MATEUS DOS SANTOS SILVA":"OVERLANDIA SANTOS MELO"}
    }

    if (adm.includes(tarefa)) {
        if (cliente.processo.estado == "DF" || cliente.processo.estado == "GO") {
            return {responsavel: "HENYR GOIS DOS SANTOS",executor: "HENYR GOIS DOS SANTOS"}
        }
        if(cliente.cliente.cidade == "ESTANCIA"  && cliente.cliente.local_atendido == "ESTANCIA") { //Tarefa contatar para escritório de Estância
            return {responsavel: "SANDOVAL FILHO CORREIA LIMA FILHO",executor: "SANDOVAL FILHO CORREIA LIMA FILHO"}
        }
        return {responsavel: "JULIANO OLIVEIRA DE SOUZA",executor: "JULIANO OLIVEIRA DE SOUZA"} //Tarefa contatar para demais localidades
    }

    if (sac == tarefa) { //Tarefas para o SAC
        return {responsavel: "HENYR GOIS DOS SANTOS",executor: "HENYR GOIS DOS SANTOS"}
    }
    if ((digito_verificador == "520" || natureza == "TRABALHISTA") || (natureza == "SERVIDOR PÚBLICO" && cliente.processo.responsavel == "VICTOR HUGO SOUSA ANDRADE")) {  //Processos Trabalhistas TRT20
        return {responsavel: "VICTOR HUGO SOUSA ANDRADE",executor: "VICTOR HUGO SOUSA ANDRADE"}
    }
    if (digito_verificador == "401" || secao_df_go.includes(secao)) { // Processos do TRF1
        if (cliente.processo.estado == "DF" || cliente.processo.estado == "GO") {
            let bruno = [0,2,4,6,8]
            if (bruno.includes(setimo_digito) || tarefa.search("AUDIÊNCIA") == 0)
                return {responsavel: "BRUNO PRADO GUIMARAES",executor: "BRUNO PRADO GUIMARAES"}
            return {responsavel: "BRUNO PRADO GUIMARAES",executor: "PAULO VICTOR SANTANA TEIXEIRA"}
        }
        return {responsavel: "DIEGO MELO SOBRINHO",executor: "DIEGO MELO SOBRINHO"}
    }
    if (natureza == "PREVIDENCIÁRIA") {
        if (digito_verificador == "403") { //Processos do TRF3
            return {responsavel: "DIEGO MELO SOBRINHO",executor: "DIEGO MELO SOBRINHO"}
        }
        if (digito_verificador == "405" && numero_processo.search('080') == 0) { //Processos do TRF5
            return {responsavel: "DIEGO MELO SOBRINHO",executor: "DIEGO MELO SOBRINHO"}
        }
        else {
            if (secao == "8500") { //Processos da seção de Aracaju
                if (setimo_digito < 3)
                    return {responsavel: "KEVEN FARO DE CARVALHO",executor: "KEVEN FARO DE CARVALHO"}
                return {responsavel: "MARCUS VINICIUS DE SOUZA MORAIS",executor: "MARCUS VINICIUS DE SOUZA MORAIS"}
            }
            if (secao == "8501") //Processos da seção de
                return {responsavel: "KEVEN FARO DE CARVALHO",executor: "KEVEN FARO DE CARVALHO"}
            if (secao == "8502") { //Processos da seção de Estância
                if (setimo_digito < 3)
                    return {responsavel: "KEVEN FARO DE CARVALHO",executor: "KEVEN FARO DE CARVALHO"}
                return {responsavel: "SARA GONÇALVES PINHEIRO",executor: "SARA GONÇALVES PINHEIRO"}
            }
            if (secao == "8503" || secao == "8504") //Processos da seção de 
                return {responsavel: "SARA GONÇALVES PINHEIRO",executor: "SARA GONÇALVES PINHEIRO"}
            return null
            }
    }
    if (natureza == "CÍVEL" || natureza == "CONSUMIDOR" || natureza == "SERVIDOR PÚBLICO") //Processos de natureza cível
        return {responsavel: "RODRIGO AGUIAR SANTOS",executor: "RODRIGO AGUIAR SANTOS"}
    if (natureza == "BANCÁRIO") //Processos de natureza bancária
        return {responsavel: "RODRIGO AGUIAR SANTOS",executor: "RODRIGO AGUIAR SANTOS"}
}

async function validaEsferaProcesso() {
    let caracteres_processo = cliente.processo.origem.length
    let adv
    if (caracteres_processo == 12) {
        adv = await validaResponsavelTj(caracteres_processo)
        if (adv != null)
            selectRespExec(adv)
    } else if (caracteres_processo == 15 || caracteres_processo == 17 || caracteres_processo == 20) {
        adv = await validaResponsavelFederal(caracteres_processo)
        if (adv != null)
            selectRespExec(adv)
    } else
        console.log("Erro no cadastro do número do processo")
}

function validaTipoIntimacao(txt) {
    let p1 = txt.search("PERÍCIA")
    const ehPericia = (p1 == 0)

    if (txt == "RPV") {
        if (cliente.processo.cidade == "ESTANCIA")
            return "RPV TRF5 ESTÂNCIA"
        if (cliente.processo.estado == "DF")
            return "RPV TRF1 BRASÌLIA"
        if (cliente.processo.estado == "GO")
            return "RPV TRF1 GOIÁS"
        if (cliente.processo.cidade == "BA")
            return "RPV TRF1 BAHIA"
        return "RPV TRF5 ARACAJU"
    }
    
    if (txt == "PAUTA" || txt == "RETIRADO DE PAUTA")
        return "SESSÃO DE JULGAMENTO"

    if (txt == "ALVARÁ")
        return "RECEBIMENTO DE ALVARÁ"
    
    if (txt == "AUDIÊNCIA DE CONCILIAÇÃO")
        return "AUDIÊNCIA CONCILIATÓRIA"
    
    if (txt == "AUDIÊNCIA INICIAL")
        return "AUDIÊNCIA INAUGURAL"
    
    if (txt == "PLANILHA")
        return "CÁLCULOS"
    
    if (txt == "DADOS PERICIA SOCIAL" || txt == "DADOS COMPLEMENTARES" || txt == "EMENDA A INICIAL" || txt == "EMENDAR A INICIAL" || txt == "EMENDAR À INICIAL" || txt == "EMENDA À INICIAL")
        return "EMENDAR"
    
    if (txt == "PEDIDO DE VISTAS" || txt == "PEDIDO DE VISTA")
        return "MANIFESTAÇÃO"

    if (ehPericia)
        return "CONTATAR CLIENTE"

    return txt
}

function desmarcarCaixaTarefaSequencia() {
    let box = document.querySelector("#fdt-form > div:nth-child(15) > div.col-sm-12 > div > label > input")
    box.checked = false
}

function proximaTarefa (descricao_tarefa) {
    let tipo_audiencia = ["INSTRUÇÃO", "UNA"]
    let audiencia = ["CONTATAR CLIENTE","SMS E WHATSAPP","LEMBRAR CLIENTE"]
    let audiencia_short = ["CONTATAR CLIENTE","SMS E WHATSAPP"]
    let instrucao = ["CONTATAR CLIENTE","SMS E WHATSAPP","LEMBRAR CLIENTE", "ANÁLISE"]
    let instrucao_short = ["CONTATAR CLIENTE","SMS E WHATSAPP","ANÁLISE"]
    let pericia = ["SMS E WHATSAPP","LEMBRAR CLIENTE"]
    let pericia_short = ["SMS E WHATSAPP"]
    let pericia_df = ["SMS E WHATSAPP","LEMBRAR CLIENTE","ATO ORDINATÓRIO"]
    let pericia_df_short = ["SMS E WHATSAPP","ATO ORDINATÓRIO"]
    let financeiro = ["RECEBIMENTO DE ALVARÁ","RPV TRF1 BAHIA", "RPV TRF1 BRASÌLIA", "RPV TRF1 GOIÁS", "RPV TRF5 ARACAJU", "RPV TRF5 ESTÂNCIA","PRECATÓRIO"]
    let emendar = "CONTATAR CLIENTE"
    let sequencia = cliente.compromisso.tarefa_sequencia
    let compromisso = cliente.compromisso.tipo_compromisso
    let cont = cliente.compromisso.tarefa_restante
    let i

    if (cliente.compromisso.tarefa_sequencia == cliente.compromisso.tarefa_restante) {
        cliente.compromisso.descricao = descricao_tarefa.value
    }

    if (compromisso.search('AUDIÊNCIA') == 0 && cont > -1) {
        if (compromisso.search(tipo_audiencia[0]) < 0 && compromisso.search(tipo_audiencia[1]) < 0) {
            if (cliente.compromisso.tarefa_sequencia < 4) {
                i = audiencia_short.indexOf(cliente.compromisso.tipo_tarefa)
                if (i <= audiencia_short.length) {
                    cliente.compromisso.tipo_tarefa = audiencia_short[i+1]
                    return cont-1
                }
            }
            else {
                i = audiencia.indexOf(cliente.compromisso.tipo_tarefa)
                if (i <= audiencia.length) {
                    cliente.compromisso.tipo_tarefa = audiencia[i+1]
                    return cont-1
                }
            }
        }
        else {
            if (cliente.compromisso.tarefa_sequencia < 5) {
                i = instrucao_short.indexOf(cliente.compromisso.tipo_tarefa)
                if (i <= instrucao_short.length) {
                    cliente.compromisso.tipo_tarefa = instrucao_short[i+1]
                    return cont-1
                }
            }
            else {
                i = instrucao.indexOf(cliente.compromisso.tipo_tarefa)
                if (i <= instrucao.length) {
                    cliente.compromisso.tipo_tarefa = instrucao[i+1]
                    return cont-1
                }
            }
        }
    }
    else {
        if (compromisso.search('PERÍCIA') == 0 && cont > -1) {
            if (cliente.processo.estado == "DF" || cliente.processo.estado == "GO") {
                if (cliente.compromisso.tarefa_sequencia < 4) {
                    i = pericia_df_short.indexOf(cliente.compromisso.tipo_tarefa)
                    if (i <= pericia_df_short.length) {
                        cliente.compromisso.tipo_tarefa = pericia_df_short[i+1]
                        return cont-1
                    }
                }
                else {
                    i = pericia_df.indexOf(cliente.compromisso.tipo_tarefa)
                    if (i <= pericia_df.length) {
                        cliente.compromisso.tipo_tarefa = pericia_df[i+1]
                        return cont-1
                    }
                }
            }
            else {
                if (cliente.compromisso.tarefa_sequencia < 3) {
                    i = pericia_short.indexOf(cliente.compromisso.tipo_tarefa)
                    if (i <= pericia_short.length) {
                        cliente.compromisso.tipo_tarefa = pericia_short[i+1]
                        return cont-1
                    }
                }
                else {
                    i = pericia.indexOf(cliente.compromisso.tipo_tarefa)
                    if (i <= pericia.length) {
                        cliente.compromisso.tipo_tarefa = pericia[i+1]
                        return cont-1
                    }
                }
            }
        }
        else {
            if (sequencia == 2 && cont > 1 && financeiro.includes(cliente.compromisso.tipo_tarefa)) {
                return cont-1
            }

            if (sequencia == 2 && cont > 1 && !(financeiro.includes(cliente.compromisso.tipo_tarefa))) {
                cliente.compromisso.tipo_tarefa = emendar
                return cont-1
            }
            if (sequencia == 2 && cont == 1 && !(financeiro.includes(cliente.compromisso.tipo_tarefa))) {
                cliente.compromisso.tipo_tarefa = ''
            }
            return cont
        }
    }
}

function mostrarFormTarefaColetivo () {
    const divTarefa = document.createElement('div')

    divTarefa.style.width = '100px'
    divTarefa.style.height = '100px'
    divTarefa.style.background = 'white'
}


function removeEventGravar () {
    const gravarBtn = document.querySelector('#btnGravar')

    gravarBtn.addEventListener('click', event => {
        event.preventDefault()
    })

    mostrarFormTarefaColetivo()
}

async function submitAtualizarTarefa (descricao_tarefa) {
    let gravarBtn = document.querySelector("#btnGravar")
    //removeEventGravar()
    gravarBtn.addEventListener('click', async () => {
        if (cliente.processo.coletivo && (cliente.compromisso.tipo_compromisso.search("AUDIÊNCIA") == 0 || cliente.compromisso.tipo_compromisso.search("PERÍCIA") == 0) && (cliente.compromisso.tipo_tarefa == "CONTATAR CLIENTE" || cliente.compromisso.tipo_tarefa == "LEMBRAR CLIENTE") || "SMS E WHATSAPP") {
            //criarTarefaColetivo()
        }
        if (submit) {
            submit = false
            cliente.compromisso.tarefa_restante = await proximaTarefa(descricao_tarefa)
            desativarAtualizacao()
            setCliente(cliente)
        }
    })
}

function existeOrigem() {
    if (cliente.processo.dependente !== null)
        if (cliente.processo.dependente.length > 0)
            return `${cliente.processo.dependente} (ORIGEM ${cliente.processo.origem})`
    return cliente.processo.origem
}

function atualizaHora (horario_inicial) {
    let hora = Number(horario_inicial.value.slice(0,2))+2

    if (horario_inicial.value.length == 0)
        horario_inicial.value = "00:00"

    if (hora == 24)
        hora = '00'
    else if (hora == 25)
        hora = '01'
    else if (hora == 26)
        hora = '02'
    else if (hora < 10) {
        let num = hora
        hora = `0${num}`
    }
    return `${hora}:${horario_inicial.value.slice(3)}`
}

function atualizaDescricao (descricao_tarefa,horario_inicial,horario_final,local) {
    let loc = cliente.compromisso.tipo_tarefa.search(" ")
    
    let endereço = getEndereço(local)

    if (loc < 0)
        loc = cliente.compromisso.tipo_tarefa.length   

    horario_final.value = atualizaHora(horario_inicial)

    let processo = existeOrigem()

    let validacao_tarefa = removeAcentuacaoString(cliente.compromisso.tipo_tarefa.slice(0,loc))

    if (cliente.compromisso.descricao !== null && removeAcentuacaoString(validacao_tarefa) != "ANALISE" && removeAcentuacaoString(cliente.compromisso.tipo_tarefa) != "ATO ORDINATORIO" && cliente.compromisso.tipo_compromisso != "EMENDAR") {
        descricao_tarefa.value = cliente.compromisso.descricao
    }
    else {
        if (validacao_tarefa == "AUDIENCIA" && cliente.compromisso.tarefa_sequencia == cliente.compromisso.tarefa_restante) {
            descricao_tarefa.value = `${processo} - ${cliente.compromisso.tipo_compromisso} DE ${cliente.cliente.nome} ${cliente.cliente.cpf} X ${cliente.processo.reu.length > 0 ? cliente.processo.reu : '_______'}, NO DIA ${cliente.compromisso.prazo_interno} ÀS ${horario_inicial.value}, LOCAL: ${endereço}`
        }
        else
            if (removeAcentuacaoString(cliente.compromisso.tipo_compromisso).search('PERICIA') == 0 && cliente.compromisso.tarefa_restante > 1) {
                    let perito = document.querySelector('#input_perito')
                    descricao_tarefa.value = `${processo} - ${cliente.compromisso.tipo_compromisso} DE ${cliente.cliente.nome} ${cliente.cliente.cpf}, NO DIA ${cliente.compromisso.prazo_interno} ÀS ${horario_inicial.value}, PERITO: ${perito != null ? perito.value : ''}, LOCAL: ${endereço}`
            }
            else
                if (removeAcentuacaoString(cliente.compromisso.tipo_tarefa) == "ATO ORDINATORIO" && removeAcentuacaoString(cliente.compromisso.tipo_compromisso).search('PERICIA') == 0) {
                    descricao_tarefa.value = `${processo} - ATO ORDINATÓRIO (PERÍCIA DESIGNADA)`
                }
                else
                    if ((validacao_tarefa == "ANALISE") && removeAcentuacaoString(cliente.compromisso.tipo_compromisso).search('AUDIENCIA') == 0) {
                        descricao_tarefa.value = `${processo} - VERIFICAR NECESSIDADE DE TESTEMUNHAS`
                    }
                    else
                        if ((cliente.compromisso.tipo_compromisso == "EMENDAR") && (cliente.compromisso.tarefa_restante == 1)) {
                            descricao_tarefa.value = `${processo} - `
                        }
                        else {
                            descricao_tarefa.value = `${processo} - ${cliente.compromisso.tipo_compromisso}`
                        }
    }
}

function selectTipoIntimacao(select_tipo_intimacao, option_li) {
    let achou = false
    let indice_manifestação
    let tipo_intimacao = cliente.compromisso.tipo_tarefa
    for (let i = 0; i < select_tipo_intimacao.options.length; i++) {
        let n = removeAcentuacaoString(select_tipo_intimacao.options[i].innerText).toUpperCase().search(removeAcentuacaoString(tipo_intimacao).toUpperCase())
        let n_intimacao = removeAcentuacaoString(select_tipo_intimacao.options[i].innerText).toUpperCase().search(("MANIFESTACAO"))
        if (n_intimacao == 0)
            indice_manifestação = i
        if (n == 0) {
            option_li.children[i].children[0].click()
            achou = true
            return 0
        }
    }
    let space = (tipo_intimacao.search(" "))
    for (let i = 0; i < select_tipo_intimacao.options.length; i++) {
        let n = removeAcentuacaoString(select_tipo_intimacao.options[i].innerText).toUpperCase().search(removeAcentuacaoString(tipo_intimacao.slice(0,space)))
        if (n == 0) {
            option_li.children[i].children[0].click()
            achou = true
            return 0
        }
    }
    
    if (!achou) {
        option_li.children[indice_manifestação].children[0].click()
    }
}

function removeInputDependente (element) {
    element.parentNode.removeChild(element)
}

function createInputDependente() {
    let txt_dependente = document.createElement('b')
    let input = document.createElement('input')
    txt_dependente.setAttribute('id','txt_dependente')
    txt_dependente.innerHTML = 'Processo dependente: '
    input.setAttribute('id','input_dependente')
    input.setAttribute('type','text')
    input.classList.add("form-control")
    input.style.display = 'inline'
    input.style.width = '40%'
    let div_conteudo = document.querySelector(".alert-info")
    div_conteudo.innerHTML += '<br>'
    div_conteudo.appendChild(txt_dependente)
    div_conteudo.appendChild(input)
    input.addEventListener('input', event => {
        cliente.processo.dependente = removeCaracteresProcesso(event.target.value)
    })
}

function mostrarCamposPericia () {
    let tarefa_normal = document.querySelector('#divTipoTarefaNormal')
    let data_input = document.querySelector('#divTipoTarefaNormal > div:nth-child(1) > div.col-sm-8')
    data_input.setAttribute('class','form-group col-sm-4')
    let horario_final = document.querySelector("#horarioFinal")
    let descricao_tarefa = document.querySelector("#descricao")
    
    let div_row_2 = document.createElement('div')
    div_row_2.setAttribute('class','row')
    tarefa_normal.appendChild(div_row_2)

    let div_perito = document.createElement('div')
    let label_perito = document.createElement('label')
    let input_perito = document.createElement('input')
    label_perito.innerHTML = 'Perito(a): '
    div_perito.setAttribute('class','form-group col-sm-4')
    input_perito.setAttribute('class','form-control')
    input_perito.setAttribute('id','input_perito')

    let div_local = document.createElement('div')
    let label_local = document.createElement('label')
    let input_local = document.createElement('input')
    label_local.innerHTML = 'Local: '
    div_local.setAttribute('class','form-group col-sm-4')
    input_local.setAttribute('class','form-control')

    let div_horario_inicial = document.createElement('div')
    let label_horario_inicial = document.createElement('label')
    let input_horario_inicial = document.createElement('input')
    label_horario_inicial.innerHTML = 'Horário: '
    div_horario_inicial.setAttribute('class','form-group datepicker-hora col-sm-4')
    input_horario_inicial.setAttribute('class','form-control')
    input_horario_inicial.setAttribute('type','time')
    input_horario_inicial.setAttribute('id','horarioInicial')

    data_input.after(div_local)
    div_local.appendChild(label_local)
    div_local.appendChild(input_local)
    input_local.addEventListener('input', () => {
        input_local.value = input_local.value.toUpperCase()
        atualizaDescricao(descricao_tarefa, input_horario_inicial,horario_final, input_local)
    })

    div_row_2.appendChild(div_horario_inicial)
    div_horario_inicial.appendChild(label_horario_inicial)
    div_horario_inicial.appendChild(input_horario_inicial)
    input_horario_inicial.value = '00:00'
    input_horario_inicial.addEventListener('input',() => {
        input_horario_inicial.value = input_horario_inicial.value.toUpperCase()
        atualizaDescricao(descricao_tarefa, input_horario_inicial,horario_final, input_local)
    })

    div_row_2.appendChild(div_perito)
    div_perito.appendChild(label_perito)
    div_perito.appendChild(input_perito)
    input_perito.addEventListener('input',() => {
        input_perito.value = input_perito.value.toUpperCase()
        atualizaDescricao(descricao_tarefa, input_horario_inicial,horario_final, input_local)
    })
}

function loadInfo () {
    let select_tipo_intimacao = document.querySelector("#idTipoTarefa")
    let descricao_tarefa = document.querySelector("#descricao")
    let option_li = document.querySelector(`#fdt-form > div:nth-child(9) > div.form-group.col-sm-8 > div > div > ul`)
    let horario_inicial = document.querySelector("#horarioInicial")
    let horario_final = document.querySelector("#horarioFinal")
    let local = document.querySelector("#onde")
    let processo_dependente = document.querySelector("#input_dependente")

    descricao_tarefa.addEventListener('change', event => {
        event.target.value = event.target.value.toUpperCase()
    })
    local.addEventListener('input', event => {
        event.target.value = event.target.value.toUpperCase()
    })
    
    for (let index = 0; index < option_li.children.length; index++) {
        option_li.children[index].children[0].addEventListener('click', () => {
            validaEsferaProcesso()
            setTimeout(() => {
                if (cliente.compromisso.tipo_compromisso.search('PERÍCIA') == 0 && cliente.compromisso.tarefa_sequencia == cliente.compromisso.tarefa_restante)
                    mostrarCamposPericia()
                calcularDataTarefa(((cliente.compromisso.tipo_tarefa == "CONTATAR CLIENTE") || (cliente.compromisso.tipo_tarefa == "LEMBRAR CLIENTE")) ? 1 : 2)
                if (cliente.compromisso.atualizar) {
                    let contagem = contarTarefas()
                    cliente.compromisso.tarefa_sequencia = contagem
                    cliente.compromisso.tarefa_restante = contagem
                }
            }, 50);
            if ((horario_inicial.value.length == 0 || local.value.length == 0))
                atualizaDescricao(descricao_tarefa, horario_inicial,horario_final, local)
            
            let event_targets = [horario_inicial,local,processo_dependente]

            event_targets.forEach(element => {
                if (element !== null)
                    element.addEventListener(element == horario_inicial ? 'blur':'input', () => {
                        atualizaDescricao(descricao_tarefa, horario_inicial, horario_final, local)
                    })
            })

            let contactdiv = document.querySelector("#contactdiv")
            if (contactdiv != null) {
                contactdiv.parentNode.removeChild(contactdiv)
            }
            if ((option_li.children[index].children[0].children[0].innerText.toUpperCase() == "CONTATAR CLIENTE" || option_li.children[index].children[0].children[0].innerText.toUpperCase() == "LEMBRAR CLIENTE") && (cliente.processo.estado != "DF" || cliente.processo.estado != "GO")) {
                validaExecutorContatar()
            }

            submitAtualizarTarefa(descricao_tarefa)
            if (cliente.compromisso.tarefa_restante <= 1) {
                desmarcarCaixaTarefaSequencia()
            }
        })
    }
    selectTipoIntimacao(select_tipo_intimacao,option_li)
}

function contarTarefas() {
    let contagem
    let compromisso = cliente.compromisso.tipo_compromisso
    let cont_dois = ["EMENDAR","DADOS PERÍCIA SOCIAL","DADOS COMPLEMENTARES","ALVARÁ","RPV","PRECATÓRIO"]
    let cont_tres = "PERÍCIA"
    let cont_quatro = ["AUDIÊNCIA DE CONCILIAÇÃO","AUDIÊNCIA INAUGURAL", "AUDIÊNCIA CONCILIATÓRIA", "AUDIÊNCIA INICIAL", "AUDIÊNCIA DE INTERROGATÓRIO"]
    let cont_cinco = ["AUDIÊNCIA DE INSTRUÇÃO", "AUDIÊNCIA DE INSTRUÇÃO E JULGAMENTO", "AUDIÊNCIA UNA"]

    if (cont_dois.includes(compromisso) || cont_dois.includes(cliente.compromisso.tipo_compromisso)){
        contagem = 2
    }
    else
        if (compromisso.search(cont_tres) == 0){
            if (cliente.processo.estado == "DF" || cliente.processo.estado == "GO") {
                if (cliente.compromisso.semanas > 1)
                    contagem = 4
                else
                    contagem = 3
            }
            else {
                if (cliente.compromisso.semanas > 1)
                    contagem = 3
                else
                    contagem = 2
            }
        }
        else {
            if (cont_quatro.includes(compromisso)){
                if (cliente.compromisso.semanas > 1)
                    contagem = 4
                else
                    contagem = 3

            }
            else {
                if (cont_cinco.includes(compromisso)){
                    if (cliente.compromisso.semanas > 1)
                        contagem = 5
                    else
                        contagem = 4
                }
                else
                contagem = 1
            }
        }
    return contagem
}

function separaTitulo(titulo) {
    let tipo_compromisso = titulo.slice(13,titulo.search("\n"))
    let aux = titulo.slice(titulo.search("\n")+1)
    let linha_dois = aux.slice(0,aux.search("\n"))

    let tipo_intimacao = validaTipoIntimacao(tipo_compromisso)
    cliente.compromisso.tipo_compromisso = tipo_compromisso
    let contagem = contarTarefas()
    cliente.compromisso.tarefa_sequencia = contagem
    cliente.compromisso.tarefa_restante = contagem
    cliente.compromisso.prazo_interno = linha_dois.slice(15,25)
    cliente.compromisso.prazo_fatal = linha_dois.slice(49)
    cliente.compromisso.tipo_tarefa = tipo_intimacao
    return cliente
}

function saveInfoTarefas() {
    let titulo = document.querySelector(".alert-info")
    if (cliente.compromisso.atualizar) {
        cliente = separaTitulo(titulo.innerText)
        setCliente(cliente)
    }
}

function focarInputProcesso() {
    let input_processo = document.querySelector("#bsAdvProcessosTexto")
    if (input_processo !== null) {
        input_processo.value = ""
        input_processo.focus()
    }
}

function extrairIDRequisicaoClienteHtml (response) {
    const btnVer = response.documentElement.querySelector("body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div.table-responsive > table > tbody > tr > td.fdt-acao > div > div > a:nth-child(1)")
    let id = btnVer.href.slice(btnVer.href.search("idPK=")+5)
    cliente.processo.id_demais_envolvidos.push(id)
}

function extrairDadosRequisicaoClienteHtml(response,gravarBtn) {

    let fichas = response.documentElement.querySelectorAll("body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div.fdt-ficha")
    let dadosPrincipais = fichas[0].innerText.split('\n')
    let localizacao = fichas[3].innerText.split('\n')
    dadosPrincipais.forEach(e => {
        if (e.search("Parceiro:") > -1) {
            cliente.cliente.parceiro = e.slice(e.search("Parceiro:")+10).toUpperCase()
        }
        if (e.search("Local atendido:") > -1)
            cliente.cliente.local_atendido = e.slice(e.search("Local atendido:")+16).toUpperCase()
    })

    localizacao.forEach(e => {
        if (e.search("Cidade:") > -1) {
            cliente.cliente.cidade = e.slice(e.search("Cidade:")+8).toUpperCase()
        }
        if (e.search("Estado:") > -1)
            cliente.cliente.estado = e.slice(e.search("Estado:")+8).toUpperCase()
    })
    cliente.processo.cpf_demais_envolvidos.forEach(e => {
        ajax(3,link_cliente_ajax,e,gravarBtn)
    })
}

function extrairDadosRequisicaoProcessoHtml(response,gravarBtn) {
    let spanColetivo = response.documentElement.querySelector("body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div:nth-child(2) > div.col-sm-12 > span")
    let fichas = response.documentElement.querySelectorAll("body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div.fdt-ficha")
    let dadosObrigatorios = fichas[0].innerText.split('\n')

    let dadosPrincipais = () => {
        let achou = false
        for (let index = 0; index < fichas[2].children.length; index++) {
            if (fichas[2].children[index].innerText.search("Data da distribuição:") > -1)
                achou = true
        }

        if (achou)
            return fichas[2].innerText.split('\n')
        else
            return fichas[3].innerText.split('\n')
    }
    
    dadosObrigatorios.forEach(e => {
        if (e.search(" AÇÃO COLETIVA") > -1)
            cliente.processo.coletivo = true
        if (e.search("Cliente:") > -1) {
            let array = e.slice(e.search("Cliente:")+9).split("(")
            cliente.cliente.nome = array[0].toUpperCase()
            cliente.cliente.cpf = "(" + array[1]
        }
        if (e.search("Número:") > -1)
            cliente.processo.origem = e.slice(e.search("Número:")+8).toUpperCase()
        if (e.search("Nome do réu:") > -1)
            cliente.processo.reu = e.slice(e.search("Nome do réu:")+13).toUpperCase()
        if (e.search("Responsável pelo processo:") > -1)
            cliente.processo.responsavel = e.slice(e.search("Responsável pelo processo:")+27).toUpperCase()
    })

    dadosPrincipais().forEach(e => {
        if (e.search("Natureza da ação:") > -1)
            cliente.processo.natureza = e.slice(e.search("Natureza da ação:")+18).toUpperCase()
        if (e.search("Mérito da causa:") > -1)
            cliente.processo.merito = e.slice(e.search("Mérito da causa:")+17).toUpperCase()
        if (e.search("Cidade:") > -1)
            cliente.processo.cidade = e.slice(e.search("Cidade:")+8).toUpperCase()
        if (e.search("Estado:") > -1)
            cliente.processo.estado = e.slice(e.search("Estado:")+8).toUpperCase()
        if (e.search("Vara / Turma:") > -1)
            cliente.processo.vara = e.slice(e.search("Vara / Turma:")+14).toUpperCase()
    })
    
    let demaisEnvolvidos = response.documentElement.querySelector("body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div:nth-child(4)")
    let clientes = []
    let cpfs = []
    let id

    let a = response.documentElement.querySelectorAll("a.fdt-icon")

    a.forEach(e => {
        if (e.title == "Ficha do cliente") {
            id = e.href.slice(e.href.search("idPK=")+5,e.href.search("&idPRorg="))
            cliente.cliente.id = id
        }
    })

    /* if (spanColetivo != null)
        if (spanColetivo.innerText == " AÇÃO COLETIVA") {
            cliente.processo.coletivo = true
            if (demaisEnvolvidos.innerText != 'Ainda não há outros envolvidos.') {
                clientes = response.documentElement.querySelector("body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div:nth-child(4)").children
                for (let index = 0; index < clientes.length; index++) {
                    cpfs.push(clientes[index].children[0].children[0].innerText.replaceAll("(","").replace(")","").replaceAll(" ",""))
                }
                cliente.processo.cpf_demais_envolvidos = cpfs
            }
        } */
    ajax(2,link_cliente_ajax,cliente.cliente.id,gravarBtn)
}

async function ajax (opt,link,id,gravarBtn) {

    let httpRequest

    if (opt == 3)
        makeRequest("http://fabioribeiro.eastus.cloudapp.azure.com/adv/clientes/default.asp")
    else
        makeRequest(`${link}${id}`)

    function makeRequest(url) {
      if (window.XMLHttpRequest) {
        httpRequest = new XMLHttpRequest()
        } else if (window.ActiveXObject) {
            try {
            httpRequest = new ActiveXObject("Msxml2.XMLHTTP")
            }
            catch (e) {
            try {
                httpRequest = new ActiveXObject("Microsoft.XMLHTTP")
            }
            catch (e) {}
            }
        }
    
        if (!httpRequest) {
            alert('Giving up :( Cannot create an XMLHTTP instance')
            return false
        }
        httpRequest.onreadystatechange = alertContents;
        if (opt != 3) {
            httpRequest.open('GET', url)
            httpRequest.send()
        }
        else {
            httpRequest.open('POST', url)
            httpRequest.setRequestHeader('Content-Type','application/x-www-form-urlencoded')
            httpRequest.send(`bsAdvClientes=s&org=&idPR=&idCR=&idCP=&bsAdvClientesProspect=&bsAdvClientesTexto=&bsAdvClientesCPF=${id}&bsAdvClientesCNPJ=&bsAdvClientesGrupo=&bsAdvClientesSituacao=&bsAdvClientesEstado=&bsAdvClientesCidade=&bsAdvClientesNaturalUF=&bsAdvClientesNaturalCidade=&bsAdvClientesFornecedor=&bsAdvClientesLocalAtendido=&bsAdvClientesNascimentoDataDe=&bsAdvClientesNascimentoDataAte=&bsAdvClientesDataDe=&bsAdvClientesDataAte=&bsAdvClientesIncluidoPor=&bsAdvClientesProcessosStatus=&bsAdvClientesAtualizacaoDe=&bsAdvClientesAtualizacaoAte=&bsAdvClientesAtualizacaoCampo=&bsAdvClientesProcessosDataDe=&bsAdvClientesProcessosDataAte=&bsAdvClientesProcessosNatureza=&bsAdvClientesProcessosMerito=&bsAdvClientesProcessosSentenca=&bsAdvClientesINSSDe=&bsAdvClientesINSSAte=&bsAdvClientesINSSResponsavel=&bsAdvClientesINSSResultado=&bsAdvResponsavelPendencia=&bsAdvComoChegou=&filtrar=Filtrar`)
        }
    }
    
        function alertContents() {
        if (httpRequest.readyState === 4) {
            if (httpRequest.status === 200) {
                let parser = new DOMParser()
                let doc = parser.parseFromString(httpRequest.responseText,'text/html')
                if (opt == 1) {
                    extrairDadosRequisicaoProcessoHtml(doc,gravarBtn)
                }
                else {
                    if (opt == 2)
                        extrairDadosRequisicaoClienteHtml(doc,gravarBtn)
                    else
                        extrairIDRequisicaoClienteHtml(doc)
                }
                setCliente(cliente)
                gravarBtn.removeAttribute('disabled')
            } else {
                console.log('There was a problem with the request.')
            }
        }
    }
}

function formataData (dia,mes,ano) {
    if (mes < 10)
        mes = `0${mes}`
    if (dia < 10)
        dia = `0${dia}`
    return `${dia}/${mes}/${ano}`
}

function isFeriado (date,parametro) {
    let feriado = false
    let feriados = calculaFeriados(parametro)
    let ehFeriado

    for (let index = 0; index < feriados.length; index++) {
        ehFeriado = feriados[index].toDateString() == date.toDateString()
        if (ehFeriado) {
            feriado = true
            break
        }
    }

    return feriado
}

function calcularPrazo (prazo,parametro) {
    let dateFinal = new Date()
    let dateInicial = new Date()
    let cont = 1
    let i
    let dataPub = document.querySelector("#dataPublicacao")
    let tipoIntimacao = document.querySelector("#descricao")
    let processo = document.querySelector('#numeroProcesso')

    let diasInterno
    const diasFatal = Number(prazo)

    if (processo.value.length == 12) {
        if (dataPub.value.length > 0) {
            let data = dataPub.value.split('/')
            dateFinal = new Date(data[2],Number(data[1])-1,Number(data[0]))
            dateInicial = new Date(data[2],Number(data[1])-1,Number(data[0]))
        }
        if (dateInicial.getDay() == 6) {
            dateFinal.setDate(dateFinal.getDate()+2)
            dateInicial.setDate(dateInicial.getDate()+2)
        }
    }

    while (diasFatal >= cont) {
        dateFinal.setDate(dateFinal.getDate() + 1)
        i = dateFinal.getDay()

        if (i > 0 && i < 6 && !isFeriado(dateFinal,parametro)) {
            cont = cont + 1
        }
    }
    let ano = dateFinal.getFullYear()
    let mes = dateFinal.getMonth()+1
    let dia =  dateFinal.getDate()
    let final = formataData(dia, mes, ano)
    const StringTipoIntimacao = removeAcentuacaoString(tipoIntimacao.value).toUpperCase()
    const ehSentencaAcordaoDecisao = (StringTipoIntimacao.search("SENTENCA") == 0 || StringTipoIntimacao.search("DECISAO") == 0 || StringTipoIntimacao.search("ACORDAO") == 0)

    
    if (ehSentencaAcordaoDecisao) {
        if (processo.value.length == 12) {
            diasInterno = 3
        }
        else {
            if (diasFatal == 5)
                diasInterno = 2
            else
                diasInterno = 5
        }
    }
    else {
        if ((diasFatal == 5) && (processo.value.length == 12)) {
            diasInterno = 3
        }
        else {
            diasInterno = diasFatal-3
        }
    }
    
    cont = 1
    let condiction
    const ehBarril = ((cliente.processo.estado == 'GO') || (cliente.processo.estado == 'DF'))

    if (ehBarril && !ehSentencaAcordaoDecisao) {
        dateInicial = new Date (dateFinal.getFullYear(), dateFinal.getMonth(), dateFinal.getDate()-1)
        while (cont <= 3) {
            console.log(dateInicial)
            i = dateInicial.getDay()
            condiction = isFeriado(dateInicial,parametro)
            
            if (condiction) {
                dateInicial.setDate(dateInicial.getDate() - 1)
            } else {
                if (cont == 3) {
                    if ((i == 6) || (i == 0)) {
                        if (i == 0) {
                            dateInicial.setDate(dateInicial.getDate() - 2)
                        }
                        if (i == 6) {
                            dateInicial.setDate(dateInicial.getDate() - 1)
                        }
                    }
                    break
                } else {
                    dateInicial.setDate(dateInicial.getDate() - 1)
                    cont++
                }
            }
        }
    } else {
        while (diasInterno >= cont) {
            dateInicial.setDate(dateInicial.getDate() + 1)
            i = dateInicial.getDay()
            condiction = isFeriado(dateInicial,parametro)
            
            if (diasInterno >= cont) {
                if (i > 0 && i < 6 && !condiction) {
                    cont = cont + 1
                }
            }
            else {
                if (condiction && i > 0 && i < 6) {
                    dateInicial.setDate(dateInicial.getDate() - 1)
                    cont = cont + 1
                }
                else
                    if (i > 0 && i < 6)
                        cont = cont + 1
            }
        }
    }

    ano = dateInicial.getFullYear()
    mes = dateInicial.getMonth()+1
    dia = dateInicial.getDate()
    let inicial = formataData(dia, mes, ano)

    return [inicial,final]
}

function createButtonPrazo() {
    let data_pub = document.querySelector('#dataPublicacao')
    let prazoInicial = document.querySelector("#dataPrazoInterno")
    let prazoFinal = document.querySelector("#dataPrazoFatal")
    let div_data_publicacao = document.querySelector('#fdt-form > div:nth-child(7) > div:nth-child(2)')
    let div_auxiliar = document.createElement('div')
    let div_cinco = document.createElement('div')
    let div_dez = document.createElement('div')
    let div_quinze = document.createElement('div')
    let button_cinco = document.createElement('input')
    let button_dez = document.createElement('input')
    let button_quinze = document.createElement('input')
    let p_cinco = document.createElement('p')
    let p_dez = document.createElement('p')
    let p_quinze = document.createElement('p')
    
    button_cinco.setAttribute('id','button5')
    button_dez.setAttribute('id','button10')
    button_quinze.setAttribute('id','button15')
    p_cinco.setAttribute('id','prazo5')
    p_dez.setAttribute('id','prazo10')
    p_quinze.setAttribute('id','prazo15')
    button_cinco.setAttribute('class','btnPrazo')
    button_cinco.setAttribute('value','05')
    button_cinco.setAttribute('type','button')
    button_dez.setAttribute('class','btnPrazo')
    button_dez.setAttribute('value','10')
    button_dez.setAttribute('type','button')
    button_quinze.setAttribute('class','btnPrazo')
    button_quinze.setAttribute('value','15')
    button_quinze.setAttribute('type','button')
    div_data_publicacao.appendChild(div_auxiliar)
    div_auxiliar.appendChild(div_cinco)
    div_auxiliar.appendChild(div_dez)
    div_auxiliar.appendChild(div_quinze)
    div_cinco.appendChild(button_cinco)
    div_cinco.appendChild(p_cinco)
    div_dez.appendChild(button_dez)
    div_dez.appendChild(p_dez)
    div_quinze.appendChild(button_quinze)
    div_quinze.appendChild(p_quinze)
    div_data_publicacao.style.position = 'relative'
    div_auxiliar.style.position = 'absolute'
    div_auxiliar.style.display = 'flex'
    div_auxiliar.style.flexDirection = 'column'
    div_auxiliar.style.top = '-52px'
    div_auxiliar.style.right = '-150px'
    p_cinco.style.color = 'gray'
    p_dez.style.color = 'gray'
    p_quinze.style.color = 'gray'
    p_cinco.innerHTML = `5 DIAS`
    p_dez.innerHTML = `10 DIAS`
    p_quinze.innerHTML = `15 DIAS`
    div_cinco.style.display = 'flex'
    div_cinco.style.flexDirection = 'row'
    div_cinco.style.alignItems = 'center'
    div_dez.style.display = 'flex'
    div_dez.style.flexDirection = 'row'
    div_dez.style.alignItems = 'center'
    div_quinze.style.display = 'flex'
    div_quinze.style.flexDirection = 'row'
    div_quinze.style.alignItems = 'center'

    data_pub.addEventListener('blur', () => {
        const prazo_cinco = calcularPrazo(button_cinco.value,2)
        const prazo_dez = calcularPrazo(button_dez.value,2)
        const prazo_quinze = calcularPrazo(button_quinze.value,2)
        p_cinco.innerHTML = `${prazo_cinco[0].slice(0,5)} - ${prazo_cinco[1].slice(0,5)}`
        p_dez.innerHTML = `${prazo_dez[0].slice(0,5)} - ${prazo_dez[1].slice(0,5)}`
        p_quinze.innerHTML = `${prazo_quinze[0].slice(0,5)} - ${prazo_quinze[1].slice(0,5)}`
    })
    
    let btn = document.querySelectorAll('.btnPrazo')

    btn.forEach(e => {
        e.addEventListener('click', event => {
                let prazos = calcularPrazo(Number(event.target.value),2)
                prazoInicial.value = prazos[0]
                prazoFinal.value =  prazos[1]
        })
        e.style.padding = '15px'
        e.style.borderRadius = '5px'
        e.style.margin = '5px'
        e.style.background = 'rgb(77, 72, 72)'
        e.style.color = 'white'
        e.style.border = '1px solid #ccc'
    })
}

function setValidacaoFunctionOff () {
    let edit_compromisso_btn = document.querySelector('body > section > section > div.fdt-espaco > div > div:nth-child(2) > a:nth-child(2)')
    let add_tarefa_btn = document.querySelector('body > section > section > div.fdt-espaco > div > div:nth-child(2) > a:nth-child(3)')
    let add_tarefa_avulsa_btn = document.querySelector('body > section > section > div.fdt-espaco > div > div.fdt-pg-header > a:nth-child(1)')
    let add_tarefa_cliente_btn = document.querySelector('body > section > section > div.fdt-espaco > div > div.fdt-pg-header > a:nth-child(2)')
    let btn_tarefa_cliente_pesq = document.querySelector("body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div.table-responsive > table > tbody > tr > td:nth-child(2) > a")
    
    if (edit_compromisso_btn != null)
        edit_compromisso_btn.addEventListener('click', () => {
            setAutoComplete(false)
        })
    if (add_tarefa_btn != null)
        add_tarefa_btn.addEventListener('click', () => {
            setAutoComplete(false)
        })
    if (add_tarefa_avulsa_btn != null)
        add_tarefa_avulsa_btn.addEventListener('click', () => {
            setAutoComplete(false)
        })
    if (add_tarefa_cliente_btn != null)
        add_tarefa_cliente_btn.addEventListener('click', () => {
            setAutoComplete(false)
        })
    if (btn_tarefa_cliente_pesq != null)
        btn_tarefa_cliente_pesq.addEventListener('click', () => {
            setAutoComplete(false)
        })
}

function setValidacaoFunctionOn() {
    let add_compromisso_btn = document.querySelector('body > section > section > div.fdt-espaco > div > div.fdt-pg-header > a:nth-child(3) > i')
    if (add_compromisso_btn != null)
        add_compromisso_btn.addEventListener('click', async () => {
            await setAutoComplete(true)
        })
}

function createButtonRolagem () {
    let arrow = document.createElement('input')
    arrow.setAttribute('type','button')
    arrow.value = 'DOWN'
    document.body.after(arrow)
    arrow.style.position = 'fixed'
    arrow.style.top = '0'
    arrow.style.right = '0'
    arrow.style.margin = '8em'
    arrow.style.background = 'dimgray'
    arrow.style.padding = '30px'
    arrow.style.width = '10em'
    arrow.style.height = '10em'
    arrow.style.borderRadius = '1em'
    arrow.style.MozBorderRadius = '1em'
    arrow.style.WebkitBorderRadius = '1em'
    arrow.style.color = 'white'
    arrow.style.fontWeight = 'bold'
    arrow.style.borderStyle = 'none'
    arrow.style.boxShadow = '10px 5px 5px black'
    arrow.addEventListener('click', () => {
        if (arrow.value == 'DOWN') {
            arrow.setAttribute('disabled','')
            window.scroll(0, document.documentElement.scrollHeight)
            arrow.value = 'UP'
            arrow.removeAttribute('disabled')
        }
        else {
            window.scroll(0,0)
            arrow.value = 'DOWN'
        }
    })
}

function removeAcentuacaoString (string) {
    return string.normalize('NFD').replace(/[\u0300-\u036f]/g, "")
}

async function idPage(url) {
    const autoCompletar = await getAutoComplete()
    const pageBuscaProcessos = (url.search(url_processos) > -1)
    const pageTarefas = (url.search(url_tarefas) > -1)
    const pageCompromissos = (url.search(url_compromissos) > -1)
    const pageCadastroProcesso = (url.search(url_processos_cadastro) > -1)
    const pageVisualizacaoAbaCompromissos = (url.search(url_compromisso_default) > -1)
    const pageVisualizacaoCompromisso = (url.search(url_compromisso_ficha) > -1)
    const pageFormularioAddTarefaSemCompromisso = (url.search(url_cliente_addtarefa) > -1)
    const pageVisualizacaoTarefa = (url.search(url_tarefas_ficha) > -1)

    if (pageBuscaProcessos) {
        formataNumProcesso()
        focarInputProcesso()
    }
    else
        if (pageTarefas) {
            if (autoCompletar) {
                cliente = await getCliente()
                if (cliente.compromisso.atualizar)
                    createInputDependente()
                saveInfoTarefas()
                loadInfo()
                console.log(cliente)
            }
        }
        else
            if (pageCompromissos) {
                const data_final =  document.querySelector("#dataPrazoFatal")
                const data_inicial = document.querySelector("#dataPrazoInterno")
                const tipoIntimacao = document.querySelector("#descricao")
                
                data_final.addEventListener('blur', () => {
                    const indiceAudiencia = removeAcentuacaoString(tipoIntimacao.value).search('AUDIENCIA')
                    const indicePericia = removeAcentuacaoString(tipoIntimacao.value).search('PERICIA')
                    const indicePauta = tipoIntimacao.value.search('PAUTA')
                    const ehAudiencia = (indiceAudiencia == 0)
                    const ehPericia = (indicePericia == 0)
                    const ehPauta = (indicePauta == 0)

                    if (ehAudiencia || ehPauta || ehPericia) {
                        data_inicial.value = data_final.value
                    }
                })

                if (autoCompletar) {
                    let gravarBtn = document.querySelector("#fdt-form > div.row.margemCima20 > div > input.btn.fdt-btn-verde")
                    gravarBtn.setAttribute('disabled','')
                    let id = getIdCliente(url)
                    ajax(1,link_processos_ajax,id,gravarBtn)
                    saveInfoCompromissos()
                    setCliente(cliente)
                    createButtonPrazo()
                }
            }
            else 
                if (pageCadastroProcesso)
                    formataNumProcesso()
                else
                    if (pageVisualizacaoAbaCompromissos) {
                        createButtonRolagem()
                        setValidacaoFunctionOn()
                    }
                    else
                        if (pageVisualizacaoCompromisso || pageFormularioAddTarefaSemCompromisso)
                            setValidacaoFunctionOff()
                        else
                            if (pageVisualizacaoTarefa) {
                                let edit_tarefa_btn = document.querySelectorAll('body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div.table-responsive > table > tbody > tr')
                                if (edit_tarefa_btn != null) {
                                    edit_tarefa_btn.forEach(element => {
                                        let e = element.children[1].children[0].children[1].children[1]
                                        if (e != null) {
                                            e.addEventListener('click',() => {
                                                setAutoComplete(false)
                                            })
                                        }
                                    })
                                }
                            }
}

function getURL() {
    return document.URL
}

async function activate() {
    state.active = await getActive()
    if (!state.active) 
        return
    let url = getURL()
    idPage(url)
}

function updateEvent() {
    enviarResposta()
}

async function run () {
    activate()
    updateEvent()
}

window.onload = run