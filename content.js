
const state = {
    active: null,
    functions: {
        digitacaoVoz: {
            digitarUsandoVoz: null
        },
        abaCadastrodeProcesso: {
            autoFormatNumProcesso: null,
            alteracaoNumeroProcesso: null
        },
        abaPesquisaProcesso: {
            autoFormatacaoNumProcessoPesquisa: null
        },
        abaCompromissosProcesso: {
            mostrarBotadeRolagem: null
        },
        cadastroCompromisso:{
            selecaodoTipodeCompromisso: null,
            mostrarBotoesAuxiliaresdeDias: null,
            AutoPreenchimentoPrazoInterno: null,
        },
        cadastroTarefa:{
            AutoPreenchimentoTarefasIntimacoes: null,
        },
        carregamentoArquivo:{
            seleçãoTipoArquivo: null,
            preenchimentoCamposArquivos: null,
        },
        supervisor: {
            paineldevisualizacaoTarefasTime: null,
        }
    }
}

function getEndereço (local) {
    let locaisAudiencias = {
        "1ª VARA FEDERAL": "AV. DR. CARLOS RODRIGUES DA CRUZ, 1500 - CAPUCHO, ARACAJU - SE, 49081-083",
        "2ª VARA FEDERAL": "AV. DR. CARLOS RODRIGUES DA CRUZ, 1500 - CAPUCHO, ARACAJU - SE, 49081-083",
        "3ª VARA FEDERAL": "AV. DR. CARLOS RODRIGUES DA CRUZ, 1500 - CAPUCHO, ARACAJU - SE, 49081-083",
        "4ª VARA FEDERAL": "AV. DR. CARLOS RODRIGUES DA CRUZ, 1500 - CAPUCHO, ARACAJU - SE, 49081-083",
        "5ª VARA FEDERAL": "PRAÇA CAMERINO, 227 - CENTRO, ARACAJU - SE, 49015-060",
        "6ª VARA FEDERAL": "RUA MARIA SOUZA CARVALHO, 01 - BAIRRO MARIANGA, ITABAIANA/SE - 49500-000",
        "7ª VARA FEDERAL": "PRAÇA ENGENHEIRO JORGE - S/N, ESTÂNCIA - SE, 49200-000",
        "8ª VARA FEDERAL": "PRAÇA RUI MENDES, 21 - CENTRO, LAGARTO - SE, 49400-970",
        "9ª VARA FEDERAL": "AV JOÃO BARBOSA PORTO, Nº. 1600, BAIRRO BELA VISTA, PROPRIÁ/SE (MESMO RECINTO DA VARA DO TRABALHO)",
        "1ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "2ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "3ª VARA CÍVEL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "4ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "5ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "6ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "7ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "8ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "9ª VARA CÍVEL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "10ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "11ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "12ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "13ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "14ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "15ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "17ª VARA CÍVEL DE ARACAJU": "FÓRUM DES. LUIZ C. FONTES - AV. GENTIL TAVARES, 380, GETULIO VARGAS, ARACAJU/SE, 49055-260",
        "18ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "19ª VARA CÍVEL DE ARACAJU": "FÓRUNS INTEGRADOS II - AV. VISCONDE DE MARACAJU, S/N , DEZOITO DO FORTE, ARACAJU/SE, 49070-460",
        "20ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "21ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "22ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "23ª VARA CÍVEL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "24ª VARA CÍVEL DE ARACAJU": "FÓRUNS INTEGRADOS II - AV. VISCONDE DE MARACAJU, S/N , DEZOITO DO FORTE, ARACAJU/SE, 49070-460",
        "25ª VARA CÍVEL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "26ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "27ª VARA CÍVEL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "28ª VARA CÍVEL DE ARACAJU": "FÓRUNS INTEGRADOS IV - RUA ALEXANDRE ALCINO, S/N, SANTA MARIA, ARACAJU/SE, 49044-090",
        "1º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS II - AV. VISCONDE DE MARACAJU, S/N, DEZOITO DO FORTE, ARACAJU/SE, 49070-460",
        "2º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "3º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "4º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "5º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "7º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS IV - RUA ALEXANDRE ALCINO, S/N, SANTA MARIA, ARACAJU/SE, 49044-090",
        "8º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS II - AV. VISCONDE DE MARACAJU, S/N, DEZOITO DO FORTE, ARACAJU/SE, 49070-460",
        "9º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "10º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS III - AV. PAULO HENRIQUE MACHADO PIMENTEL, Nº 170 - (DIA), INÁCIO BARBOSA, ARACAJU/SE, 49040-740",
        "19º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS II - AV. VISCONDE DE MARACAJU, S/N, DEZOITO DO FORTE, ARACAJU/SE, 49070-460",
        "24º JUIZADO ESPECIAL DE ARACAJU": "FÓRUNS INTEGRADOS II - AV. VISCONDE DE MARACAJU, S/N, DEZOITO DO FORTE, ARACAJU/SE, 49070-460",
        "28º JUIZADO ESPECIAL DE ARACAJU": "RUA ALEXANDRE ALCINO, S/N, SANTA MARIA, ARACAJU/SE",
        "1º JUIZADO ESPECIAL DA FAZENDA PÚBLICA DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "2º JUIZADO ESPECIAL DA FAZENDA PÚBLICA DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "JUIZADO ESPECIAL CRIMINAL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "1ª VARA CRIMINAL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. TANCREDO NEVES, S/N, BAIRRO CAPUCHO - 1º PISO, CAPUCHO, ARACAJU/SE, 49081-901",
        "2ª VARA CRIMINAL DE ARACAJU": "CENTRO ADMINISTRATIVO GOVERNADOR AUGUSTO FRANCO, CAPUCHO, ARACAJU/SE, 49081-901",
        "3ª VARA CRIMINAL DE ARACAJU": "CENTRO ADMINISTRATIVO GOVERNADOR AUGUSTO FRANCO, CAPUCHO, ARACAJU/SE, 49081-901",
        "4ª VARA CRIMINAL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "5ª VARA CRIMINAL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "6ª VARA CRIMINAL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "7ª VARA CRIMINAL DE ARACAJU": "FÓRUM OLÍMPIO MENDONÇA - AV. CENTRAL-03, S/N CJ. ORLANDO DANTAS , SÃO CONRADO, ARACAJU/SE, 49092-230",
        "8ª VARA CRIMINAL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "9ª VARA CRIMINAL DE ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "VARA DE ACIDENTES E DELITOS DE TRÂNSITO": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "VARA DE EXECUÇÃO DE MEDIDAS E PENAS ALTERNATIVAS": "FÓRUM OLÍMPIO MENDONÇA - AV. CENTRAL 3, S/N - CONJ. ORLANDO DANTAS, SÃO CONRADO, ARACAJU/SE, 49092-230",
        "JUIZADO DE VIOLÊNCIA DOMÉSTICA E FAMILIAR CONTRA A MULHER": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "CENTRAL PLANTONISTA 1º GRAU - ARACAJU": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "16ª VARA PRIVATIVA DO JUIZADO DA INFÂNCIA E DA JUVENTUDE": "FÓRUM DES. LUIZ C. FONTES - AV. GENTIL TAVARES, 380, GETULIO VARGAS, ARACAJU/SE, 49055-260",
        "1ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 1º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "2ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 1º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "3ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 2º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "4ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 2º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "5ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 3º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "6ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 3º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "7ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 4º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "8ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), 4º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "9ª VARA DO TRABALHO": "FÓRUM DANTAS PRADO (PRÉDIO VERMELHO - CENTRO ADMINISTRATIVO), TÉRREO - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO,ARACAJU/SE",
        "CEJUSC": "FÓRUM GUMERSINDO BESSA - AV. PRES. TANCREDO NEVES, S/N - CAPUCHO, ARACAJU - SE, 49081-901",
        "CEJUSC TRABALHISTA": "PRÉDIO ESPELHADO - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO, ARACAJU/SE, CEP 49080-190",
        "GABINETE DA PRESIDÊNCIA": "EDIFÍCIO SEDE (PRÉDIO AMARELO - CENTRO ADMINISTRATIVO AUGUSTO FRANCO), 4º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO, ARACAJU/SE, 49080-190",
        "JAE": "EDIFÍCIO SEDE (PRÉDIO AMARELO - CENTRO ADMINISTRATIVO AUGUSTO FRANCO), 4º ANDAR - AV. CARLOS RODRIGUES DA CRUZ, S/N, CAPUCHO, ARACAJU/SE, 49080-190",
	"VARA DO TRABALHO DE ESTÂNCIA": "VARA DO TRABALHO DE ESTÂNCIA - PRAÇA CORONEL GONÇALO PRADO, S/N CEP 49200-000, SANTA CRUZ ESTÂNCIA/SE",
        "1ª VARA CÍVEL DE SOCORRO": "FÓRUM DES. ARTUR OSCAR DE O. DÉDA - RUA MANOEL PASSOS, FÓRUM ARTHUR OCAR DE O. DEDA, CENTRO, N. SRA. DO SOCORRO/SE, 49160-000",
        "2ª VARA CÍVEL DE SOCORRO": "FÓRUM DES. ARTUR OSCAR DE O. DÉDA - RUA MANOEL PASSOS, FÓRUM ARTHUR OCAR DE O. DEDA, CENTRO, N. SRA. DO SOCORRO/SE, 49160-000",
        "3ª VARA CÍVEL DE SOCORRO": "FÓRUM DES. PEDRO B. DE ANDRADE - AV. COLETORA C, S/N, FÓRUM DES. PEDRO BARRETO, MARCOS FREIRE II, N. SRA. DO SOCORRO/SE, 49160-000",
        "4ª VARA CÍVEL DE SOCORRO": "FÓRUM BEL. LUIZ AUGUSTO BARRETO - RODOVIA BR 101, S/N, KM 92.5,PARQUE DOS FARÓIS, N. SRA. DO SOCORRO/SE, 49160-000",
        "1ª VARA CRIMINAL DE SOCORRO": "FÓRUM BEL. LUIZ AUGUSTO BARRETO - RODOVIA BR 101, S/N, KM 92.5,PARQUE DOS FARÓIS, N. SRA. DO SOCORRO/SE, 49160-000",
        "2ª VARA CRIMINAL DE SOCORRO": "FÓRUM BEL. LUIZ AUGUSTO BARRETO - RODOVIA BR 101, S/N, KM 92.5,PARQUE DOS FARÓIS, N. SRA. DO SOCORRO/SE, 49160-000",
        "3ª VARA CRIMINAL DE SOCORRO": "FÓRUM BEL. LUIZ AUGUSTO BARRETO - RODOVIA BR 101, S/N, KM 92.5,PARQUE DOS FARÓIS, N. SRA. DO SOCORRO/SE, 49160-000",
        "1º JUIZADO ESPECIAL CÍVEL E CRIMINAL DE NOSSA SRA DO SOCORRO": "FÓRUM DES. PEDRO B. DE ANDRADE - AV. COLETORA C, S/N, FÓRUM DES. PEDRO BARRETO, MARCOS FREIRE II, N. SRA. DO SOCORRO/SE, 49160-000",
        "2º JUIZADO ESPECIAL CÍVEL E CRIMINAL DE NOSSA SRA DO SOCORRO": "FÓRUM DES. ARTUR OSCAR DE O. DÉDA - RUA MANOEL PASSOS, FÓRUM ARTHUR OCAR DE O. DEDA, CENTRO, N. SRA. DO SOCORRO/SE, 49160-000",
        "AQUIDABÃ": "FÓRUM DE AQUIDABÃ - RUA EDUARDO CHAVES, Nº 93, CENTRO, AQUIDABÃ/SE, 49790-000",
        "GRACCHO CARDOSO": "FÓRUM DE GRACCHO CARDOSO - RUA EDUARDO CHAVES, Nº 93, CENTRO, AQUIDABÃ/SE, 49790-000",
        "MURIBECA": "FÓRUM DE MURIBECA - RUA EDUARDO CHAVES, CENTRO, AQUIDABÃ/SE, 49790-000",
        "ARAUÁ": "FÓRUM DE ARAUÁ - RUA JOAQUIM COSTA NASCIMENTO S/N, CENTRO, ARAUA/SE, 49220-000",
        "PEDRINHAS": "FÓRUM DE PEDRINHAS - RODOVIA BOQUIM-PEDRINHAS, S/N, BUENOS AIRES, PEDRINHAS/SE, 49350-000",
        "1ª VARA CÍVEL E CRIMINAL DA BARRA DOS COQUEIROS": "FÓRUM DA BARRA DOS COQUEIROS - RODOVIA EDILSON TÁVORA, SN, CENTRO, BARRA DOS COQUEIROS/SE, 49140-000",
        "2ª VARA CÍVEL E CRIMINAL DA BARRA DOS COQUEIROS": "FÓRUM DA BARRA DOS COQUEIROS - RODOVIA EDILSON TÁVORA, SN, CENTRO, BARRA DOS COQUEIROS/SE, 49140-000",
        "CEJUS BARRA DOS COQUEIROS": "FÓRUM DA BARRA DOS COQUEIROS - RODOVIA EDILSON TÁVORA, SN, CENTRO, BARRA DOS COQUEIROS/SE, 49140-000",
        "BOQUIM": "FÓRUM DE BOQUIM: PQ. CITRÍCOLA GOV. JOÃO ALVES FILHO, S/Nº, CENTRO, BOQUIM/SE, 49360-000",
        "CAMPO DO BRITO": "FÓRUM DE CAMPO DO BRITO - RUA GABRIEL DE LIMA, S/N, CENTRO, CAMPO DO BRITO/SE, 49520-000",
        "CEJUSC CAMPO DO BRITO": "FÓRUM DE CAMPO DO BRITO - RUA GABRIEL DE LIMA, S/N, CENTRO, CAMPO DO BRITO/SE, 49520-000",
        "MACAMBIRA": "FÓRUM DE CAMPO DO BRITO - RUA GABRIEL DE LIMA, S/N, CENTRO, CAMPO DO BRITO/SE, 49520-000",
        "SÃO DOMINGOS": "FÓRUM DE SÃO DOMINGOS - RUA JOSÉ JUNIOR FILHO S/N, CENTRO, SÃO DOMINGOS/SE, 49525-000",
        "CANINDÉ DE SÃO FRANCISCO": "FÓRUM DE CANINDÉ DE SÃO FRANCISCO - PRAÇA PADRE CICERO, S/N, CENTRO, CANINDÉ DE SÃO FRANCISCO/SE, 49820-000",
        "CAPELA": "FÓRUM DE CAPELA - RODOVIA MANOEL DANTAS, S/Nº, CENTRO, CAPELA/SE, 49700-000",
        "CARIRA": "FÓRUM DE CARIRA - AV. AROALDO CHAGAS, S/N, CENTRO, CARIRA/SE, 49550-000",
        "CARMÓPOLIS": "FÓRUM DE CARMÓPOLIS - RUA JOSÉ AMADO ALVES, 420, TRAPIÁ I, CARMÓPOLIS/SE, 49740-000",
        "CEJUSC CARMÓPOLIS": "FÓRUM DE CARMÓPOLIS - RUA JOSÉ AMADO ALVES, 420, TRAPIÁ I, CARMÓPOLIS/SE, 49740-000",
        "GENERAL MAYNARD": "FÓRUM DE CARMÓPOLIS - RUA JOSÉ AMADO ALVES, 420, TRAPIÁ I, CARMÓPOLIS/SE, 49740-000",
        "ROSÁRIO DO CATETE": "FÓRUM DE CARMÓPOLIS - RUA JOSÉ AMADO ALVES, 420, TRAPIÁ I, CARMÓPOLIS/SE, 49740-000",
        "CEDRO DE SÃO JOÃO": "FÓRUM DE CEDRO DE SÃO JOÃO - RUA ANTÔNIO BATISTA, Nº105, CENTRO, CEDRO DE SÃO JOÃO/SE, 49930-000",
        "CEJUSC CEDRO DE SÃO JOÃO": "FÓRUM DE CEDRO DE SÃO JOÃO - RUA ANTÔNIO BATISTA, Nº105, CENTRO, CEDRO DE SÃO JOÃO/SE, 49930-000",
        "AMPARO DO SÃO FRANCISCO": "FÓRUM DE CEDRO DE SÃO JOÃO - RUA ANTÔNIO BATISTA, Nº105, CENTRO, CEDRO DE SÃO JOÃO/SE, 49930-000",
        "MALHADA DOS BOIS": "FÓRUM DE CEDRO DE SÃO JOÃO - RUA ANTÔNIO BATISTA, Nº105, CENTRO, CEDRO DE SÃO JOÃO/SE, 49930-000",
        "SÃO FRANCISCO": "FÓRUM DE CEDRO DE SÃO JOÃO - RUA ANTÔNIO BATISTA, Nº105, CENTRO, CEDRO DE SÃO JOÃO/SE, 49930-000",
        "TELHA": "FÓRUM DE CEDRO DE SÃO JOÃO - RUA ANTÔNIO BATISTA, Nº105, CENTRO, CEDRO DE SÃO JOÃO/SE, 49930-000",
        "CRISTINÁPOLIS": "FÓRUM DE CRISTINÁPOLIS - PRAÇA DA BANDEIRA, Nº 245, CENTRO, CRISTINÁPOLIS/SE, 49270-000",
        "TOMAR DO GERU": "FÓRUM DE CRISTINÁPOLIS - PRAÇA DA BANDEIRA, Nº 245, CENTRO, CRISTINÁPOLIS/SE, 49270-000",
        "1ª VARA CIVEL DE ESTÂNCIA": "FÓRUM MINISTRO HEITOR DE SOUZA - AV. TENENTE ELOY, Nº 470, CENTRO, ESTÂNCIA/SE, 49200-000",
        "2ª VARA CIVEL DE ESTÂNCIA": "FÓRUM MINISTRO HEITOR DE SOUZA - AV. TENENTE ELOY, Nº 470, CENTRO, ESTÂNCIA/SE, 49200-000",
        "CEJUSC DE ESTÂNCIA": "FÓRUM MINISTRO HEITOR DE SOUZA - AV. TENENTE ELOY, Nº 470, CENTRO, ESTÂNCIA/SE, 49200-000",
        "VARA CRIMINAL DE ESTÂNCIA": "FÓRUM MINISTRO HEITOR DE SOUZA - AV. TENENTE ELOY, Nº 470, CENTRO, ESTÂNCIA/SE, 49200-000",
        "JUIZADO ESPECIAL CÍVEL E CRIMINAL DE ESTÂNCIA": "FÓRUM MINISTRO HEITOR DE SOUZA - AV. TENENTE ELOY, Nº 470, CENTRO, ESTÂNCIA/SE, 49200-000",
        "NUSESP - 3º NÚCLEO": "FÓRUM MINISTRO HEITOR DE SOUZA - AV. TENENTE ELOY, Nº 470, CENTRO, ESTÂNCIA/SE, 49200-000",
        "FREI PAULO": "FÓRUM DE FREI PAULO - TRAVESSA CORONEL CASSIMIRO, 79, CENTRO, FREI PAULO/SE, 49514-000",
        "PEDRA MOLE": "FÓRUM DE FREI PAULO - TRAVESSA CORONEL CASSIMIRO, 79, CENTRO, FREI PAULO/SE, 49514-000",
        "PINHÃO": "FÓRUM DE FREI PAULO - TRAVESSA CORONEL CASSIMIRO, 79, CENTRO, FREI PAULO/SE, 49514-000",
        "GARARU": "FÓRUM DE GARARU - AVENIDA PRESIDENTE COSTA E SILVA,S/N, CENTRO, GARARU/SE, 49830-000",
        "CANHOBA": "FÓRUM DE GARARU - AVENIDA PRESIDENTE COSTA E SILVA,S/N, CENTRO, GARARU/SE, 49830-000",
        "ITABI": "FÓRUM DE GARARU - AVENIDA PRESIDENTE COSTA E SILVA,S/N, CENTRO, GARARU/SE, 49830-000",
        "NOSSA SENHORA DE LOURDES": "FÓRUM DE GARARU - AVENIDA PRESIDENTE COSTA E SILVA,S/N, CENTRO, GARARU/SE, 49830-000",
        "INDIAROBA": "FÓRUM DE INDIAROBA - PRAÇA JOÃO ALVES FILHO, 87, CENTRO, INDIAROBA/SE",
        "SANTA LUZIA DO ITANHY": "FÓRUM DE INDIAROBA - PRAÇA JOÃO ALVES FILHO, 87, CENTRO, INDIAROBA/SE",
        "CEJUSC SANTA LUZIA DO ITANHY": "FÓRUM DE INDIAROBA - PRAÇA JOÃO ALVES FILHO, 87, CENTRO, INDIAROBA/SE",
        "1ª VARA CIVEL DE ITABAIANA": "FÓRUM MAURÍCIO GRACCHO CARDOSO - AV. DR. LUIZ MAGALHÃES S/N, CENTRO, ITABAIANA/SE, 49503-256",
        "2ª VARA CIVEL DE ITABAIANA": "FÓRUM MAURÍCIO GRACCHO CARDOSO - AV. DR. LUIZ MAGALHÃES S/N, CENTRO, ITABAIANA/SE, 49503-256",
        "CEJUSC ITABAIANA": "FÓRUM MAURÍCIO GRACCHO CARDOSO - AV. DR. LUIZ MAGALHÃES S/N, CENTRO, ITABAIANA/SE, 49503-256",
        "1ª VARA CRIMINAL DE ITABAIANA": "FÓRUM MAURÍCIO GRACCHO CARDOSO - AV. DR. LUIZ MAGALHÃES S/N, CENTRO, ITABAIANA/SE, 49503-256",
        "2ª VARA CRIMINAL DE ITABAIANA": "FÓRUM MAURÍCIO GRACCHO CARDOSO - AV. DR. LUIZ MAGALHÃES S/N, CENTRO, ITABAIANA/SE, 49503-256",
        "JUIZADO ESPECIAL CÍVEL E CRIMINAL DE ITABAIANA": "FÓRUM MAURÍCIO GRACCHO CARDOSO - AV. DR. LUIZ MAGALHÃES S/N, CENTRO, ITABAIANA/SE, 49503-256",
        "ITABAIANINHA": "FÓRUM DE ITABAIANINHA - RUA FRANCISCO SEVERO, Nº 228, CENTRO, ITABAIANINHA/SE, 49290-000",
        "1ª VARA CÍVEL E CRIMINAL DE ITAPORANGA D'AJUDA": "FÓRUM FELISBELO FREIRE - AV. EMÍDIO MAXI NETO, S/N, CENTRO, ITAPORANGA D AJUDA/SE, 49120-000",
        "2ª VARA CÍVEL E CRIMINAL DE ITAPORANGA D'AJUDA": "FÓRUM FELISBELO FREIRE - AV. EMÍDIO MAXI NETO, S/N, CENTRO, ITAPORANGA D AJUDA/SE, 49120-000",
        "CEJUSC ITAPORANGA D'AJUDA": "FÓRUM FELISBELO FREIRE - AV. EMÍDIO MAXI NETO, S/N, CENTRO, ITAPORANGA D AJUDA/SE, 49120-000",
        "SALGADO": "FÓRUM DRA. GICÉLIA DE ATORRES, AV 4 DE OUTUBRO S/N, ESTAÇÃO, SALGADO/SE, 49390-000",
        "JAPARATUBA": "FÓRUM DE JAPARATUBA - RODOVIA LÚCIO PRADO, Nº 40, CENTRO, JAPARATUBA/SE, 49960-000",
        "PIRAMBU": "FÓRUM DE PIRAMBU - RUA MÁRIO TRINDADE CRUZ, S/N, CENTRO, PIRAMBU/SE, 49190-000",
        "1ª VARA CIVEL DE LAGARTO": "FÓRUM DE LAGARTO - ROD. ANTÔNIO MARTINS DE MENEZES, KM 36, S/N, HORTA, LAGARTO/SE, 49400-000",
        "2ª VARA CIVEL DE LAGARTO": "FÓRUM DE LAGARTO - ROD. ANTÔNIO MARTINS DE MENEZES, KM 36, S/N, HORTA, LAGARTO/SE, 49400-000",
        "CEJUSC LAGARTO": "FÓRUM DE LAGARTO - ROD. ANTÔNIO MARTINS DE MENEZES, KM 36, S/N, HORTA, LAGARTO/SE, 49400-000",
        "VARA CRIMINAL DE LAGARTO": "FÓRUM DE LAGARTO - ROD. ANTÔNIO MARTINS DE MENEZES, KM 36, S/N, HORTA, LAGARTO/SE, 49400-000",
        "JUIZADO ESPECIAL CÍVEL E CRIMINAL DE LAGARTO": "FÓRUM DE LAGARTO - ROD. ANTÔNIO MARTINS DE MENEZES, KM 36, S/N, HORTA, LAGARTO/SE, 49400-000",
        "NUSESP - 4º NÚCLEO": "FÓRUM DES. EPAMINONDAS S. DE ANDRADE LIMA - RODOVIA LOURIVAL BATISTA, KM 36, S/Nº, HORTA, LAGARTO/SE, 49400-000",
        "1ª VARA CÍVEL E CRIMINAL DE LARANJEIRAS": "FÓRUM DE LARANJEIRAS - ALAMÊDA IÊDA ROSA,S/N, CONJ. MANOEL DO PRADO FRANCO, LARANJEIRAS/SE, 49170-000",
        "2ª VARA CÍVEL E CRIMINAL DE LARANJEIRAS": "FÓRUM DE LARANJEIRAS - ALAMÊDA IÊDA ROSA,S/N, CONJ. MANOEL DO PRADO FRANCO, LARANJEIRAS/SE, 49170-000",
        "AREIA BRANCA": "FÓRUM DE AREIA BRANCA - LARGO MANOEL DO PRADO FRANCO,S/N, CENTRO, AREIA BRANCA/SE, 49580-000",
        "MALHADOR": "FÓRUM DE MALHADOR - AV. VALTER FRANCO, Nº 1060, CENTRO, MALHADOR/SE, 49570-000",
        "MOITA BONITA": "FÓRUM DE MOITA BONITA - AV. VALTER FRANCO, Nº 1060, CENTRO, MALHADOR/SE, 49570-000",
        "MARUIM": "FÓRUM DE MARUIM - RUA ALVARO GARCEZ, Nº 315, BOA HORA, MARUIM/SE, 49770-000",
        "SANTO AMARO": "FÓRUM DE SANTO AMARO - TRAVESSA CARLOS SIMEÃO, S/N, CENTRO, SANTO AMARO/SE, 49180-000",
        "1ª VARA CÍVEL E CRIMINAL DE NOSSA SENHORA DA GLÓRIA": "FÓRUM DE NOSSA SENHORA DA GLÓRIA - AVENIDA MANOEL ELÍGIO DA MOTA, S/Nº , BRASÍLIA, NOSSA SENHORA DA GLÓRIA/SE, 49680-000",
        "2ª VARA CÍVEL E CRIMINAL DE NOSSA SENHORA DA GLÓRIA": "FÓRUM DE NOSSA SENHORA DA GLÓRIA - AVENIDA MANOEL ELÍGIO DA MOTA, S/Nº , BRASÍLIA, NOSSA SENHORA DA GLÓRIA/SE, 49680-000",
        "FEIRA NOVA": "FÓRUM DE NOSSA SENHORA DA GLÓRIA - AVENIDA MANOEL ELÍGIO DA MOTA, S/Nº , BRASÍLIA, NOSSA SENHORA DA GLÓRIA/SE, 49680-000",
        "MONTE ALEGRE": "FÓRUM DE MONTE ALEGRE DE SERGIPE - PRAÇA PASSOS PORTO, Nº335, MONTEALEGRE@TJSE.JUS.BR, CENTRO, MONTE ALEGRE DE SERGIPE/SE, 49690-000",
        "1ª VARA CÍVEL E CRIMINAL DE NOSSA SENHORA DAS DORES": "FÓRUM DE NOSSA SENHORA DAS DORES - PRAÇA. DES. ALOÍSIO DE ABREU LIMA, Nº 01, CENTRO, NOSSA SENHORA DAS DORES/SE, 49600-000",
        "2ª VARA CÍVEL E CRIMINAL DE NOSSA SENHORA DAS DORES": "FÓRUM DE NOSSA SENHORA DAS DORES - PRAÇA. DES. ALOÍSIO DE ABREU LIMA, Nº 01, CENTRO, NOSSA SENHORA DAS DORES/SE, 49600-000",
        "CUMBE": "FÓRUM DE NOSSA SENHORA DAS DORES - PRAÇA. DES. ALOÍSIO DE ABREU LIMA, Nº 01, CENTRO, NOSSA SENHORA DAS DORES/SE, 49600-000",
        "SIRIRI": "FÓRUM DE NOSSA SENHORA DAS DORES - PRAÇA. DES. ALOÍSIO DE ABREU LIMA, Nº 01, CENTRO, NOSSA SENHORA DAS DORES/SE, 49600-000",
        "1ª VARA CÍVEL E CRIMINAL DE NEÓPOLIS": "FÓRUM DE NEÓPOLIS - PÇA. MONS. JOSÉ MORENO DE SANTANA S/N, CENTRO, NEÓPOLIS/SE, 49980-000",
        "2ª VARA CÍVEL E CRIMINAL DE NEÓPOLIS": "FÓRUM DE NEÓPOLIS - PÇA. MONS. JOSÉ MORENO DE SANTANA S/N, CENTRO, NEÓPOLIS/SE, 49980-000",
        "JAPOATÃ": "FÓRUM JAPOATÃ - RUA GETULIO VARGAS, S/N, CENTRO, JAPOATÃ/SE, 49950-000",
        "SANTANA DO SÃO FRANCISCO": "FÓRUM DE SANTANA DO SÃO FRANCISCO - RUA DAS FLORES, S/N, CENTRO, SANTANA DO SÃO FRANCISCO/SE, 49985-000",
        "BREJO GRANDE": "FÓRUM DESEMBARGADOR ANTÔNIO MACHADO - RUA ALTO DA BOA VISTA, Nº 293, CENTRO, PACATUBA/SE, 49985-000",
        "ILHA DAS FLORES": "FÓRUM DESEMBARGADOR ANTÔNIO MACHADO - RUA ALTO DA BOA VISTA, Nº 293, CENTRO, PACATUBA/SE, 49985-000",
        "PACATUBA": "FÓRUM DESEMBARGADOR ANTÔNIO MACHADO - RUA ALTO DA BOA VISTA, Nº 293, CENTRO, PACATUBA/SE, 49985-000",
        "POÇO REDONDO": "FÓRUM DE POÇO REDONDO - AV. ALCINO ALVES COSTA, Nº 983, CENTRO, POÇO REDONDO/SE, 49810-000",
        "POÇO VERDE": "FÓRUM DE POÇO VERDE - AV. SÃO JOSÉ, S/N, CENTRO, POÇO VERDE/SE, 49490-000",
        "PORTO DA FOLHA": "FÓRUM DE PORTO DA FOLHA - RUA AUGUSTO CÉSAR LEITE, Nº189, CENTRO, PORTO DA FOLHA/SE, 49800-000",
        "1ª VARA CÍVEL E CRIMINAL DE PROPRIÁ": "FÓRUM JUIZ JOÃO FERNANDES DE BRITO - AVENIDA JOÃO BARBOSA PORTO, S/Nº, BELA VISTA, PROPRIÁ/SE - 49900-000",
        "2ª VARA CÍVEL E CRIMINAL DE PROPRIÁ": "FÓRUM JUIZ JOÃO FERNANDES DE BRITO - AVENIDA JOÃO BARBOSA PORTO, S/Nº, BELA VISTA, PROPRIÁ/SE - 49900-000",
        "CEJUSC PROPRIÁ": "FÓRUM JUIZ JOÃO FERNANDES DE BRITO - AV. JOÃO BARBOSA PORTO, S/N, BRASÍLIA, PROPRIÁ/SE - 49900-000",
        "NUSESP - 6º NÚCLEO": "FÓRUM JUIZ JOÃO FERNANDES DE BRITO - AVENIDA JOÃO BARBOSA PORTO, S/Nº, BELA VISTA, PROPRIÁ/SE - 49900-000",
        "RIACHÃO DO DANTAS": "FÓRUM DE RIACHÃO DO DANTAS - ROD. RIACHÃO-LAGARTO, S/N, CENTRO, RIACHÃO DO DANTAS/SE, 49320-000",
        "RIACHUELO": "FÓRUM DE RIACHUELO - RUA SANTA MARIA, S/N, CENTRO, RIACHUELO/SE, 49130-000",
        "DIVINA PASTORA": "FÓRUM DE DIVINA PASTORA - PRACA DA BANDEIRA, S/N, CENTRO, DIVINA PASTORA/SE, 49650-000",
        "SANTA ROSA DE LIMA": "FÓRUM DE SANTA ROSA DE LIMA - RUA SANTA MARIA, S/N, CENTRO, RIACHUELO/SE, 49130-000",
        "RIBEIRÓPOLIS": "FÓRUM DE RIBEIRÓPOLIS - PRAÇA MANOEL DO CARMO DE JESUS, S/N, CENTRO, RIBEIRÓPOLIS/SE, 49530-000",
        "SÃO MIGUEL DO ALEIXO": "FÓRUM DE RIBEIRÓPOLIS - PRAÇA MANOEL DO CARMO DE JESUS, S/N, CENTRO, RIBEIRÓPOLIS/SE, 49530-000",
        "NOSSA SENHORA APARECIDA": "FÓRUM DE RIBEIRÓPOLIS - PRAÇA MANOEL DO CARMO DE JESUS, S/N, CENTRO, RIBEIRÓPOLIS/SE, 49530-000",
        "1ª VARA CÍVEL DE SÃO CRISTÓVÃO": "LARGO JOEL FONTES COSTA, S/N, CENTRO. SÃO CRISTÓVÃO/SE, 49100-000",
        "2ª VARA CÍVEL DE SÃO CRISTÓVÃO": "FÓRUM PROF. GONÇALO ROLLEMBERG LEITE - AV. MARECHAL RONDON, S/N, CAMPUS UNIVERSITÁRIO, ROSA ELZE, SÃO CRISTÓVÃO/SE, 49100-000",
        "VARA CRIMINAL DE SÃO CRISTÓVÃO": "LARGO JOEL FONTES COSTA, S/N, CENTRO, SÃO CRISTÓVÃO/SE, 49100-000",
        "JUIZADO ESPECIAL CÍVEL E CRIMINAL DE SÃO CRISTÓVÃO": "FÓRUM PROF. GONÇALO ROLLEMBERG LEITE - AV. MARECHAL RONDON, S/N, CAMPUS UNIVERSITÁRIO, ROSA ELZE, SÃO CRISTÓVÃO/SE, 49100-000",
        "1ª VARA CÍVEL E CRIMINAL DE SIMÃO DIAS": "FÓRUM DE SIMÃO DIAS - RODOVIA LOURIVAL BAPTISTA - SE 240, Nº 2398, CENTRO, SIMÃO DIAS/SE, 49480-000",
        "2ª VARA CÍVEL E CRIMINAL DE SIMÃO DIAS": "FÓRUM DE SIMÃO DIAS - RODOVIA LOURIVAL BAPTISTA - SE 240, Nº 2398, CENTRO, SIMÃO DIAS/SE, 49480-000",
        "1ª VARA CÍVEL DE TOBIAS BARRETO": "FÓRUM DE TOBIAS BARRETO - AVENIDA JOSÉ DAVI DOS SANTOS, S/N, SANTA RITA, TOBIAS BARRETO/SE, 49300-000",
        "2ª VARA CÍVEL DE TOBIAS BARRETO": "FÓRUM DE TOBIAS BARRETO - AV. JOSÉ DAVI DOS SANTOS, S/N, SANTA RITA, TOBIAS BARRETO/SE, 49300-000",
        "UMBAÚBA": "FÓRUM DE UMBAÚBA - RUA DES. JOSÉ NOLASCO DE CARVALHO, S/N, CENTRO, UMBAÚBA/SE, 49260-000",
        "1ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "2ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "3ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "4ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "5ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "6ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "7ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "8ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "9ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE I - SETOR DE AUTARQUIAS SUL, QUADRA 2, BLOCO G, LOTE 8, CEP: 70070-933, BRASÍLIA – DF",
        "10ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "11ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "12ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "13ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "14ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "15ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "16ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "17ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "18ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "19ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "20ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "21ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "22ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE II - SETOR DE AUTARQUIAS SUL, QUADRA 4, BLOCO D, LOTE 7, CEP: 70070-901, BRASÍLIA – DF",
        "23ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "24ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "25ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "26ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "27ª VARA DE BRASÍLIA": "EDIFÍCIO-SEDE III - W3 NORTE - SEPN 510, BLOCO C, CEP: 70759-900, BRASÍLIA – DF",
        "SUBSEÇÃO JUDICIÁRIA DE ANÁPOLIS - 1ª VARA FEDERAL": "EDIFÍCIO-SEDE - AV. UNIVERSITÁRIA, QD. 02, LT. 05, JARDIM BANDEIRANTES, ANÁPOLIS/GO - CEP: 75083-035",
        "SUBSEÇÃO JUDICIÁRIA DE ANÁPOLIS - 2ª VARA FEDERAL": "EDIFÍCIO-SEDE - AV. UNIVERSITÁRIA, QD. 02, LT. 05, JARDIM BANDEIRANTES, ANÁPOLIS/GO - CEP: 75083-035",
        "SUBSEÇÃO JUDICIÁRIA DE APARECIDA DE GOIÂNIA - JUIZADO ESPECIAL FEDERAL": "EDIFÍCIO GAMA DIAS - AV. REP. LÍBANO ESQ. COM AV. B, QD. D-1, LTS. 21/30, 2º ANDAR, SETOR OESTE, GOIÂNIA/GO - CEP: 74115-030",
        "SUBSEÇÃO JUDICIÁRIA DE FORMOSA": "EDIFÍCIO-SEDE - RUA ITIQUIRA COM RUA LINDOLFO GONÇALVES, Nº 1000, SETOR NORDESTE, FORMOSA/GO - CEP: 73807-145",
        "SUBSEÇÃO JUDICIÁRIA DE ITUMBIARA": "EDIFÍCIO-SEDE - AV. JOÃO PAULO II, Nº 185, BAIRRO ERNESTINA BORGES DE ANDRADE, ITUMBIARA/GO - CEP: 75528-370 (TÉRREO DO EDIFÍCIO DO FÓRUM)",
        "SUBSEÇÃO JUDICIÁRIA DE JATAÍ": "EDIFÍCIO-SEDE - RUA NICOLAU ZAIDEM, Nº 1135, QD. 45, VILA FÁTIMA - CENTRO, JATAÍ/GO - CEP: 75803-055 (ANTIGO FÓRUM DA CIDADE)",
        "SUBSEÇÃO JUDICIÁRIA DE LUZIÂNIA": "EDIFÍCIO-SEDE - RUA DR. JOÃO TEIXEIRA, Nº 596, QD. 73, LT. 21-A, ED. IACI AMARAL, CENTRO, LUZIÂNIA/GO - CEP: 72800-440",
        "SUBSEÇÃO JUDICIÁRIA DE RIO VERDE": "EDIFÍCIO-SEDE - AVENIDA JOSÉ WALTER, Nº 500, QUADRA 49, LOTES 10/11, SETOR MORADA DO SOL, RIO VERDE/GO - CEP: 75908-740",
        "SUBSEÇÃO JUDICIÁRIA DE URUAÇU": "EDIFÍCIO-SEDE - AV. TOCANTINS, Nº 17, QD. 7, LT. 16, CENTRO, URUAÇU/GO - CEP: 76400-000",
	"MOGI DAS CRUZES": "MOGI DAS CRUZES - AVENIDA FERNANDO COSTA, 820 - VILA RUBENS - MOGI DAS CRUZES - SP - CEP: 08735-000",
    }

    if (local.value.length == 0)
        return ""
    else {
        let locais = Object.entries(locaisAudiencias)
        for (const [key,value] of locais) {
            if (removeAcentuacaoString(key) == removeAcentuacaoString(local.value)){
                return `${key}: ${value}`
            }
        }
        return local.value
    }
}


let submit = true
const urlProcessosCadastro = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/processos/formulario"
const urlProcessos = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/processos/default"
const urlCompromissos = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/compromissos/formulario"
const urlCompromissoFicha = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/compromissos/ficha"
const urlCompromissoDefault = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/compromissos/default"
const urlTarefas = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/tarefas/formulario"
const urlTarefasFicha = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/tarefas/default"
const linkProcessosAjax = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/processos/ficha.asp?idPK="
const linkClienteAjax = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/clientes/ficha.asp?idPK="
const urlClienteAddtarefa = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/clientes/default"
const urlUpFile = "http://fabioribeiro.eastus.cloudapp.azure.com//adv/clientesArquivos/formulario.asp"

let cliente = {
        cliente: {
            nome: null,
            cpf: null,
            cidade: null,
            estado: null,
            localAtendido: null,
            parceiro: null,
            id: null
        },
        processo: {
            origem: null,
            dependente: null,
            coletivo: false,
            reu: null,
            responsavel: null,
            natureza: null,
            merito: null,
            cidade: null,
            estado: null,
            vara: null,
            cpfDemaisEnvolvidos: [],
            idDemaisEnvolvidos: []
        },
        compromisso: {
            atualizar: true,
            prazoInterno: null,
            prazoFatal: null,
            tarefaRestante: null,
            tarefaSequencia: null,
            tipoCompromisso: null,
            tipoTarefa: null,
            descricao: null,
            semanas: null
        }
    }

function ouvirEventos (target) {
    for(let prop in target){
        if(prop.substr(0,2) == "on"){
            target.addEventListener(prop.substr(2), function(e){
                console.log(e.type,e.target)
           })
        }
     }
     
    var eventos = ['click', 'blur', 'mouseover', 'mouseup', 'mousedown','animationstart','animationend','animationiteration']
    for(let evt of eventos){
        target.addEventListener(evt, function(e){
            console.log(e.type)
        })
    }
}

async function criarTarefaColetivo () {

    const dataFinalizacao = document.querySelector("#dataParaFinalizacao").value
    const descricao = document.querySelector("#descricao").value
    const idResponsavel = document.querySelector("#idResponsavel").value
    const idExecutor = document.querySelector("#idExecutor").value
    const idTipoTarefa = document.querySelector("#idTipoTarefa").value

    const url = "http://fabioribeiro.eastus.cloudapp.azure.com/adv/tarefas/formularioScript.asp"

    cliente.processo.idDemaisEnvolvidos.forEach(id => {
        //makeRequest(url,id)
    })

    function makeRequest(url,id) {

        const textoEnviado = `idPK=&idCO=&idPR=&idCL=${id}&org=&superior=&idResponsavelAvisado=&agendada=n&idTipoTarefa=${idTipoTarefa}&dataParaFinalizacaoAgendada=&onde=&horarioInicial=&horarioFinal=&dataParaFinalizacao=${dataFinalizacao}&descricao=${descricao}&idResponsavel=${idResponsavel}&idExecutor=${idExecutor}&lembreteQuandoFinalizarPara=&btnGravar=Gravar+informa%C3%A7%C3%B5es`

        const method = 'POST'

        let httpRequest = new XMLHttpRequest()
        httpRequest.onreadystatechange = alertContents;
        httpRequest.open(method, url)
        httpRequest.setRequestHeader('Content-Type','application/x-www-form-urlencoded')
        httpRequest.send(textoEnviado)

        function alertContents() {
            if (httpRequest.readyState === 4) {
                if (httpRequest.status === 200) {
                    alert("Tarefa criada com sucesso")
    
                } else {
                    alert('Houve um problema com a requisição')
                }
            }
        }
    }
        
}

function calculaPascoa(ano) {
    let X
    let Y

    if (ano >= 2020 && ano <= 2099) {
        X = 24
        Y = 5
    }
    if (ano >= 2100 && ano <= 2199) {
        X = 24
        Y = 6
    }
    if (ano >= 2200 && ano <= 2299) {
        X = 25
        Y = 7
    }

    let a = ano%19
    let b = ano%4
    let c = ano%7
    let d = (19*a + X)%30
    let e = (2*b+4*c+6*d+Y)%7
    let DIA
    let MES

    if (d+e > 9) {
        DIA = d+e-9
        MES = 3
    }
    else {
        DIA = d+e+22
        MES = 2
    }
    if (MES == 3 && DIA == 26)
        DIA = 19
    if (MES == 3 && DIA == 25 && d == 28 && a > 10)
        DIA = 18

    return new Date(ano,MES,DIA)
}

function FeriadosFixos (ano, parametro) {

    const tarefaContatar = (parametro == 1)
    const tarefaAdvogado = (parametro == 2)
    const indexDia = 1
    const indexMes = 0
    const indexJaneiro = 0

    //console.log(tarefaContatar, tarefaAdvogado, parametro)

    function setIntervaloFeriadosJudiciario(diaInicio, mesInicio, diaFinal, mesFinal) {
        let feriados = []
        let condicao = true
        let dia = diaInicio
        let mes = mesInicio
        const fimMesDezembro = 31
        const diaPrimeiro = 1

        while(condicao) {
            feriados.push([mes, dia])
            dia++
            if (dia > fimMesDezembro) {
                dia = diaPrimeiro
                mes = indexJaneiro
            }
            if ((dia > diaFinal) && (mes == mesFinal)) {
                condicao = false
            }
        }

        return feriados
    }

    let resultados = []

    const diaInicioForense = 20
    const mesInicioForense = 11
    const diaFimForense = 6
    const mesFimForense = 0

    const forense = setIntervaloFeriadosJudiciario(diaInicioForense, mesInicioForense, diaFimForense, mesFimForense)

    const diaInicioFeriasAdvogados = 20
    const mesInicioFeriasAdvogados = 11
    const diaFimFeriasAdvogados = 20
    const mesFimFeriasAdvogados = 0

    const advogados = setIntervaloFeriadosJudiciario(diaInicioFeriasAdvogados, mesInicioFeriasAdvogados, diaFimFeriasAdvogados, mesFimFeriasAdvogados)

    let datas = { // [mes, dia] (indice do mes de 0 a 11)
        nacional: [
            [0,1], //CONFRATERNIZAÇÃO UNIVERSAL
            [3,21], //TIRADENTES
            [4,1], //DIA DO TRABALHO
            [8,7], //INDEPENDÊNCIA DO BRASIL
            [9,12], //DIA DAS CRIANÇAS - DIA DA PADROEIRA DO BRASIL
            [10,2], //FINADOS
            [10,15], //PROCLAMAÇÃO DA REPÚBLICA
            [11,25], //NATAL
        ],
        recessoForense : forense, //Recesso Forense 20/12 a 06/01
        feriasAdvogados: advogados, //Recesso dos advogados 20/12 a 20/01 Art. 220 NCPC
        justicaNacional: [
            [7,11], //DIA DO MAGISTRADO
            [9,28], //DIA DO FUNCIONÁRIO PÚBLICO
            [10,1], //LEI FEDERAL Nº 5.010/66
            [11,8], //DIA DA JUSTIÇA
        ],
        TRF1: [],
        'SE': [
            [5,24], //SÃO JOÃO
            [6,8], //EMANCIPAÇÃO POLÍTICA DE SERGIPE
        ],
        'AQUIDABA': [
            [3,4], //EMANCIPAÇÃO POLÍTICA
            [6,26] //PADROEIRA
        ],
        'ARACAJU': [
            [11,8], //PADROEIRA
            [2,17] //ANIVERSÁRIO DE ARACAJU
        ],
        'ARAUA': [
            [3,9], //EMANCIPAÇÃO POLÍTICA
            [9,5], //SÃO BENEDITO
            [11,8] //PADROEIRA
        ],
        'AREIA BRANCA': [
            [10,11], //FUNDAÇÃO DA CIDADE
            [11,8] //PADROEIRA
        ],
        'BARRA DOS COQUEIROS': [
            [10,25], //EMANCIPAÇÃO POLÍTICA
            [11,13] //PADROEIRA
        ],
        'BOQUIM': [
            [2,21], //CRIAÇÃO DO MUNICÍPIO
            [6,26] //PADROEIRA
        ],
        'CAMPO DO BRITO': [
            [7,15], //PADROEIRA
            [9,29] //EMANCIPAÇÃO POLÍTICA
        ],
        'CANINDE DE SAO FRANCISCO': [
            [10,25], //EMANCIPAÇÃO POLÍTICA
            [11,8] //EMANCIPAÇÃO POLÍTICA
        ],
        'CAPELA': [
            [1,2], //PADROEIRO
            [7,28] //EMANCIPAÇÃO POLÍTICA
        ],
        'CARIRA': [
            [4,2], //PADROEIRA
            [10,25] //EMANCIPAÇÃO POLÍTICA
        ],
        'CARMOPOLIS': [
            [6,16], //PADROEIRA
            [9,16], //EMANCIPAÇÃO POLÍTICA
            [10,29] //DIA DO EVANGÉLICO
        ],
        'CEDRO DE SAO JOAO': [
            [5,24], //PADROEIRO
            [9,4] //EMANCIPAÇÃO POLÍTICA
        ],
        'CRISTINAPOLIS': [
            [3,24], //EMANCIPAÇÃO POLÍTICA
            [6,31], //FERIADO MUNICIPAL EVANGÉLICO
            [9,4] //PADROEIRO
        ],
        'DIVINA PASTORA': [
            [2,13] //EMANCIPAÇÃO POLÍTICA
        ],
        'ESTANCIA': [
            [4,4], //ANIVERSÁRIO DA CIDADE
            [11,12] //PADROEIRA
        ],
        'FREI PAULO': [
            [5,30], //PADROEIRO
            [9,23] //EMANCIPAÇÃO POLÍTICA
        ],
        'GARARU': [
            [2,15], //EMANCIPAÇÃO POLÍTICA
            [4,10], //FESTA DO CRUZEIRO
            [7,15] //DIA DA ASSUNÇÃO DE NOSSA SENHORA
        ],
        'INDIAROBA': [
            [2,28], //EMANCIPAÇÃO POLÍTICA
            [11,8] //PADROEIRA
        ],
        'ITABAIANA': [
            [0,27], //PADROEIRO
            [5,13], //EMANCIPAÇÃO POLÍTICA
            [7,28] //PADROEIRA
        ],
        'ITABAIANINHA': [
            [9,19], //EMANCIPAÇÃO POLÍTICA
            [11,8] //PADROEIRA
        ],
        'ITAPORANGA DAJUDA': [
            [1,2], //PADROEIRA
            [2,28] //EMANCIPAÇÃO POLÍTICA
        ],
        'JAPARATUBA': [
            [5,11], //EMANCIPAÇÃO POLÍTICA
            [11,8] //PADROEIRA
        ],
        'JAPOATA': [
            [10,23], //EMANCIPAÇÃO POLÍTICA
            [10,25] //PADROEIRA
        ],
        'LAGARTO': [
            [3,20], //EMANCIPAÇÃO POLÍTICA
            [8,8] //PADROEIRA
        ],
        'LARANJEIRAS': [
            [5,26], //PADROEIRA
            [7,7] //EMANCIPAÇÃO POLÍTICA
        ],
        'MALHADOR': [
            [2,19], //PADROEIRO
            [10,25] //EMANCIPAÇÃO POLÍTICA
        ],
        'MARUIM': [
            [0,21], //PADROEIRO
            [4,5], //EMANCIPAÇÃO POLÍTICA
            [7,15] //CO-PADROEIRA NOSSA SENHORA DA PAZ
        ],
        'MONTE ALEGRE DE SERGIPE': [
            [5,24], //PADROEIRO
            [10,25] //EMANCIPAÇÃO POLÍTICA
        ],
        'NEOPOLIS': [
            [5,13], //PADROEIRO
            [5,29], //SÃO PEDRO
            [9,7], //NOSSA SENHORA DO ROSÁRIO
            [9,18] //FUNDAÇÃO DA CIDADE
        ],
        'NOSSA SENHORA DA GLORIA': [
            [0,5], //FESTA DOS SANTOS REIS
            [7,15], //PADROEIRA
            [8,26] //EMANCIPAÇÃO POLÍTICA
        ],
        'NOSSA SENHORA DAS DORES': [
            [5,11], //EMANCIPAÇÃO POLÍTICA
            [8,15] //PADROEIRA
        ],
        'SOCORRO': [
            [1,2], //PADROEIRA
            [6,7], //EMANCIPAÇÃO POLÍTICA
            [7,15] //FESTA DE NOSSA SENHORA DO AMPARO
        ],
        'PACATUBA': [
            [10,20], //PADROEIRO
            [10,25] //EMANCIPAÇÃO POLÍTICA
        ],
        'PEDRINHAS': [
            [2,19], //PADROEIRO
            [10,25] //EMANCIPAÇÃO POLÍTICA
        ],
        'PIRAMBU': [
            [1,11], //PADROEIRA
            [10,26] //EMANCIPAÇÃO POLÍTICA
        ],
        'POCO REDONDO': [
            [7,15], //PADROEIRA
            [10,25] //EMANCIPAÇÃO POLÍTICA
        ],
        'POCO VERDE': [
            [0,21], //PADROEIRO
            [4,3], //CO-PADROEIRA
            [10,25] //EMANCIPAÇÃO POLÍTICA
        ],
        'PORTO DA FOLHA': [
            [1,19], //EMANCIPAÇÃO POLÍTICA
            [11,7] //PADROEIRA
        ],
        'PROPRIA': [
            [1,7], //EMANCIPAÇÃO POLÍTICA
            [5,13] //PADROEIRO
        ],
        'RIACHAO DO DANTAS': [
            [4,9], //EMANCIPAÇÃO POLÍTICA
            [10,21] //PADROEIRA
        ],
        'RIACHUELO': [
            [0,25], //EMANCIPAÇÃO POLÍTICA
            [5,11], //BATALHA NAVAL DE RIACHUELO
            [11,8] //PADROEIRA
        ],
        'RIBEIROPOLIS': [
            [9,30], //PADROEIRO
            [11,18] //EMANCIPAÇÃO POLÍTICA
        ],
        'SALGADO': [
            [0,22], //PADROEIRO
            [9,4] //EMANCIPAÇÃO POLÍTICA
        ],
        'SANTANA DO SAO FRANCISCO': [
            [3,6], //EMANCIPAÇÃO POLÍTICA
            [6,26] //PADROEIRA
        ],
        'SANTO AMARO DAS BROTAS': [
            [0,15], //PADROEIRA
            [11,15] //EMANCIPAÇÃO POLÍTICA
        ],
        'SAO CRISTOVAO': [
            [8,8] //PADROEIRA
        ],
        'SAO DOMINGOS': [
            [9,21], //EMANCIPAÇÃO POLÍTICA
            [7,8] //PADROEIRO
        ],
        'SIMAO DIAS': [
            [5,12], //EMANCIPAÇÃO POLÍTICA
            [6,26] //PADROEIRA
        ],
        'TOBIAS BARRETO': [
            [5,7], //ANIVERSÁRIO DE NASCIMENTO DE TOBIAS BARRETO DE MENEZES
            [7,15], //PADROEIRA
            [9,23] //EMANCIPAÇÃO POLÍTICA
        ],
        'UMBAUBA': [
            [1,2], //PADROEIRA
            [1,6] //EMANCIPAÇÃO POLÍTICA
        ]
    }
    
    datas.nacional.forEach(feriado => {
        resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
    })

    if (tarefaContatar) {
        datas.SE.forEach(feriado => {
            resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
        })
        datas.ARACAJU.forEach(feriado => {
            resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
        })
    }

    if (tarefaAdvogado) {
        datas.justicaNacional.forEach(feriado => {
            resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
        })

        datas.feriasAdvogados.forEach(feriado => {
            if (feriado[indexMes] == indexJaneiro) {
                resultados.push(new Date(ano+1, feriado[indexMes], feriado[indexDia]))
                resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
            }
            else {
                resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
                resultados.push(new Date(ano-1, feriado[indexMes], feriado[indexDia]))
            }
        })

        if (cliente.processo.estado == 'SE') {
            datas.SE.forEach(feriado => {
                resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
            })
        }

        if (cliente.processo.estado == 'DF' || cliente.processo.estado == 'GO') {
            datas.TRF1.forEach(feriado => {
                resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
            })
        }
        
        let date = Object.entries(datas)
        for (const [key,value] of date) {
            if (key == cliente.processo.cidade){
                value.forEach(feriado => {
                    resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
                })
            }
        }
    }

    datas.recessoForense.forEach(feriado => {
        if (feriado[indexMes] == indexJaneiro) {
            resultados.push(new Date(ano+1, feriado[indexMes], feriado[indexDia]))
            resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
        }
        else {
            resultados.push(new Date(ano, feriado[indexMes], feriado[indexDia]))
            resultados.push(new Date(ano-1, feriado[indexMes], feriado[indexDia]))
        }
    })

    return resultados
}

function calculaFeriados(parametro) {
    let date = new Date()
    let ano = date.getFullYear()
    let fixos = FeriadosFixos(ano,parametro)
    let pascoa = calculaPascoa(ano)
    let date1 = new Date(pascoa.valueOf())
    let date2 = new Date(pascoa.valueOf())
    let date3 = new Date(pascoa.valueOf())
    let date4 = new Date(pascoa.valueOf())
    let date5 = new Date(pascoa.valueOf())
    let date6 = new Date(pascoa.valueOf())
    let date7 = new Date(pascoa.valueOf())
    let quartaSanta = new Date (date1.setDate(pascoa.getDate()-4))
    let quintaSanta = new Date (date2.setDate(pascoa.getDate()-3))
    let paixao = new Date (date3.setDate(pascoa.getDate()-2))
    let segundaCarnaval = new Date (date4.setDate(pascoa.getDate()-48))
    let tercaCarnaval = new Date (date5.setDate(pascoa.getDate()-47))
    let quartaCinzas = new Date (date6.setDate(pascoa.getDate()-46))
    let corpus = new Date (date7.setDate(pascoa.getDate()+60))
    let variaveis = [segundaCarnaval,tercaCarnaval,quartaCinzas,quartaSanta,quintaSanta,paixao,pascoa,corpus]
    let feriados = []

    fixos.forEach(e => {
        feriados.push(e)
    })
    variaveis.forEach(e => {
        feriados.push(e)
    })
    
    return feriados
}

function contarDias(inicial,final, parametro) {
    let contaTodos = 0
    let contaUteis = 0
    let domingos = 0
    let i
    let date = new Date(inicial[2],inicial[1],inicial[0])
    let condiction

    if (date.toDateString() == final.toDateString())
        return 0

    while (date < final) {
        date.setDate(date.getDate() + 1)
        condiction = isFeriado(date, parametro)
        i = date.getDay()

        if (i == 0) {
            domingos++
        }

        if ((i > 0 && i < 6) && (!condiction)) {
            contaUteis++
        } 
        contaTodos++
    }

    cliente.compromisso.semanas = domingos

    return { uteis: contaUteis, todosDias: contaTodos}
}

function dataContato(intervalo,dataInterno,parametro, todosDias) {
    let hoje = new Date()
    hoje.setHours(0,0,0,0)
    let date
    let fimIntervalo = Number(intervalo)
    let condiction
    
    if (intervalo > 0) {
        let c = 0
        date = new Date(dataInterno)
        while (c < fimIntervalo) {
            date.setDate(date.getDate() -1)
            condiction = isFeriado(date, parametro)
            i = date.getDay()
            if ((i > 0) && (i < 6) && !condiction) {
                ++c
            }
        }
    } else {
        date = new Date(dataInterno)
    }

    let anoContato = date.getFullYear()
    let mesContato = date.getMonth()+1
    let diaContato = date.getDate()

    hoje.setDate(hoje.getDate() + todosDias)

    return `${diaContato < 10 ? '0'.concat(diaContato) : diaContato}/${mesContato < 10 ? '0'.concat(mesContato) : mesContato}/${anoContato}`
}

function extrairDataPrazoFatalInput (prazoFatal) {
    let data = prazoFatal.split('/')
    return [data[0],Number(data[1])-1,data[2]]
}

function calculaIntervaloTarefas (dias) {
    const { tipoCompromisso, tipoTarefa, tarefaSequencia, semanas, tarefaRestante } = cliente.compromisso
    const { estado } = cliente.processo
    let contDois = {
        outros: ["EMENDAR","DADOS PERÍCIA SOCIAL","DADOS COMPLEMENTARES"],
        financeiro: ["ALVARÁ","RPV","PRECATÓRIO"]
    }
    let contTres = "PERÍCIA"
    let contQuatro = ["AUDIÊNCIA DE CONCILIAÇÃO", "AUDIÊNCIA CONCILIATÓRIA", "AUDIÊNCIA DE INTERROGATÓRIO"]
    let contCinco = ["AUDIÊNCIA DE INSTRUÇÃO", "AUDIÊNCIA INAUGURAL", "AUDIÊNCIA INICIAL", "AUDIÊNCIA DE INSTRUÇÃO E JULGAMENTO", "AUDIÊNCIA UNA"]

    if (((contCinco.includes(tipoCompromisso) && dias > 11) || (contQuatro.includes(tipoCompromisso) && dias > 10) || (tipoCompromisso.search(contTres) == 0) && dias > 10)) {
        if (semanas >= 2) {
            if (tipoTarefa == 'ANÁLISE')
                return dias-1
            if ((tipoTarefa == 'CONTATAR CLIENTE' || tipoTarefa == 'SMS E WHATSAPP')) {
                if (estado != 'GO' && estado != 'DF') {
                    return dias-2
                }
                else {
                    if (tipoTarefa == 'CONTATAR CLIENTE') {
                        return dias-3
                    }
                    if (tipoTarefa == 'SMS E WHATSAPP') {
                        if (contQuatro.includes(tipoCompromisso))
                            return dias-7
                        return dias-2
                    }
                }
            }
            if (tipoTarefa == 'LEMBRAR CLIENTE')
                return 2
            if (tipoTarefa == 'ATO ORDINATÓRIO')
                return dias-1
        }
    }
    else {
        const ehAudienciaOuPericia = (contCinco.includes(tipoCompromisso) || contQuatro.includes(tipoCompromisso) || tipoCompromisso.search(contTres) == 0)
        if (ehAudienciaOuPericia) {
            if ((tarefaRestante == tarefaSequencia) && tipoCompromisso.search(contTres) == -1)
                return 0
            else
                if (tipoTarefa == 'LEMBRAR CLIENTE')
                    return 2
            if (estado == 'GO' || estado == 'DF') {
                if (tipoTarefa == 'CONTATAR CLIENTE')
                    return dias-1
            }
            return dias-1
        }
    }
    
    if (contDois.outros.includes(tipoCompromisso)) {
        if (tipoTarefa == 'CONTATAR CLIENTE') {
            return dias-1
        }
    }

    const indiceTarefa = ((cliente.processo.estado == 'DF') || (cliente.processo.estado == 'GO') ? 1 : 2)

    if (contDois.financeiro.includes(tipoCompromisso)) {
        if (tipoCompromisso == 'RPV' && tarefaRestante == indiceTarefa) {
            return 0
        }

        if (tipoCompromisso == 'RPV' && tarefaRestante != indiceTarefa) {
            return dias-5
        }
    }

    return 0
}

function calcularDataTarefa(parametro) {
    let dataFinalizacao = document.querySelector("#dataParaFinalizacao")
    let dataFinalizacaoAgendada = document.querySelector("#dataParaFinalizacaoAgendada")
    let hoje = new Date()
    let ano = hoje.getFullYear()
    let mes = hoje.getMonth()
    let dia = hoje.getDate()
    let data = extrairDataPrazoFatalInput(cliente.compromisso.prazoInterno)
    let dataInterno = new Date(data[2],data[1],data[0])

    let dias = contarDias([dia, mes, ano], dataInterno, parametro)
    const { uteis, todosDias} = dias
    
    let intervalo = calculaIntervaloTarefas (uteis)
    
    let dataTarefa = dataContato(intervalo, dataInterno, parametro, todosDias)
    
    dataFinalizacao.value = dataTarefa
    dataFinalizacaoAgendada.value = dataTarefa

    dataFinalizacaoAgendada.addEventListener('blur', e => {
        dataFinalizacao.value = e.target.value
        if ((cliente.compromisso.tipoTarefa == "CONTATAR CLIENTE" || cliente.compromisso.tipoTarefa == "LEMBRAR CLIENTE") && (cliente.processo.estado != "DF" || cliente.processo.estado != "GO")) {
            let contactdiv = document.querySelector("#contactdiv")
            if (contactdiv != null) {
                contactdiv.parentNode.removeChild(contactdiv)
                validaExecutorContatar()
            }
        }
    })
    dataFinalizacao.addEventListener('blur', e => {
        dataFinalizacaoAgendada.value = e.target.value
        if ((cliente.compromisso.tipoTarefa == "CONTATAR CLIENTE" || cliente.compromisso.tipoTarefa == "LEMBRAR CLIENTE") && (cliente.processo.estado != "DF" || cliente.processo.estado != "GO")) {
            let contactdiv = document.querySelector("#contactdiv")
            if (contactdiv != null) {
                contactdiv.parentNode.removeChild(contactdiv)
                validaExecutorContatar()
            }
        }
    })
}

async function desativarAtualizacao() {
    cliente.compromisso.atualizar = false
}

async function saveInfoCompromissos() {
    if (!state.functions.cadastroCompromisso.selecaodoTipodeCompromisso) {
        return
    }
    let descricaoTarefa = document.querySelector("#descricao")
    let optionUl = document.querySelector("#fdt-form > div:nth-child(6) > div:nth-child(1) > div > div > ul")

    let tipos = {
        "AUDIÊNCIA": "7",
        "PERÍCIA": "17",
        "RPV": "23",
        "ALVARÁ": "4",
        "PRECATÓRIO": "21"
    }

    let tiposArray = Object.entries(tipos)

    if (descricaoTarefa !== null) {
        descricaoTarefa.focus()
        descricaoTarefa.addEventListener('change',async event => {
            let intimacao = "16"
            event.target.value = event.target.value.toUpperCase()
            let tarefaIdentificada
            let indexTipoTarefa
            
            if (optionUl !== null) {

                for (const [key,value] in tiposArray) {
                    indexTipoTarefa = removeAcentuacaoString(event.target.value).search(removeAcentuacaoString(tiposArray[key][0]))
                    tarefaIdentificada = (indexTipoTarefa == 0)
                    if (tarefaIdentificada) {
                        intimacao = tiposArray[key][1]
                    }
                }

                optionUl.children[intimacao].children[0].click()
            }
        })
    }

}

function getIdCliente(url) {
    let indiceCliente = url.search("idPR=")
    return url.slice(indiceCliente+5)
}

function submitPesquisaProcesso() {
    let subBtn = document.querySelector("#fdt-form > div:nth-child(6) > div:nth-child(4) > input")
    subBtn.click()
}

function addEventoPasteProcesso (processoInput) {
    processoInput.addEventListener('paste', () => {
        setTimeout(() => {
            processoInput.value = removeCaracteresProcesso(processoInput.value)
            submitPesquisaProcesso()
        }, 10);
    })
}

function removeCaracteresProcesso(numeroProcesso) {
    
    let processoFormatado = ''

    function isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    for (let index = 0; index < numeroProcesso.length; index++) {
        if (isNumber(numeroProcesso[index]))
            processoFormatado += numeroProcesso[index]
    }

    return processoFormatado
}

function formataNumProcesso () {
    if (!state.functions.abaCadastrodeProcesso.autoFormatNumProcesso) {
        return
    }
    let processoInput = document.querySelector("#bsAdvProcessosTexto")
    let processoInputCad = document.querySelector("#numero")
    
    
    if (processoInput !== null) {
        addEventoPasteProcesso(processoInput)
    }
    if (processoInputCad !== null) {
        processoInputCad.addEventListener('change', event => {
                event.target.value = removeCaracteresProcesso(event.target.value)
        })
    }
}

function habilitarEdicaoNumeroProcesso() {
    if (!state.functions.abaCadastrodeProcesso.alteracaoNumeroProcesso) {
        return
    }
    let processoInputCad = document.querySelector("#numero")

    processoInputCad.readOnly = false
    processoInputCad.style = ""
}

function selectRespExec (adv) {
    let responsavelSelect = document.querySelector("#fdt-form > div:nth-child(15) > div:nth-child(1) > div > div > ul")
    let executorSelect = document.querySelector("#fdt-form > div:nth-child(15) > div:nth-child(2) > div > div > ul")
    for (let index = 0; index < responsavelSelect.children.length; index++) {
        if (responsavelSelect.children[index].innerText.trim() == adv.responsavel.trim()) 
            responsavelSelect.children[index].children[0].click()
        if (responsavelSelect.children[index].innerText.trim() == adv.executor.trim())
            executorSelect.children[index].children[0].click()
    }
}

function createListaTarefas () {
    let divtarefa = document.querySelector('#divTipoTarefaNormal')
    let div = document.createElement('div')
    let h1 = document.createElement('h3')
    let h2 = document.createElement('h3')
    h1.setAttribute('class','title')
    h2.setAttribute('class','title')
    divtarefa.style.zIndex = 10
    divtarefa.style.position = 'relative'
    div.setAttribute('id','contactdiv')
    div.style.position = 'absolute'
    div.style.right = '5%'
    div.style.top = '0px'
    div.style.textAlign = 'center'
    div.style.background = 'dimgray'
    div.style.borderRadius = '5px'
    divtarefa.appendChild(div)
    div.appendChild(h1)
    let p1 = document.createElement('p')
    let p3 = document.createElement('p')
    p1.innerHTML = `Local atendido:`
    p3.innerHTML = `${cliente.cliente.localAtendido}`
    p1.style.color = 'white'
    p3.style.color = 'white'
    let p2 = document.createElement('p')
    let p4 = document.createElement('p')
    p2.innerHTML = `Cidade do cliente:`
    p4.innerHTML = `${cliente.cliente.cidade}`
    p2.style.color = 'white'
    p4.style.color = 'white'
    let p5 = document.createElement('p')
    let p6 = document.createElement('p')
    p5.innerHTML = `Parceiro:`
    p6.innerHTML = `${cliente.cliente.parceiro}`
    p5.style.color = 'white'
    p6.style.color = 'white'
    div.appendChild(p1)
    div.appendChild(p3)
    div.appendChild(p2)
    div.appendChild(p4)
    div.appendChild(p5)
    div.appendChild(p6)
    div.appendChild(h2)
    let h = document.querySelectorAll('.title')
    h1.innerHTML = 'INFO CLIENTE'
    h2.innerHTML = 'TAREFAS ADM'
    h.forEach(e => {
        e.style.background = 'whitesmoke'
        e.style.padding = '5px'
        e.style.textAlign = 'center'
        e.style.fontStyle = 'bold'
        e.style.borderRadius = '5px'
        e.style.top = '0px'
    })
}

function addListaTarefas(adm,data) {
    let ano = new Date().getFullYear()
    let date = `${data[0]}/${data[1]}/${data[2]}`
    let div = document.querySelector('#contactdiv')
    let p1 = document.createElement('p')

    p1.innerHTML = `${adm[1].slice(0,adm[1].search(' '))}: ${adm[4]}`
    p1.style.color = 'white'
    p1.dataset.colaborador = adm[1]
    p1.style.cursor = 'pointer'

    if (adm[3] != null) {
        for (let index = 0; index < adm[3].length; index++) {
            if (date == `${adm[3][index]}/${ano}`) 
                p1.style.color = 'yellow'
        }
    }

    const defaultColor = p1.style.color

    div.appendChild(p1)

    p1.addEventListener('mouseenter', event => {
        event.target.style.color = 'gray'
    })

    p1.addEventListener('mouseleave', event => {
        event.target.style.color = defaultColor
    })

    p1.addEventListener('click', event => {
        let tarefaForEstancia = event.target.dataset.colaborador.search('SANDOVAL') == 0
        let respExec = {}

        if (tarefaForEstancia) {
            respExec = {responsavel: event.target.dataset.colaborador, executor: event.target.dataset.colaborador}
        } else {
            respExec = {responsavel: 'JULIANO OLIVEIRA DE SOUZA', executor: event.target.dataset.colaborador}
        }

        selectRespExec(respExec)
    })
}

async function getTarefasAdm(element,data){ 
    let idExecutor = element[0]

    // uso da API para fornecer acesso a realizar requests ao servidor
    let xhttp = new XMLHttpRequest();
    // esta função é chamado sempre que o atributo readyState sofre alteração
    xhttp.onreadystatechange = function() {
        // readyState = 4   - referente a request concluida
        // status     = 200 - referente ao status code http 'OK'
        if (this.readyState == 4 && this.status == 200) {
            // responsável por coletar a resposta. 
            let response  = this.responseText
            // preenchimento do resultado no HTML
            let parser = new DOMParser()
            let doc = parser.parseFromString(response,'text/html')
            let tarefas = doc.documentElement.querySelectorAll('body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div.table-responsive > table > tbody > tr')
            let contador = 0
            tarefas.forEach(e => {
                if (e.children[2] != null) {
                    if ((e.children[2].innerText.match("[0-9]*")[0].length >= 12) && !(e.children[3].innerText.search('Acompanhar') == 0)) {
                        contador++
                    }
                }
            })
            element[4] = contador
            addListaTarefas(element,data)
        }

        // Responsável por tratar o retorno que não for bem sucedido
        if (this.readyState == 4 && this.status !== 200){
            console.log('Data not found!') 
        }
    };
    // URL
    let url = 'http://fabioribeiro.eastus.cloudapp.azure.com/adv/tarefas/default.asp'

    // configuração para request
    xhttp.open("POST", url, true)
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')

    // envio da request
    xhttp.send(`bsAdvTarefas=s&bsAdvTarefasTecnica=&bsAdvTarefasDe=${data[0]}%2F${data[1]}%2F${data[2]}&bsAdvTarefasAte=${data[0]}%2F${data[1]}%2F${data[2]}&bsAdvTarefasTitulo=&bsAdvTarefasTipo=&bsAdvTarefasStatus=p&bsAdvTarefasAgendada=&bsAdvTarefasResponsavel=&bsAdvTarefasExecutor=${idExecutor}&bsAdvTarefasCompromisso=&bsAdvTarefasCliente=&bsAdvTarefasCpf=&filtrar=Filtrar`)
}


async function validaExecutorContatar () {
    let dataInput = document.querySelector('#dataParaFinalizacao')
    createListaTarefas()
    setTimeout(async () => {
        let adm = await requererTarefasContatar(dataInput.value.split('/'))

        adm.forEach(e => {
            if (e[2] != null)
                if (e[2].length > 1) {
                    e[2].forEach(local => {
                        if (local == cliente.cliente.localAtendido) {
                            return e[1]
                        }
                    })
                }
                else
                    if (e[2] == cliente.cliente.localAtendido) {
                        return e[1]
                    }
        })
        let min = adm[0][3]
        for (let index = 1; index < adm.length-1; index++) {
            if (min > adm[index][3]) {
                min = adm[index][3]
            } 
        }
        return adm
    }, 100);
    
    async function requererTarefasContatar(data) {
        let adm = []
        

        //Última atualização: 07/08/2023
        const viagemAsley = ['09/08', '22/08', '29/08', '05/09', '12/09', '21/09', '26/09', '05/10', '10/10', '17/10', '24/10', '31/10', '07/11', '14/11', '21/11', '28/11', '05/12', '14/12', '19/12']
        const viagemRobert = ['10/08', '15/08', '29/08', '12/09', '26/09', '10/10', '24/10', '07/11', '21/11', '19/12']
        const viagemHenrique = ['08/08', '15/08', '23/08', '05/09', '19/09', '03/10', '18/10', '01/11', '05/12']
        const viagemBryan = ['22/08', '06/09', '20/09', '04/10', '17/10', '09/11', '22/11', '28/11', '12/12']
        const viagemLucas = ['06/12', '20/12']
        const idSandoval = 22, idAsley = 131, idCarlosH = 94, idMarcoR = 141, idVictorM = 120, idYuriD = 161, idBryan = 194, idLucas = 199

        let parceiros = ['ELIZEU ( PARCEIRO)','MARIA DO POV. PREGUIÇA','AGENOR (PARCEIRO)','ELIZANGELA ( PARCEIRA)','ERMINIO','AUGUSTO ( PARCEIRO)']

        let varaEstancia = ['7ª VARA FEDERAL', '1ª VARA CIVEL DE ESTÂNCIA', '2ª VARA CIVEL DE ESTÂNCIA', 'JUIZADO ESPECIAL CÍVEL E CRIMINAL DE ESTÂNCIA', 'VARA DE ESTÂNCIA', 'VARA DO TRABALHO DE ESTÂNCIA']

        let estancia = [[idSandoval,"SANDOVAL FILHO CORREIA LIMA FILHO",null,null,0]]

        let aracaju = [
            [idAsley,"ASLEY RODRIGO DE MELO LIMA",["ALAGOINHAS", "ESTANCIA", "CONDE/BA"],viagemAsley,0],
            [idCarlosH,"CARLOS HENRIQUE ESPASIANI",null,viagemHenrique,0],
            [idBryan,"BRYAN CAMPOS DE ANDRADE",["CARMOPÓLIS", "LOTEAMENTO JEOVA (BOTAFOGO)"],viagemBryan,0],
            [idLucas,"LUCAS NATHAN NOGUEIRA DA SILVA ",["PEDRINHAS", "TOBIAS BARRETO"],viagemLucas,0],
            [idMarcoR,"MARCOS ROBERT DE MELO LIMA",["CAPELA","JAPARATUBA"],viagemRobert,0],
            [idVictorM,"VICTOR MENDES DOS SANTOS",null,null,0],
            [idYuriD,"YURI DIAS PEREIRA",null,null,0]
        ]

        if (((cliente.cliente.cidade == "ESTANCIA" && cliente.cliente.localAtendido == "ESTANCIA")) || ((parceiros.includes(cliente.cliente.parceiro)) && varaEstancia.includes(cliente.processo.vara)))
            estancia.forEach(e => {
                adm.push(e)
            })
        else {
            if (varaEstancia.includes(cliente.processo.vara)) {
                alert("Verificar executor manualmente!")
                aracaju.forEach(e => {
                    adm.push(e)
                })
                estancia.forEach(e => {
                    adm.push(e)
                })
            }
            else
                aracaju.forEach(e => {
                    adm.push(e)
                })
        }

        adm.forEach(async e => {
            getTarefasAdm(e,data)
        })

        return adm
    }
}

async function validaResponsavelTj (num) {
    let tarefa = cliente.compromisso.tipoTarefa
    let digito = Number(cliente.processo.origem[num-1])
    let financeiro = ["RPV TRF1 BRASÌLIA", "RPV TRF1 GOIÁS", "RPV TRF5 ARACAJU", "RPV TRF5 ESTÂNCIA", "RPV TRF1 BAHIA", "PRECATÓRIO"]
    let adm = ["CONTATAR CLIENTE","LEMBRAR CLIENTE"]
    let sac = "SMS E WHATSAPP"
    let natureza = cliente.processo.natureza

    if (tarefa == "RECEBIMENTO DE ALVARÁ" && cliente.compromisso.tarefaRestante == 2) {
        return {responsavel: "LUCIANA DOS SANTOS ARAUJO",executor: "LUCIANA LIMA REZENDE"}
    }

    if (financeiro.includes(tarefa) && cliente.compromisso.tarefaRestante == 2) {
        //let ehMateusFinanceiro = await getFinanceiro()
        //setFinanceiro(!ehMateusFinanceiro)
        return {responsavel: "LUCIANA DOS SANTOS ARAUJO",executor: "OVERLANDIA SANTOS MELO"} //ehMateusFinanceiro ? "MATEUS DOS SANTOS SILVA":"OVERLANDIA SANTOS MELO"
    }
    if (adm.includes(tarefa)){
        if (cliente.cliente.cidade == "ESTANCIA" && cliente.cliente.localAtendido == "ESTANCIA")
            return {responsavel: "SANDOVAL FILHO CORREIA LIMA FILHO",executor: "SANDOVAL FILHO CORREIA LIMA FILHO"}
        return {responsavel: "JULIANO OLIVEIRA DE SOUZA",executor: "JULIANO OLIVEIRA DE SOUZA"}
    }
    if (sac == tarefa)
        return {responsavel: "HENYR GOIS DOS SANTOS",executor: "HENYR GOIS DOS SANTOS"}
    if (natureza == "TRABALHISTA")
        return {responsavel: "FELIPE PANTA CARDOSO",executor: "FELIPE PANTA CARDOSO"}
    if (natureza == "PREVIDENCIÁRIA")
        return {responsavel: "KEVEN FARO DE CARVALHO",executor: "KEVEN FARO DE CARVALHO"}
    if (natureza == "BANCÁRIO" || natureza == "CÍVEL" || natureza == "CONSUMIDOR" || natureza == "SERVIDOR PÚBLICO") {
        const ala = [0,1]
        const gabriel = [2,3]
        const lais = [4,6,8]
        //const rodrigo = [5,7,9]
        if (tarefa != "SESSÃO DE JULGAMENTO" && tarefa.search("AUDIÊNCIA") != 0) {
            if (lais.includes(digito))
                return {responsavel: "RODRIGO AGUIAR SANTOS",executor: "LAIS PEREIRA MORAES"}
            if (gabriel.includes(digito))
                return {responsavel: "RODRIGO AGUIAR SANTOS",executor: "GABRIEL DAVILA FILGUEIRAS MELLONE"}
            if (ala.includes(digito))
                return {responsavel: "RODRIGO AGUIAR SANTOS",executor: "ALÃ FEITOSA CARVALHO"}
        }
        return {responsavel: "RODRIGO AGUIAR SANTOS",executor: "RODRIGO AGUIAR SANTOS"}
    }
    /* if (natureza == "CÍVEL" || natureza == "CONSUMIDOR" || natureza == "SERVIDOR PÚBLICO") {
            if (ala.includes(digito) && tarefa != "SESSÃO DE JULGAMENTO" && tarefa.search("AUDIÊNCIA") != 0)
                return {responsavel: "RODRIGO AGUIAR SANTOS",executor: "ALÃ FEITOSA CARVALHO"}
            return {responsavel: "RODRIGO AGUIAR SANTOS",executor: "RODRIGO AGUIAR SANTOS"}
    } */
}

async function validaResponsavelFederal (num) {
    let tarefa = cliente.compromisso.tipoTarefa
    let numeroProcesso = cliente.processo.origem
    let tarefasFinanceiro = ["RPV TRF1 BRASÌLIA", "RPV TRF1 GOIÁS", "RPV TRF5 ARACAJU", "RPV TRF5 ESTÂNCIA", "RPV TRF1 BAHIA", "PRECATÓRIO"]
    let tarefasAdm = ["CONTATAR CLIENTE","LEMBRAR CLIENTE"]
    let tarefaSac = "SMS E WHATSAPP"
    let secao = numeroProcesso.slice(num-4,num)
    let secaoDFGO = ["3400","3501","3502","3506", "0015"]
    let setimoDigito = Number(numeroProcesso[6])
    let digitoVerificador = numeroProcesso.slice(13,16)
    let natureza = cliente.processo.natureza
    const indiceTarefa = ((cliente.processo.estado == 'DF') || (cliente.processo.estado == 'GO') ? 1 : 2)

    if ((tarefa == "RECEBIMENTO DE ALVARÁ") && (cliente.compromisso.tarefaRestante == indiceTarefa)) {
        return {responsavel: "LUCIANA DOS SANTOS ARAUJO",executor: "LUCIANA LIMA REZENDE"}
    }

    if (tarefasFinanceiro.includes(tarefa) && cliente.compromisso.tarefaRestante == indiceTarefa) {
        //let ehMateusFinanceiro = await getFinanceiro()
        //setFinanceiro(!ehMateusFinanceiro)
        return {responsavel: "LUCIANA DOS SANTOS ARAUJO",executor: "OVERLANDIA SANTOS MELO"} //ehMateusFinanceiro ? "MATEUS DOS SANTOS SILVA":"OVERLANDIA SANTOS MELO"
    }

    if (tarefasAdm.includes(tarefa)) {
        if (cliente.processo.estado == "DF" || cliente.processo.estado == "GO") {
            return {responsavel: "HENYR GOIS DOS SANTOS",executor: "HENYR GOIS DOS SANTOS"}
        }
        if(cliente.cliente.cidade == "ESTANCIA"  && cliente.cliente.localAtendido == "ESTANCIA") { //Tarefa contatar para escritório de Estância
            return {responsavel: "SANDOVAL FILHO CORREIA LIMA FILHO",executor: "SANDOVAL FILHO CORREIA LIMA FILHO"}
        }
        return {responsavel: "JULIANO OLIVEIRA DE SOUZA",executor: "JULIANO OLIVEIRA DE SOUZA"} //Tarefa contatar para demais localidades
    }

    if (tarefaSac == tarefa) { //Tarefas para o SAC
        return {responsavel: "HENYR GOIS DOS SANTOS",executor: "HENYR GOIS DOS SANTOS"}
    }
    if ((digitoVerificador == "520" || natureza == "TRABALHISTA") || (natureza == "SERVIDOR PÚBLICO" && cliente.processo.responsavel == "VICTOR HUGO SOUSA ANDRADE")) {  //Processos Trabalhistas TRT20
        return {responsavel: "FELIPE PANTA CARDOSO",executor: "FELIPE PANTA CARDOSO"}
    }
    if (digitoVerificador == "401" || secaoDFGO.includes(secao)) { // Processos do TRF1
        let varasDF = ["23ª VARA FEDERAL BRASÍLIA", "24ª VARA FEDERAL DE BRASÍLIA", "25ª VARA FEDERAL DE BRASÍLIA", "26ª VARA FEDERAL DE BRASÍLIA", "27ª VARA FEDERAL DE BRASÍLIA", "23ª VARA FEDERAL", "24ª VARA FEDERAL", "25ª VARA FEDERAL", "26ª VARA FEDERAL", "27ª VARA FEDERAL", "BRASILIA", "1ª VARA FEDERAL CÍVEL SJGO", "TJ GOIÁS", "VARA FEDERAL DA SSJ LUZIÂNIA-GO", "VARA DE ÁGUAS LINDAS DE GOIÁS", "VARA FEDERAL DE RIO VERDE-GO", "VARA FEDERAL SJDF"]
        
        if ((cliente.processo.estado == "DF" || cliente.processo.estado == "GO")) {
            if (!varasDF.includes(cliente.processo.vara)) {
                alert('Atenção: Confirme o responsável e executor da tarefa!')
            }
            let bruno = [0,1,2]
            if (bruno.includes(setimoDigito) || tarefa.search("AUDIÊNCIA") == 0)
                return {responsavel: "BRUNO PRADO GUIMARAES",executor: "BRUNO PRADO GUIMARAES"}
            return {responsavel: "BRUNO PRADO GUIMARAES",executor: "PAULO VICTOR SANTANA TEIXEIRA"}
        }
        return {responsavel: "DIEGO MELO SOBRINHO",executor: "DIEGO MELO SOBRINHO"}
    }
    if (natureza == "PREVIDENCIÁRIA") {
        if (digitoVerificador == "403") { //Processos do TRF3
            return {responsavel: "DIEGO MELO SOBRINHO",executor: "DIEGO MELO SOBRINHO"}
        }
        if (digitoVerificador == "405" && numeroProcesso.search('080') == 0) { //Processos do TRF5
            if (cliente.processo.merito == "MANDADO DE SEGURANÇA") {
                if (setimoDigito <= 4) {
                    return {responsavel: "DIEGO MELO SOBRINHO",executor: "DIEGO MELO SOBRINHO"} //"FERNANDO HENRIQUE BARBOZA NASCIMENTO"
                }
                return {responsavel: "DIEGO MELO SOBRINHO",executor: "ITALO DE ANDRADE BEZERRA"}
            }
            return {responsavel: "DIEGO MELO SOBRINHO",executor: "DIEGO MELO SOBRINHO"}
        }
        else {
            if (secao == "8500") { //Processos da seção de Aracaju
                if (setimoDigito < 3) {
                    return {responsavel: "KEVEN FARO DE CARVALHO",executor: "KEVEN FARO DE CARVALHO"}
                }

                const responsavel = () => {
                    // Verifica se há um valor armazenado no localStorage para o índice atual
                    if (!localStorage.getItem('currentIndex')) {
                        localStorage.setItem('currentIndex', '0')
                    }
    
                    // Array com os elementos que serão alternados
                    const elementos = ["KEVEN FARO DE CARVALHO", "FERNANDO HENRIQUE BARBOZA NASCIMENTO", "ITALO DE ANDRADE BEZERRA"]
    
                    // Obtém o índice atual do localStorage e converte para número
                    let currentIndex = parseInt(localStorage.getItem('currentIndex'))
    
                    // Obtém o elemento atual do array com base no índice atual
                    const elementoAtual = elementos[currentIndex]
    
                    // Incrementa o índice atual para apontar para o próximo elemento
                    currentIndex = (currentIndex + 1) % elementos.length
    
                    // Armazena o novo índice atual no localStorage
                    localStorage.setItem('currentIndex', currentIndex.toString());
    
                    return elementoAtual
    
                }

                //const advogado = responsavel()
                
                // Retorna o elemento atual
                //return {responsavel: advogado,executor: advogado}

                return {responsavel: "MARCUS VINICIUS DE SOUZA MORAIS",executor: "MARCUS VINICIUS DE SOUZA MORAIS"}
            }
            if (secao == "8501") //Processos da seção de Itabaiana
                return {responsavel: "KEVEN FARO DE CARVALHO",executor: "KEVEN FARO DE CARVALHO"}
            if (secao == "8502") { //Processos da seção de Estância
                if (setimoDigito < 3)
                    return {responsavel: "KEVEN FARO DE CARVALHO",executor: "KEVEN FARO DE CARVALHO"}
                return {responsavel: "SARA GONÇALVES PINHEIRO",executor: "SARA GONÇALVES PINHEIRO"}
            }
            if (secao == "8503" || secao == "8504") //Processos da seção de Lagarto e Propriá
                return {responsavel: "SARA GONÇALVES PINHEIRO",executor: "SARA GONÇALVES PINHEIRO"}
            return null
            }
    }
    if (natureza == "CÍVEL" || natureza == "CONSUMIDOR" || natureza == "SERVIDOR PÚBLICO") //Processos de natureza cível
        return {responsavel: "RODRIGO AGUIAR SANTOS",executor: "RODRIGO AGUIAR SANTOS"}
    if (natureza == "BANCÁRIO") //Processos de natureza bancária
        return {responsavel: "RODRIGO AGUIAR SANTOS",executor: "RODRIGO AGUIAR SANTOS"}
}

async function validaEsferaProcesso() {
    let caracteresProcesso = cliente.processo.origem.length
    let adv
    if (caracteresProcesso == 12) {
        adv = await validaResponsavelTj(caracteresProcesso)
        if (adv != null)
            selectRespExec(adv)
    } else if (caracteresProcesso == 15 || caracteresProcesso == 17 || caracteresProcesso == 20) {
        adv = await validaResponsavelFederal(caracteresProcesso)
        if (adv != null)
            selectRespExec(adv)
    } else
        console.log("Erro no cadastro do número do processo")
}

function validaTipoIntimacao(txt) {
    let p1 = txt.search("PERÍCIA")
    const ehPericia = (p1 == 0)

    if (txt == "RPV") {
        if (cliente.processo.cidade == "ESTANCIA")
            return "RPV TRF5 ESTÂNCIA"
        if (cliente.processo.estado == "DF")
            return "RPV TRF1 BRASÌLIA"
        if (cliente.processo.estado == "GO")
            return "RPV TRF1 GOIÁS"
        if (cliente.processo.cidade == "BA")
            return "RPV TRF1 BAHIA"
        return "RPV TRF5 ARACAJU"
    }
    
    if (txt == "PAUTA" || txt == "RETIRADO DE PAUTA")
        return "SESSÃO DE JULGAMENTO"

    if (txt == "ALVARÁ")
        return "RECEBIMENTO DE ALVARÁ"
    
    if (txt == "AUDIÊNCIA DE CONCILIAÇÃO")
        return "AUDIÊNCIA CONCILIATÓRIA"
    
    if (txt == "AUDIÊNCIA INICIAL")
        return "AUDIÊNCIA INAUGURAL"
    
    if (txt == "PLANILHA")
        return "CÁLCULOS"
    
    if (txt == "DADOS PERICIA SOCIAL" || txt == "DADOS COMPLEMENTARES" || txt == "EMENDA" || txt == "EMENDA A INICIAL" || txt == "EMENDAR A INICIAL" || txt == "EMENDAR À INICIAL" || txt == "EMENDA À INICIAL")
        return "EMENDAR"
    
    if (txt == "PEDIDO DE VISTAS" || txt == "PEDIDO DE VISTA")
        return "MANIFESTAÇÃO"

    if (ehPericia)
        return "CONTATAR CLIENTE"

    return txt
}

function desmarcarCaixaTarefaSequencia() {
    let box = document.querySelector("#incluirOutra")
    box.checked = false
}

function proximaTarefa (descricaoTarefa) {
    let tipoAudiencia = ["INSTRUÇÃO", "UNA", "INICIAL", "INAUGURAL"]
    let audiencia = ["CONTATAR CLIENTE","SMS E WHATSAPP","LEMBRAR CLIENTE"]
    let audienciaShort = ["CONTATAR CLIENTE","SMS E WHATSAPP"]
    let instrucao = ["CONTATAR CLIENTE","SMS E WHATSAPP","LEMBRAR CLIENTE", "ANÁLISE"]
    let instrucaoShort = ["CONTATAR CLIENTE","SMS E WHATSAPP","ANÁLISE"]
    let pericia = ["SMS E WHATSAPP","LEMBRAR CLIENTE"]
    let periciaShort = ["SMS E WHATSAPP"]
    let periciaDF = ["SMS E WHATSAPP","LEMBRAR CLIENTE","ATO ORDINATÓRIO"]
    let periciaDFShort = ["SMS E WHATSAPP","ATO ORDINATÓRIO"]
    let financeiro = ["RECEBIMENTO DE ALVARÁ","RPV TRF1 BAHIA", "RPV TRF1 BRASÌLIA", "RPV TRF1 GOIÁS", "RPV TRF5 ARACAJU", "RPV TRF5 ESTÂNCIA","PRECATÓRIO"]
    let emendar = "CONTATAR CLIENTE"
    let sequencia = cliente.compromisso.tarefaSequencia
    let compromisso = cliente.compromisso.tipoCompromisso
    let cont = cliente.compromisso.tarefaRestante
    let i, achou = false

    if (cliente.compromisso.tarefaSequencia == cliente.compromisso.tarefaRestante) {
        cliente.compromisso.descricao = descricaoTarefa.value
    }

    tipoAudiencia.forEach(e => {
        if (compromisso.search(e) > -1) {
            achou = true
        }
    })

    if (compromisso.search('AUDIÊNCIA') == 0 && cont > -1) {
        if (!achou) {
            if (cliente.compromisso.tarefaSequencia < 4) {
                i = audienciaShort.indexOf(cliente.compromisso.tipoTarefa)
                if (i <= audienciaShort.length) {
                    cliente.compromisso.tipoTarefa = audienciaShort[i+1]
                    return cont-1
                }
            }
            else {
                i = audiencia.indexOf(cliente.compromisso.tipoTarefa)
                if (i <= audiencia.length) {
                    cliente.compromisso.tipoTarefa = audiencia[i+1]
                    return cont-1
                }
            }
        }
        else {
            if (cliente.compromisso.tarefaSequencia < 5) {
                i = instrucaoShort.indexOf(cliente.compromisso.tipoTarefa)
                if (i <= instrucaoShort.length) {
                    cliente.compromisso.tipoTarefa = instrucaoShort[i+1]
                    return cont-1
                }
            }
            else {
                i = instrucao.indexOf(cliente.compromisso.tipoTarefa)
                if (i <= instrucao.length) {
                    cliente.compromisso.tipoTarefa = instrucao[i+1]
                    return cont-1
                }
            }
        }
    }
    else {
        if (compromisso.search('PERÍCIA') == 0 && cont > -1) {
            if (cliente.processo.estado == "DF" || cliente.processo.estado == "GO") {
                if (cliente.compromisso.tarefaSequencia < 4) {
                    i = periciaDFShort.indexOf(cliente.compromisso.tipoTarefa)
                    if (i <= periciaDFShort.length) {
                        cliente.compromisso.tipoTarefa = periciaDFShort[i+1]
                        return cont-1
                    }
                }
                else {
                    i = periciaDF.indexOf(cliente.compromisso.tipoTarefa)
                    if (i <= periciaDF.length) {
                        cliente.compromisso.tipoTarefa = periciaDF[i+1]
                        return cont-1
                    }
                }
            }
            else {
                if (cliente.compromisso.tarefaSequencia < 3) {
                    i = periciaShort.indexOf(cliente.compromisso.tipoTarefa)
                    if (i <= periciaShort.length) {
                        cliente.compromisso.tipoTarefa = periciaShort[i+1]
                        return cont-1
                    }
                }
                else {
                    i = pericia.indexOf(cliente.compromisso.tipoTarefa)
                    if (i <= pericia.length) {
                        cliente.compromisso.tipoTarefa = pericia[i+1]
                        return cont-1
                    }
                }
            }
        }
        else {
            if (sequencia == 2 && cont > 1 && financeiro.includes(cliente.compromisso.tipoTarefa)) {
                return cont-1
            }

            if (sequencia == 2 && cont > 1 && !(financeiro.includes(cliente.compromisso.tipoTarefa))) {
                cliente.compromisso.tipoTarefa = emendar
                return cont-1
            }
            if (sequencia == 2 && cont == 1 && !(financeiro.includes(cliente.compromisso.tipoTarefa))) {
                cliente.compromisso.tipoTarefa = ''
            }
            return cont
        }
    }
}

function mostrarFormTarefaColetivo () {
    const divTarefa = document.createElement('div')

    divTarefa.style.width = '100px'
    divTarefa.style.height = '100px'
    divTarefa.style.background = 'white'
}


function removeEventGravar () {
    const gravarBtn = document.querySelector('#btnGravar')

    gravarBtn.addEventListener('click', event => {
        event.preventDefault()
    })

    mostrarFormTarefaColetivo()
}

async function submitAtualizarTarefa (descricaoTarefa) {
    let gravarBtn = document.querySelector("#btnGravar")
    //removeEventGravar()
    gravarBtn.addEventListener('click', async () => {
        if (cliente.processo.coletivo && (cliente.compromisso.tipoCompromisso.search("AUDIÊNCIA") == 0 || cliente.compromisso.tipoCompromisso.search("PERÍCIA") == 0) && (cliente.compromisso.tipoTarefa == "CONTATAR CLIENTE" || cliente.compromisso.tipoTarefa == "LEMBRAR CLIENTE") || "SMS E WHATSAPP") {
            //criarTarefaColetivo()
        }
        if (submit) {
            submit = false
            cliente.compromisso.tarefaRestante = await proximaTarefa(descricaoTarefa)
            desativarAtualizacao()
            setCliente(cliente)
        }
    })
}

function existeOrigem() {
    if (cliente.processo.dependente !== null)
        if (cliente.processo.dependente.length > 0)
            return `${cliente.processo.dependente} (ORIGEM ${cliente.processo.origem})`
    return cliente.processo.origem
}

function atualizaHora (horarioInicial) {
    let hora = Number(horarioInicial.value.slice(0,2))+2

    if (horarioInicial.value.length == 0)
        horarioInicial.value = "00:00"

    if (hora == 24)
        hora = '00'
    else if (hora == 25)
        hora = '01'
    else if (hora == 26)
        hora = '02'
    else if (hora < 10) {
        let num = hora
        hora = `0${num}`
    }
    return `${hora}:${horarioInicial.value.slice(3)}`
}

function atualizaDescricao (descricaoTarefa,horarioInicial,horarioFinal,local) {
    let loc = cliente.compromisso.tipoTarefa.search(" ")
    
    let endereço = getEndereço(local)

    if (loc < 0)
        loc = cliente.compromisso.tipoTarefa.length   

    horarioFinal.value = atualizaHora(horarioInicial)

    let processo = existeOrigem()

    let validacaoTarefa = removeAcentuacaoString(cliente.compromisso.tipoTarefa.slice(0,loc))

    if (cliente.compromisso.descricao !== null && removeAcentuacaoString(validacaoTarefa) != "ANALISE" && removeAcentuacaoString(cliente.compromisso.tipoTarefa) != "ATO ORDINATORIO" && cliente.compromisso.tipoCompromisso != "EMENDAR") {
        descricaoTarefa.value = cliente.compromisso.descricao
    }
    else {
        if (validacaoTarefa == "AUDIENCIA" && cliente.compromisso.tarefaSequencia == cliente.compromisso.tarefaRestante) {
            descricaoTarefa.value = `${processo} - ${cliente.compromisso.tipoCompromisso} DE ${cliente.cliente.nome} ${cliente.cliente.cpf} X ${cliente.processo.reu.length > 0 ? cliente.processo.reu : '_______'}, NO DIA ${cliente.compromisso.prazoInterno} ÀS ${horarioInicial.value}, LOCAL: ${endereço}`
        }
        else
            if (removeAcentuacaoString(cliente.compromisso.tipoCompromisso).search('PERICIA') == 0 && cliente.compromisso.tarefaRestante > 1) {
                    let perito = document.querySelector('#inputPerito')
                    descricaoTarefa.value = `${processo} - ${cliente.compromisso.tipoCompromisso} DE ${cliente.cliente.nome} ${cliente.cliente.cpf}, NO DIA ${cliente.compromisso.prazoInterno} ÀS ${horarioInicial.value}, PERITO: ${perito != null ? perito.value : ''}, LOCAL: ${endereço}`
            }
            else
                if (removeAcentuacaoString(cliente.compromisso.tipoTarefa) == "ATO ORDINATORIO" && removeAcentuacaoString(cliente.compromisso.tipoCompromisso).search('PERICIA') == 0) {
                    descricaoTarefa.value = `${processo} - ATO ORDINATÓRIO (PERÍCIA DESIGNADA)`
                }
                else
                    if ((validacaoTarefa == "ANALISE") && removeAcentuacaoString(cliente.compromisso.tipoCompromisso).search('AUDIENCIA') == 0) {
                        descricaoTarefa.value = `${processo} - VERIFICAR NECESSIDADE DE TESTEMUNHAS`
                    }
                    else
                        if ((cliente.compromisso.tipoCompromisso == "EMENDAR") && (cliente.compromisso.tarefaRestante == 1)) {
                            descricaoTarefa.value = `${processo} - `
                        }
                        else {
                            descricaoTarefa.value = `${processo} - ${cliente.compromisso.tipoCompromisso}`
                        }
    }
}

function selectTipoIntimacao(selectTipoIntimacaoInput, optionLi) {
    let achou = false
    let indiceManifestação
    let tipoIntimacao = cliente.compromisso.tipoTarefa
    for (let i = 0; i < selectTipoIntimacaoInput.options.length; i++) {
        let n = removeAcentuacaoString(selectTipoIntimacaoInput.options[i].innerText).toUpperCase().search(removeAcentuacaoString(tipoIntimacao).toUpperCase())
        let nIntimacao = removeAcentuacaoString(selectTipoIntimacaoInput.options[i].innerText).toUpperCase().search(("MANIFESTACAO"))
        if (nIntimacao == 0)
            indiceManifestação = i
        if (n == 0) {
            optionLi.children[i].children[0].click()
            achou = true
            return 0
        }
    }
    let space = (tipoIntimacao.search(" "))
    for (let i = 0; i < selectTipoIntimacaoInput.options.length; i++) {
        let n = removeAcentuacaoString(selectTipoIntimacaoInput.options[i].innerText).toUpperCase().search(removeAcentuacaoString(tipoIntimacao.slice(0,space)))
        if (n == 0) {
            optionLi.children[i].children[0].click()
            achou = true
            return 0
        }
    }
    
    if (!achou) {
        optionLi.children[indiceManifestação].children[0].click()
    }
}

function removeInputDependente (element) {
    element.parentNode.removeChild(element)
}

function createInputDependente() {
    let txtDependente = document.createElement('b')
    let input = document.createElement('input')
    txtDependente.setAttribute('id','txtDependente')
    txtDependente.innerHTML = 'Processo dependente: '
    input.setAttribute('id','input_dependente')
    input.setAttribute('type','text')
    input.classList.add("form-control")
    input.style.display = 'inline'
    input.style.width = '40%'
    let divConteudo = document.querySelector(".alert-info")
    divConteudo.innerHTML += '<br>'
    divConteudo.appendChild(txtDependente)
    divConteudo.appendChild(input)
    input.addEventListener('input', event => {
        cliente.processo.dependente = removeCaracteresProcesso(event.target.value)
    })
}

function mostrarCamposPericia () {
    let tarefaNormal = document.querySelector('#divTipoTarefaNormal')
    let dataInput = document.querySelector('#divTipoTarefaNormal > div:nth-child(1) > div.col-sm-8')
    dataInput.setAttribute('class','form-group col-sm-4')
    let horarioFinal = document.querySelector("#horarioFinal")
    let descricaoTarefa = document.querySelector("#descricao")
    
    let divRow2 = document.createElement('div')
    divRow2.setAttribute('class','row')
    tarefaNormal.appendChild(divRow2)

    let divPerito = document.createElement('div')
    let labelPerito = document.createElement('label')
    let inputPerito = document.createElement('input')
    labelPerito.innerHTML = 'Perito(a): '
    divPerito.setAttribute('class','form-group col-sm-4')
    inputPerito.setAttribute('class','form-control')
    inputPerito.setAttribute('id','inputPerito')

    let divLocal = document.createElement('div')
    let labelLocal = document.createElement('label')
    let inputLocal = document.createElement('input')
    labelLocal.innerHTML = 'Local: '
    divLocal.setAttribute('class','form-group col-sm-4')
    inputLocal.setAttribute('class','form-control')

    let divHorarioInicial = document.createElement('div')
    let labelHorarioInicial = document.createElement('label')
    let inputHorarioInicial = document.createElement('input')
    labelHorarioInicial.innerHTML = 'Horário: '
    divHorarioInicial.setAttribute('class','form-group datepicker-hora col-sm-4')
    inputHorarioInicial.setAttribute('class','form-control')
    inputHorarioInicial.setAttribute('type','time')
    inputHorarioInicial.setAttribute('id','horarioInicial')

    dataInput.after(divLocal)
    divLocal.appendChild(labelLocal)
    divLocal.appendChild(inputLocal)
    inputLocal.addEventListener('input', () => {
        inputLocal.value = inputLocal.value.toUpperCase()
        atualizaDescricao(descricaoTarefa, inputHorarioInicial,horarioFinal, inputLocal)
    })

    divRow2.appendChild(divHorarioInicial)
    divHorarioInicial.appendChild(labelHorarioInicial)
    divHorarioInicial.appendChild(inputHorarioInicial)
    inputHorarioInicial.value = '00:00'
    inputHorarioInicial.addEventListener('input',() => {
        inputHorarioInicial.value = inputHorarioInicial.value.toUpperCase()
        atualizaDescricao(descricaoTarefa, inputHorarioInicial,horarioFinal, inputLocal)
    })

    divRow2.appendChild(divPerito)
    divPerito.appendChild(labelPerito)
    divPerito.appendChild(inputPerito)
    inputPerito.addEventListener('input',() => {
        inputPerito.value = inputPerito.value.toUpperCase()
        atualizaDescricao(descricaoTarefa, inputHorarioInicial,horarioFinal, inputLocal)
    })
}

function loadInfo () {
    if (!state.functions.cadastroTarefa.AutoPreenchimentoTarefasIntimacoes) {
        return
    }
    let selectTipoIntimacaoInput = document.querySelector("#idTipoTarefa")
    let descricaoTarefa = document.querySelector("#descricao")
    let optionLi = document.querySelector(`#fdt-form > div:nth-child(10) > div.form-group.col-sm-8 > div > div > ul`)
    let horarioInicial = document.querySelector("#horarioInicial")
    let horarioFinal = document.querySelector("#horarioFinal")
    let local = document.querySelector("#onde")
    let processoDependente = document.querySelector("#input_dependente")

    descricaoTarefa.addEventListener('change', event => {
        event.target.value = event.target.value.toUpperCase()
    })
    local.addEventListener('input', event => {
        event.target.value = event.target.value.toUpperCase()
    })
    
    for (let index = 0; index < optionLi.children.length; index++) {
        optionLi.children[index].children[0].addEventListener('click', () => {
            validaEsferaProcesso()
            setTimeout(() => {
                let arrayAudiencias = ["AUDIÊNCIA DE INSTRUÇÃO E JULGAMENTO", "AUDIÊNCIA UNA", "AUDIÊNCIA DE INSTRUÇÃO", "AUDIÊNCIA INICIAL", "AUDIÊNCIA INAUGURAL"]
                if (cliente.compromisso.tipoCompromisso.search('PERÍCIA') == 0 && cliente.compromisso.tarefaSequencia == cliente.compromisso.tarefaRestante)
                    mostrarCamposPericia()
                calcularDataTarefa(((cliente.compromisso.tipoTarefa == "CONTATAR CLIENTE") || (cliente.compromisso.tipoTarefa == "LEMBRAR CLIENTE") || (cliente.compromisso.tipoTarefa == "SMS E WHATSAPP")) || (arrayAudiencias.includes(cliente.compromisso.tipoCompromisso)) ? 1 : 2)
                if (cliente.compromisso.atualizar) {
                    let contagem = contarTarefas()
                    cliente.compromisso.tarefaSequencia = contagem
                    cliente.compromisso.tarefaRestante = contagem
                }
            }, 50);
            if ((horarioInicial.value.length == 0 || local.value.length == 0))
                atualizaDescricao(descricaoTarefa, horarioInicial,horarioFinal, local)
            
            let eventTargets = [horarioInicial,local,processoDependente]

            eventTargets.forEach(element => {
                if (element !== null)
                    element.addEventListener(element == horarioInicial ? 'blur':'input', () => {
                        atualizaDescricao(descricaoTarefa, horarioInicial, horarioFinal, local)
                    })
            })

            let contactdiv = document.querySelector("#contactdiv")
            if (contactdiv != null) {
                contactdiv.parentNode.removeChild(contactdiv)
            }
            if ((optionLi.children[index].children[0].children[0].innerText.toUpperCase() == "CONTATAR CLIENTE" || optionLi.children[index].children[0].children[0].innerText.toUpperCase() == "LEMBRAR CLIENTE") && (cliente.processo.estado != "DF" || cliente.processo.estado != "GO")) {
                validaExecutorContatar()
            }

            submitAtualizarTarefa(descricaoTarefa)
            if (cliente.compromisso.tarefaRestante <= 1) {
                desmarcarCaixaTarefaSequencia()
            }
        })
    }
    selectTipoIntimacao(selectTipoIntimacaoInput,optionLi)
}

function contarTarefas() {
    let contagem
    let compromisso = cliente.compromisso.tipoCompromisso
    let contDois = ["EMENDAR","DADOS PERÍCIA SOCIAL","DADOS COMPLEMENTARES","ALVARÁ","RPV","PRECATÓRIO"]
    let contTres = "PERÍCIA"
    let contQuatro = ["AUDIÊNCIA DE CONCILIAÇÃO", "AUDIÊNCIA CONCILIATÓRIA", "AUDIÊNCIA DE INTERROGATÓRIO"]
    let contCinco = ["AUDIÊNCIA INAUGURAL", "AUDIÊNCIA INICIAL","AUDIÊNCIA DE INSTRUÇÃO", "AUDIÊNCIA DE INSTRUÇÃO E JULGAMENTO", "AUDIÊNCIA UNA"]

    if (contDois.includes(compromisso) || contDois.includes(cliente.compromisso.tipoCompromisso)){
        contagem = 2
    }
    else
        if (compromisso.search(contTres) == 0){
            if (cliente.processo.estado == "DF" || cliente.processo.estado == "GO") {
                if (cliente.compromisso.semanas > 1)
                    contagem = 4
                else
                    contagem = 3
            }
            else {
                if (cliente.compromisso.semanas > 1)
                    contagem = 3
                else
                    contagem = 2
            }
        }
        else {
            if (contQuatro.includes(compromisso)){
                if (cliente.compromisso.semanas > 1)
                    contagem = 4
                else
                    contagem = 3

            }
            else {
                if (contCinco.includes(compromisso)){
                    if (cliente.compromisso.semanas > 1)
                        contagem = 5
                    else
                        contagem = 4
                }
                else
                contagem = 1
            }
        }
    return contagem
}

function separaTitulo(titulo) {
    let tipoCompromisso = titulo.slice(13,titulo.search("\n"))
    let aux = titulo.slice(titulo.search("\n")+1)
    let linhaDois = aux.slice(0,aux.search("\n"))

    let tipoIntimacao = validaTipoIntimacao(tipoCompromisso)
    cliente.compromisso.tipoCompromisso = tipoCompromisso
    let contagem = contarTarefas()
    cliente.compromisso.tarefaSequencia = contagem
    cliente.compromisso.tarefaRestante = contagem
    cliente.compromisso.prazoInterno = linhaDois.slice(15,25)
    cliente.compromisso.prazoFatal = linhaDois.slice(49)
    cliente.compromisso.tipoTarefa = tipoIntimacao
    return cliente
}

function saveInfoTarefas() {
    let titulo = document.querySelector(".alert-info")
    if (cliente.compromisso.atualizar) {
        cliente = separaTitulo(titulo.innerText)
        setCliente(cliente)
    }
}

function focarInputProcesso() {
    let inputProcesso = document.querySelector("#bsAdvProcessosTexto")
    if (inputProcesso !== null) {
        inputProcesso.value = ""
        inputProcesso.focus()
    }
}

function extrairIDRequisicaoClienteHtml (response) {
    const btnVer = response.documentElement.querySelector("body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div.table-responsive > table > tbody > tr > td.fdt-acao > div > div > a:nth-child(1)")
    let id = btnVer.href.slice(btnVer.href.search("idPK=")+5)
    cliente.processo.idDemaisEnvolvidos.push(id)
}

function extrairDadosRequisicaoClienteHtml(response,gravarBtn) {

    let fichas = response.documentElement.querySelectorAll("body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div.fdt-ficha")
    let dadosPrincipais = fichas[0].innerText.split('\n')
    let localizacao = fichas[3].innerText.split('\n')
    dadosPrincipais.forEach(e => {
        if (e.search("Parceiro:") > -1) {
            cliente.cliente.parceiro = e.slice(e.search("Parceiro:")+10).toUpperCase()
        }
        if (e.search("Local atendido:") > -1)
            cliente.cliente.localAtendido = e.slice(e.search("Local atendido:")+16).toUpperCase()
    })

    localizacao.forEach(e => {
        if (e.search("Cidade:") > -1) {
            cliente.cliente.cidade = e.slice(e.search("Cidade:")+8).toUpperCase()
        }
        if (e.search("Estado:") > -1)
            cliente.cliente.estado = e.slice(e.search("Estado:")+8).toUpperCase()
    })
    cliente.processo.cpfDemaisEnvolvidos.forEach(e => {
        ajax(3,linkClienteAjax,e,gravarBtn)
    })
}

function extrairDadosRequisicaoProcessoHtml(response,gravarBtn) {
    let spanColetivo = response.documentElement.querySelector("body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div:nth-child(2) > div.col-sm-12 > span")
    let fichas = response.documentElement.querySelectorAll("body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div.fdt-ficha")
    let dadosObrigatorios = fichas[0].innerText.split('\n')

    let dadosPrincipais = () => {
        let achou = false
        for (let index = 0; index < fichas[2].children.length; index++) {
            if (fichas[2].children[index].innerText.search("Data da distribuição:") > -1)
                achou = true
        }

        if (achou)
            return fichas[2].innerText.split('\n')
        else
            return fichas[3].innerText.split('\n')
    }
    
    dadosObrigatorios.forEach(e => {
        if (e.search(" AÇÃO COLETIVA") > -1)
            cliente.processo.coletivo = true
        if (e.search("Cliente:") > -1) {
            let array = e.slice(e.search("Cliente:")+9).split("(")
            cliente.cliente.nome = array[0].toUpperCase()
            cliente.cliente.cpf = "(" + array[1]
        }
        if (e.search("Número:") > -1)
            cliente.processo.origem = e.slice(e.search("Número:")+8).toUpperCase()
        if (e.search("Nome do réu:") > -1)
            cliente.processo.reu = e.slice(e.search("Nome do réu:")+13).toUpperCase()
        if (e.search("Responsável pelo processo:") > -1)
            cliente.processo.responsavel = e.slice(e.search("Responsável pelo processo:")+27).toUpperCase()
    })

    dadosPrincipais().forEach(e => {
        if (e.search("Natureza da ação:") > -1)
            cliente.processo.natureza = e.slice(e.search("Natureza da ação:")+18).toUpperCase()
        if (e.search("Mérito da causa:") > -1)
            cliente.processo.merito = e.slice(e.search("Mérito da causa:")+17).toUpperCase()
        if (e.search("Cidade:") > -1)
            cliente.processo.cidade = e.slice(e.search("Cidade:")+8).toUpperCase()
        if (e.search("Estado:") > -1)
            cliente.processo.estado = e.slice(e.search("Estado:")+8).toUpperCase()
        if (e.search("Vara / Turma:") > -1)
            cliente.processo.vara = e.slice(e.search("Vara / Turma:")+14).toUpperCase()
    })
    
    let demaisEnvolvidos = response.documentElement.querySelector("body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div:nth-child(4)")
    let clientes = []
    let cpfs = []
    let id

    let a = response.documentElement.querySelectorAll("a.fdt-icon")

    a.forEach(e => {
        if (e.title == "Ficha do cliente") {
            id = e.href.slice(e.href.search("idPK=")+5,e.href.search("&idPRorg="))
            cliente.cliente.id = id
        }
    })

    /* if (spanColetivo != null)
        if (spanColetivo.innerText == " AÇÃO COLETIVA") {
            cliente.processo.coletivo = true
            if (demaisEnvolvidos.innerText != 'Ainda não há outros envolvidos.') {
                clientes = response.documentElement.querySelector("body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div:nth-child(4)").children
                for (let index = 0; index < clientes.length; index++) {
                    cpfs.push(clientes[index].children[0].children[0].innerText.replaceAll("(","").replace(")","").replaceAll(" ",""))
                }
                cliente.processo.cpfDemaisEnvolvidos = cpfs
            }
        } */
    ajax(2,linkClienteAjax,cliente.cliente.id,gravarBtn)
}

async function ajax (opt,link,id,gravarBtn) {

    let httpRequest

    if (opt == 3)
        makeRequest("http://fabioribeiro.eastus.cloudapp.azure.com/adv/clientes/default.asp")
    else
        makeRequest(`${link}${id}`)

    function makeRequest(url) {
      if (window.XMLHttpRequest) {
        httpRequest = new XMLHttpRequest()
        } else if (window.ActiveXObject) {
            try {
            httpRequest = new ActiveXObject("Msxml2.XMLHTTP")
            }
            catch (e) {
            try {
                httpRequest = new ActiveXObject("Microsoft.XMLHTTP")
            }
            catch (e) {}
            }
        }
    
        if (!httpRequest) {
            alert('Giving up :( Cannot create an XMLHTTP instance')
            return false
        }
        httpRequest.onreadystatechange = alertContents;
        if (opt != 3) {
            httpRequest.open('GET', url)
            httpRequest.send()
        }
        else {
            httpRequest.open('POST', url)
            httpRequest.setRequestHeader('Content-Type','application/x-www-form-urlencoded')
            httpRequest.send(`bsAdvClientes=s&org=&idPR=&idCR=&idCP=&bsAdvClientesProspect=&bsAdvClientesTexto=&bsAdvClientesCPF=${id}&bsAdvClientesCNPJ=&bsAdvClientesGrupo=&bsAdvClientesSituacao=&bsAdvClientesEstado=&bsAdvClientesCidade=&bsAdvClientesNaturalUF=&bsAdvClientesNaturalCidade=&bsAdvClientesFornecedor=&bsAdvClientesLocalAtendido=&bsAdvClientesNascimentoDataDe=&bsAdvClientesNascimentoDataAte=&bsAdvClientesDataDe=&bsAdvClientesDataAte=&bsAdvClientesIncluidoPor=&bsAdvClientesProcessosStatus=&bsAdvClientesAtualizacaoDe=&bsAdvClientesAtualizacaoAte=&bsAdvClientesAtualizacaoCampo=&bsAdvClientesProcessosDataDe=&bsAdvClientesProcessosDataAte=&bsAdvClientesProcessosNatureza=&bsAdvClientesProcessosMerito=&bsAdvClientesProcessosSentenca=&bsAdvClientesINSSDe=&bsAdvClientesINSSAte=&bsAdvClientesINSSResponsavel=&bsAdvClientesINSSResultado=&bsAdvResponsavelPendencia=&bsAdvComoChegou=&filtrar=Filtrar`)
        }
    }
    
        function alertContents() {
        if (httpRequest.readyState === 4) {
            if (httpRequest.status === 200) {
                let parser = new DOMParser()
                let doc = parser.parseFromString(httpRequest.responseText,'text/html')
                if (opt == 1) {
                    extrairDadosRequisicaoProcessoHtml(doc,gravarBtn)
                }
                else {
                    if (opt == 2)
                        extrairDadosRequisicaoClienteHtml(doc,gravarBtn)
                    else
                        extrairIDRequisicaoClienteHtml(doc)
                }
                setCliente(cliente)
                gravarBtn.removeAttribute('disabled')
            } else {
                console.log('There was a problem with the request.')
            }
        }
    }
}

function formataData (dia,mes,ano) {
    if (mes < 10)
        mes = `0${mes}`
    if (dia < 10)
        dia = `0${dia}`
    return `${dia}/${mes}/${ano}`
}

function isFeriado (date,parametro) {
    let feriado = false
    let feriados = calculaFeriados(parametro)
    let ehFeriado

    for (let index = 0; index < feriados.length; index++) {
        ehFeriado = feriados[index].toDateString() == date.toDateString()
        if (ehFeriado) {
            feriado = true
            break
        }
    }

    return feriado
}

function calcularPrazo (prazo,parametro) {
    let dateFinal = new Date()
    let dateInicial = new Date()
    let cont = 1
    let i
    let dataPub = document.querySelector("#dataPublicacao")
    let tipoIntimacao = document.querySelector("#descricao")
    let processo = document.querySelector('#numeroProcesso')

    let diasInterno
    const diasFatal = Number(prazo)

    if (processo.value.length == 12) {
        if (dataPub.value.length > 0) {
            let data = dataPub.value.split('/')
            dateFinal = new Date(data[2],Number(data[1])-1,Number(data[0]))
            dateInicial = new Date(data[2],Number(data[1])-1,Number(data[0]))
        }
        if (dateInicial.getDay() == 6) {
            dateFinal.setDate(dateFinal.getDate()+2)
            dateInicial.setDate(dateInicial.getDate()+2)
        }
    }

    while (diasFatal >= cont) {
        dateFinal.setDate(dateFinal.getDate() + 1)
        i = dateFinal.getDay()

        if (i > 0 && i < 6 && !isFeriado(dateFinal,parametro)) {
            cont = cont + 1
        }
    }
    let ano = dateFinal.getFullYear()
    let mes = dateFinal.getMonth()+1
    let dia =  dateFinal.getDate()
    let final = formataData(dia, mes, ano)
    const StringTipoIntimacao = removeAcentuacaoString(tipoIntimacao.value).toUpperCase()
    const ehSentencaAcordaoDecisao = (StringTipoIntimacao.search("SENTENCA") == 0 || StringTipoIntimacao.search("DECISAO") == 0 || StringTipoIntimacao.search("ACORDAO") == 0)

    
    if (ehSentencaAcordaoDecisao) {
        if (processo.value.length == 12) {
            diasInterno = 3
        }
        else {
            if (diasFatal == 5)
                diasInterno = 2
            else
                diasInterno = 5
        }
    }
    else {
        if ((diasFatal == 5) && (processo.value.length == 12)) {
            diasInterno = 3
        }
        else {
            diasInterno = diasFatal-3
        }
    }
    
    cont = 1
    let condiction
    const ehBarril = ((cliente.processo.estado == 'GO') || (cliente.processo.estado == 'DF'))

    if (ehBarril && !ehSentencaAcordaoDecisao) {
        dateInicial = new Date (dateFinal.getFullYear(), dateFinal.getMonth(), dateFinal.getDate()-1)
        while (cont <= 3) {
            i = dateInicial.getDay()
            condiction = isFeriado(dateInicial,parametro)
            
            if (condiction) {
                dateInicial.setDate(dateInicial.getDate() - 1)
            } else {
                if (cont == 3) {
                    if ((i == 6) || (i == 0)) {
                        if (i == 0) {
                            dateInicial.setDate(dateInicial.getDate() - 2)
                        }
                        if (i == 6) {
                            dateInicial.setDate(dateInicial.getDate() - 1)
                        }
                    }
                    break
                } else {
                    dateInicial.setDate(dateInicial.getDate() - 1)
                    cont++
                }
            }
        }
    } else {
        while (diasInterno >= cont) {
            dateInicial.setDate(dateInicial.getDate() + 1)
            i = dateInicial.getDay()
            condiction = isFeriado(dateInicial,parametro)
            
            if (diasInterno >= cont) {
                if (i > 0 && i < 6 && !condiction) {
                    cont = cont + 1
                }
            }
            else {
                if (condiction && i > 0 && i < 6) {
                    dateInicial.setDate(dateInicial.getDate() - 1)
                    cont = cont + 1
                }
                else
                    if (i > 0 && i < 6)
                        cont = cont + 1
            }
        }
    }

    ano = dateInicial.getFullYear()
    mes = dateInicial.getMonth()+1
    dia = dateInicial.getDate()
    let inicial = formataData(dia, mes, ano)

    return [inicial,final]
}

function createButtonPrazo() {
    if (!state.functions.cadastroCompromisso.mostrarBotoesAuxiliaresdeDias) {
        return
    }
    let dataPub = document.querySelector('#dataPublicacao')
    let prazoInicial = document.querySelector("#dataPrazoInterno")
    let prazoFinal = document.querySelector("#dataPrazoFatal")
    let divDataPublicacao = document.querySelector('#fdt-form > div:nth-child(7) > div:nth-child(2)')
    let divAuxiliar = document.createElement('div')
    let divCinco = document.createElement('div')
    let divOito = document.createElement('div')
    let divDez = document.createElement('div')
    let divQuinze = document.createElement('div')
    let buttonCinco = document.createElement('input')
    let buttonOito = document.createElement('input')
    let buttonDez = document.createElement('input')
    let buttonQuinze = document.createElement('input')
    let pCinco = document.createElement('p')
    let pOito = document.createElement('p')
    let pDez = document.createElement('p')
    let pQuinze = document.createElement('p')
    
    buttonCinco.setAttribute('id','button5')
    buttonOito.setAttribute('id','button8')
    buttonDez.setAttribute('id','button10')
    buttonQuinze.setAttribute('id','button15')
    pCinco.setAttribute('id','prazo5')
    pOito.setAttribute('id','prazo8')
    pDez.setAttribute('id','prazo10')
    pQuinze.setAttribute('id','prazo15')
    buttonCinco.setAttribute('class','btnPrazo')
    buttonCinco.setAttribute('value','05')
    buttonCinco.setAttribute('type','button')
    buttonOito.setAttribute('class','btnPrazo')
    buttonOito.setAttribute('value','08')
    buttonOito.setAttribute('type','button')
    buttonDez.setAttribute('class','btnPrazo')
    buttonDez.setAttribute('value','10')
    buttonDez.setAttribute('type','button')
    buttonQuinze.setAttribute('class','btnPrazo')
    buttonQuinze.setAttribute('value','15')
    buttonQuinze.setAttribute('type','button')
    divDataPublicacao.appendChild(divAuxiliar)
    divAuxiliar.appendChild(divCinco)
    divAuxiliar.appendChild(divOito)
    divAuxiliar.appendChild(divDez)
    divAuxiliar.appendChild(divQuinze)
    divCinco.appendChild(buttonCinco)
    divCinco.appendChild(pCinco)
    divOito.appendChild(buttonOito)
    divOito.appendChild(pOito)
    divDez.appendChild(buttonDez)
    divDez.appendChild(pDez)
    divQuinze.appendChild(buttonQuinze)
    divQuinze.appendChild(pQuinze)
    divDataPublicacao.style.position = 'relative'
    divAuxiliar.style.position = 'absolute'
    divAuxiliar.style.display = 'flex'
    divAuxiliar.style.flexDirection = 'column'
    divAuxiliar.style.top = '-82px'
    divAuxiliar.style.right = '-150px'
    pCinco.style.color = 'gray'
    pOito.style.color = 'gray'
    pDez.style.color = 'gray'
    pQuinze.style.color = 'gray'
    pCinco.innerHTML = `5 DIAS`
    pOito.innerHTML = `8 DIAS`
    pDez.innerHTML = `10 DIAS`
    pQuinze.innerHTML = `15 DIAS`
    divCinco.style.display = 'flex'
    divCinco.style.flexDirection = 'row'
    divCinco.style.alignItems = 'center'
    divOito.style.display = 'flex'
    divOito.style.flexDirection = 'row'
    divOito.style.alignItems = 'center'
    divDez.style.display = 'flex'
    divDez.style.flexDirection = 'row'
    divDez.style.alignItems = 'center'
    divQuinze.style.display = 'flex'
    divQuinze.style.flexDirection = 'row'
    divQuinze.style.alignItems = 'center'

    dataPub.addEventListener('blur', () => {
        const prazoCinco = calcularPrazo(buttonCinco.value,2)
        const prazoOito = calcularPrazo(buttonOito.value,2)
        const prazoDez = calcularPrazo(buttonDez.value,2)
        const prazoQuinze = calcularPrazo(buttonQuinze.value,2)
        pCinco.innerHTML = `${prazoCinco[0].slice(0,5)} - ${prazoCinco[1].slice(0,5)}`
        pOito.innerHTML = `${prazoOito[0].slice(0,5)} - ${prazoOito[1].slice(0,5)}`
        pDez.innerHTML = `${prazoDez[0].slice(0,5)} - ${prazoDez[1].slice(0,5)}`
        pQuinze.innerHTML = `${prazoQuinze[0].slice(0,5)} - ${prazoQuinze[1].slice(0,5)}`
    })
    
    let btn = document.querySelectorAll('.btnPrazo')

    btn.forEach(e => {
        e.addEventListener('click', event => {
                let prazos = calcularPrazo(Number(event.target.value),2)
                prazoInicial.value = prazos[0]
                prazoFinal.value =  prazos[1]
        })
        e.style.padding = '15px'
        e.style.borderRadius = '5px'
        e.style.margin = '5px'
        e.style.background = 'rgb(77, 72, 72)'
        e.style.color = 'white'
        e.style.border = '1px solid #ccc'
    })
}

function setValidacaoFunctionOff () {
    let editCompromissoBtn = document.querySelector('body > section > section > div.fdt-espaco > div > div:nth-child(2) > a:nth-child(2)')
    let addTarefaBtn = document.querySelector('body > section > section > div.fdt-espaco > div > div:nth-child(2) > a:nth-child(3)')
    let addTarefaAvulsaBtn = document.querySelector('body > section > section > div.fdt-espaco > div > div.fdt-pg-header > a:nth-child(1)')
    let addTarefaClienteBtn = document.querySelector('body > section > section > div.fdt-espaco > div > div.fdt-pg-header > a:nth-child(2)')
    let btnTarefaClientePesq = document.querySelector("body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div.table-responsive > table > tbody > tr > td:nth-child(2) > a")
    
    if (editCompromissoBtn != null)
        editCompromissoBtn.addEventListener('click', () => {
            setAutoComplete(false)
        })
    if (addTarefaBtn != null)
        addTarefaBtn.addEventListener('click', () => {
            setAutoComplete(false)
        })
    if (addTarefaAvulsaBtn != null)
        addTarefaAvulsaBtn.addEventListener('click', () => {
            setAutoComplete(false)
        })
    if (addTarefaClienteBtn != null)
        addTarefaClienteBtn.addEventListener('click', () => {
            setAutoComplete(false)
        })
    if (btnTarefaClientePesq != null)
        btnTarefaClientePesq.addEventListener('click', () => {
            setAutoComplete(false)
        })
}

function setValidacaoFunctionOn() {
    let addCompromissoBtn = document.querySelector('body > section > section > div.fdt-espaco > div > div.fdt-pg-header > a:nth-child(3) > i')
    if (addCompromissoBtn != null)
        addCompromissoBtn.addEventListener('click', async () => {
            await setAutoComplete(true)
        })
}

function createButtonRolagem () {
    if (!state.functions.abaCompromissosProcesso.mostrarBotadeRolagem) {
        return
    }
    let arrow = document.createElement('input')
    arrow.setAttribute('type','button')
    arrow.value = 'DOWN'
    document.body.after(arrow)
    arrow.style.position = 'fixed'
    arrow.style.top = '0'
    arrow.style.right = '0'
    arrow.style.margin = '8em'
    arrow.style.background = 'dimgray'
    arrow.style.padding = '30px'
    arrow.style.width = '10em'
    arrow.style.height = '10em'
    arrow.style.borderRadius = '1em'
    arrow.style.MozBorderRadius = '1em'
    arrow.style.WebkitBorderRadius = '1em'
    arrow.style.color = 'white'
    arrow.style.fontWeight = 'bold'
    arrow.style.borderStyle = 'none'
    arrow.style.boxShadow = '10px 5px 5px black'
    arrow.addEventListener('click', () => {
        if (arrow.value == 'DOWN') {
            arrow.setAttribute('disabled','')
            window.scroll(0, document.documentElement.scrollHeight)
            arrow.value = 'UP'
            arrow.removeAttribute('disabled')
        }
        else {
            window.scroll(0,0)
            arrow.value = 'DOWN'
        }
    })
}

function removeAcentuacaoString (string) {
    return string.normalize('NFD').replace(/[\u0300-\u036f]/g, "")
}

function padronizaStrings (string) {
    return string.normalize("NFD").replace(/[\u0300-\u036f]/g, "").replaceAll(' ','').replaceAll('-','').toUpperCase()
}

function completarInputs () {
    const titleFile = document.querySelectorAll("#fdt-form > div.alert.alert-success.fs20.margemCima20")
    let filesName = [], buttonsList = []
    let divs = document.querySelectorAll("#fdt-form > div")
    
    for (let index = 0; index < divs.length; index++) {
        let ehTitleFile = divs[index].classList.contains("alert-success")

        if (ehTitleFile) {
            buttonsList.push(divs[index+1])
        }
    }

    titleFile.forEach(e => {
        const textArray = e.textContent.split('.')
        filesName.push(textArray[0].trim())
    })

    for (let index = 0; index < titleFile.length; index++) {
        document.querySelector(`#descricao_${index+1}`).value = filesName[index]
        let ul = buttonsList[index].children[0].children[1].children[1].children[1].children
        let spanSelect = buttonsList[index].children[0].children[1].children[0].children[0]

        let spanOutros

        for (let i = 0; i < ul.length; i++) {
            let sOutros = padronizaStrings("Outros"), sFileName = padronizaStrings(filesName[index])
            
            let span = ul[i].children[0].children[0], sSpan = padronizaStrings(span.textContent)

            if (sSpan == sOutros) {
                spanOutros = ul[i].children[0].children[0]
            }

            if (sSpan == sFileName) {
                span.click()
            }
        }

        if (spanSelect.textContent == '') {
            spanOutros.click()
        }
    }
}

let target = null
let ouvindo = false
const keyAtivaction = 119
const recognition = createRecognition()

function createRecognition() {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition
    const recognition = SpeechRecognition !== undefined ? new SpeechRecognition : null

    if (!recognition) {
        console.log("Não foi encontrado Speech Recognition")
        return null
    }

    recognition.lang = "pt_BR"

    recognition.onstart = () => {
        ouvindo = true
    }

    recognition.onend = () => {
        ouvindo = false
    }

    recognition.onerror = e => {
        console.log('Erro: ', e)
    }

    recognition.onresult = e => {
        target.innerHTML = e.results[0][0].transcript
    }

    return recognition
}

function keyEvent(event) {
    let key = event.keyCode || event.which;
    target = event.target
    
    if (key === keyAtivaction && !ouvindo) {
        ouvindo = true
        recognition.start()
    }

}
  
function metaKeyUp (event) {
    let key = event.keyCode || event.which;
    
    target = event.target
    
    if (key === keyAtivaction && ouvindo) {
        ouvindo = false
        recognition.stop()
    }
}

function digitacaoPorVoz() {    
    if (!state.functions.digitacaoVoz.digitarUsandoVoz) {
        return
    }

    addEventListener('keydown', event => {
        if (!recognition) {
            return
        }
        keyEvent(event)
    })

    addEventListener('keyup', event => {
        if (!recognition) {
            return
        }
        metaKeyUp(event)
    })
}

async function idPage(url) {
    const autoCompletar = await getAutoComplete()
    const pageBuscaProcessos = (url.search(urlProcessos) > -1)
    const pageTarefas = (url.search(urlTarefas) > -1)
    const pageCompromissos = (url.search(urlCompromissos) > -1)
    const pageCadastroProcesso = (url.search(urlProcessosCadastro) > -1)
    const pageVisualizacaoAbaCompromissos = (url.search(urlCompromissoDefault) > -1)
    const pageVisualizacaoCompromisso = (url.search(urlCompromissoFicha) > -1)
    const pageFormularioAddTarefaSemCompromisso = (url.search(urlClienteAddtarefa) > -1)
    const pageVisualizacaoTarefa = (url.search(urlTarefasFicha) > -1)
    const pageUploadArquivo = (url.search(urlUpFile) > -1)

    digitacaoPorVoz()

    if (pageBuscaProcessos) {
        if (!state.functions.abaPesquisaProcesso.autoFormatacaoNumProcessoPesquisa) {
            return
        }
        formataNumProcesso()
        focarInputProcesso()
    }
    else if (pageTarefas) {
        if (autoCompletar) {
            cliente = await getCliente()
            if (cliente.compromisso.atualizar)
                createInputDependente()
            saveInfoTarefas()
            loadInfo()
            console.log(cliente)
        }
    }
    else if (pageCompromissos) {
        const dataFinal =  document.querySelector("#dataPrazoFatal")
        const dataInicial = document.querySelector("#dataPrazoInterno")
        const tipoIntimacao = document.querySelector("#descricao")
        
        dataFinal.addEventListener('blur', () => {
            const indiceAudiencia = removeAcentuacaoString(tipoIntimacao.value).search('AUDIENCIA')
            const indicePericia = removeAcentuacaoString(tipoIntimacao.value).search('PERICIA')
            const indicePauta = tipoIntimacao.value.search('PAUTA')
            const ehAudiencia = (indiceAudiencia == 0)
            const ehPericia = (indicePericia == 0)
            const ehPauta = (indicePauta == 0)

            if (ehAudiencia || ehPauta || ehPericia) {
                dataInicial.value = dataFinal.value
            }
        })

        if (autoCompletar) {
            let gravarBtn = document.querySelector("#fdt-form > div.row.margemCima20 > div > input.btn.fdt-btn-verde")
            gravarBtn.setAttribute('disabled','')
            let id = getIdCliente(url)
            ajax(1,linkProcessosAjax,id,gravarBtn)
            saveInfoCompromissos()
            setCliente(cliente)
            createButtonPrazo()
        }
        console.log(cliente)
    }
    else if (pageCadastroProcesso) {
        formataNumProcesso()
        habilitarEdicaoNumeroProcesso()
    }
    else if (pageVisualizacaoAbaCompromissos) {
        createButtonRolagem()
        setValidacaoFunctionOn()
    }
    else if (pageVisualizacaoCompromisso || pageFormularioAddTarefaSemCompromisso)
        setValidacaoFunctionOff()
    else if (pageVisualizacaoTarefa) {
        let editTarefaBtn = document.querySelectorAll('body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div.table-responsive > table > tbody > tr')
        if (editTarefaBtn != null) {
            editTarefaBtn.forEach(element => {
                let e = element.children[1].children[0].children[1].children[1]
                if (e != null) {
                    e.addEventListener('click',() => {
                        setAutoComplete(false)
                    })
                }
            })
        }
    } else if (pageUploadArquivo) {
        completarInputs()
    }
}

function getURL() {
    return document.URL
}

async function getTarefasAtrasadas (adm) {

    const array = {}

    const ontem = new Date()
    const passado = new Date(ontem.getFullYear()-10,ontem.getMonth(), ontem.getDate())
    ontem.setDate(ontem.getDate()-1)
    
    const url = 'http://fabioribeiro.eastus.cloudapp.azure.com/adv/tarefas/default.asp'

    let headers = new Headers({
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'Content-Length': '64',
        'Accept-Encoding': 'gzip, deflate',
        'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
        'Connection': 'keep-alive'
    })

    const data = {
        bsAdvTarefas: "s",
        bsAdvTarefasTecnica: "",
        bsAdvTarefasDe: `${passado.getDate() < 10 ? "0" + passado.getDate() : passado.getDate()}/${passado.getMonth() < 10 ? "0" + (passado.getMonth() + 1) : passado.getMonth() + 1}/${passado.getFullYear()}`,
        bsAdvTarefasAte: `${ontem.getDate() < 10 ? "0" + ontem.getDate() : ontem.getDate()}/${ontem.getMonth() < 10 ? "0" + (ontem.getMonth() + 1) : ontem.getMonth() + 1}/${ontem.getFullYear()}`,
        bsAdvTarefasTitulo: "",
        bsAdvTarefasTipo: "",
        bsAdvTarefasStatus: "p",
        bsAdvTarefasAgendada: "",
        bsAdvTarefasResponsavel: "",
        bsAdvTarefasCompromisso: "",
        bsAdvTarefasCliente: "",
        bsAdvTarefasCpf: "",
        bsAdvTarefasPauta: "", 
        filtrar: "Filtrar",
    }

    let str = ""

    adm.forEach(e => {
        str += `&bsAdvTarefasExecutor=${e.id}`
        array[e.nome] = { atrasadas: 0 }
    })

    let init = {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(data).replaceAll('"','').replaceAll(':','=').replaceAll('{','').replaceAll('}','').replaceAll(',','&') + str
    }

    const request = new Request(url, init)

    const result = fetch(request)
    .then(response => response.text())
    .then(response => {
        let parser = new DOMParser()
        let doc = parser.parseFromString(response,'text/html')
        let tarefas = doc.documentElement.querySelectorAll('body > section > section > div.fdt-espaco > div > div.fdt-pg-conteudo > div.table-responsive > table > tbody > tr')
        console.log(tarefas)
        console.log(adm)
        console.log(array)
        tarefas.forEach(e => {
            if (e.children[5].children[3]) {
                array[e.children[5].children[3].innerText.trim()].atrasadas++
            }
        })
        return array
    })
    
    return result
}

function getTarefasSemanal (id, datas) {
    
    const url = 'http://fabioribeiro.eastus.cloudapp.azure.com/adv/ajax/jsonAgendaTarefas.asp'

    let headers = new Headers({
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'Content-Length': '64',
        'Accept-Encoding': 'gzip, deflate',
        'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
        'Connection': 'keep-alive'
    })

    const data = {
        idTI: '',
        idST: '',
        idRE: '',
        idEX: id,
        idAG: '',
        start: datas[1].toISOString().split('T')[0],
        end: datas[datas.length-2].toISOString().split('T')[0],
    }

    let init = {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(data).replaceAll('"','').replaceAll(':','=').replaceAll('{','').replaceAll('}','').replaceAll(',','&')
    }

    const request = new Request(url, init)

    const result = fetch(request)
    .then(response => response.text())
    .then(response => {
        let str = response
        str = str.replace(/(\r\n|\n|\r|\t)/gm, "").replaceAll('"',"'")
        if (str.match(/\x07/)) {
            str = str.replace(/\x07/,"")
        }
        let chavesCorretas = ['"id": "','", "title": "','", "allDay": "','", "start": "','", "end": "','", "color": "','", "textColor": "','", "borderColor": "','", "url": "','" }']
        let chavesErradas = ["'id': '","', 'title': '","', 'allDay': '","', 'start': '","', 'end': '","', 'color': '","', 'textColor': '","', 'borderColor': '","', 'url': '","' }"]

        for (c = 0; c < chavesCorretas.length; c++) {
            str = str.replaceAll(chavesErradas[c],chavesCorretas[c])
        }

        return JSON.parse(str)
    })
    .then(resp => {

        const contagem = {}
        for (c = 0; c < datas.length; c++) {
            if (c > 0)
                contagem[datas[c].toISOString().replace('Z','').replace('T03:00:00.000','T00:00:00')] = 0
        }
        
        resp.forEach(e => {
            contagem[e['start']]++
        })
        return contagem
    })
    
    return result
}

function getArrayDate () {
    let datas = ['atrasadas'], dias = ['atrasadas']
    let date = new Date()
    cont = 0

    for (c = 1; c <= 8; c++) {
        date.setHours(0,0,0,0)
        let indiceDiaSemana = date.getDay()
        dias.push(indiceDiaSemana)
        datas.push(date)
        date = new Date(date)
        date.setDate(date.getDate()+1)
        cont++
    }

    return { datas, dias }
}

function generateTable(adm, datas, dias) {
    
    const semana = ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado']
    let table = `<table class="tabela">`

    for (c = 0; c <= adm.length; c++) {
        table += `<tr>`
        let nome
        if (c > 0) {
            nome = adm[c-1].nome.split(' ')[0]
        }
        for (let j = 0; j <= datas.length; j++) {
            if ((j == 0) && (c == 0)) {
                table += `<th style="background: rgb(0 86 137);">&nbsp;</th>`
            } else if ((j != 0) && (c == 0)) {
                if (j > 1)
                    table += `<th data-date="${datas[j-1].toISOString().replace('Z','').replace('T03:00:00.000','T00:00:00')}" class="dRow">${datas[j-1].toLocaleDateString()} - ${semana[dias[j-1]]}</th>`
                else
                    table += `<th data-date="${datas[j-1]}" class="dRow">Tarefas ${datas[j-1]}</th>`
            } else if ((j == 0) && (c > 0)) {
                table += `<th data-nome="${nome.toLowerCase()}" class="nCollumn">${nome}</th>`
            } else if (c > 0) {
                if (j > 1)
                    table += `<td data-nome="${nome.toLowerCase()}" data-date="${datas[j-1].toISOString().replace('Z','').replace('T03:00:00.000','T00:00:00')}">-</td>`
                else
                    table += `<td data-nome="${nome.toLowerCase()}" data-date="${datas[j-1]}">-</td>`
            }
        }
        table += `</tr>`
    }
    return table
}

function estilizarTabela() {
    const titulos = document.querySelectorAll('.dRow')
    const nomes = document.querySelectorAll('.nCollumn')
    const numbers = document.querySelectorAll('.tabela td')

    const formatTitle = (element) => {
        element.style.padding = '0.5rem'
        element.style.background = '#1c5475'
        element.style.color = '#FFF'
    }
    const formatContent = (element) => {
        element.style.padding = '0.5rem'
        element.style.textAlign = 'center'
        element.style.border = '1px solid lightgray'
    } 

    titulos.forEach(th => {
        th.style.textAlign = 'center'
        formatTitle(th)
    })

    nomes.forEach(th => {
        formatTitle(th)
    })

    numbers.forEach(td => {
        formatContent(td)
    })
}

function createPainel () {
    if (!state.functions.supervisor.paineldevisualizacaoTarefasTime) {
        return
    }

    const painelBar = document.querySelector("#fdt-mt-header > ul:nth-child(1)")
    const adm = [
        { nome: "ASLEY RODRIGO DE MELO LIMA"},
        { nome: "BRYAN CAMPOS DE ANDRADE" },
        { nome: "CARLOS HENRIQUE ESPASIANI" },
        { nome: "CHARLES DEMETRIUS BARRETO SILVA" },
        { nome: "JULIANO OLIVEIRA DE SOUZA" },
        { nome: "JULIO KAUÃ DE SOUSA PINTO" },
        { nome: "KAUÃ DE CARVALHO NASCIMENTO" },
        { nome: "LEANDRO SANTOS" },
        { nome: "LUCAS NATHAN NOGUEIRA DA SILVA" },
        { nome: "MARCO AURELIO LEITE GOMES" },
	    { nome: "MARCOS ROBERT DE MELO LIMA" },
        { nome: "RENATA DE JESUS SANTOS" },
        { nome: "VICTOR MENDES DOS SANTOS" },
        { nome: "VINICIUS SOUSA BOMFIM" },
        { nome: "YURI DIAS PEREIRA" }
    ]
    const { datas, dias } = getArrayDate()

    const html = `<a href="" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><span data-toggle="tooltip" data-placement="bottom" title="" data-original-title="Painel do Supervisor"><i class="fa fa-fw fa-table fdt-cor-vermelho"></i></span></a>
                    <ul class="dropdown-menu hidden-xs">
                        <li class="fdt-dropdown-cabecalho" style="color: rgb(0 86 137);">Painel do Supervisor</li>
                        <li class="fdt-widget-lembretes">
                            <ul>
                                <li>
                                    ${generateTable(adm, datas, dias)}
                                </li>
                            </ul>
                        </li>
                    </ul>`

                /* <li class="fdt-dropdown-rodape">
                    <div style="cursor: pointer;">
                        <i class="fa fa-fw fa-refresh"></i>&nbsp;Recarregar Dados
                    </div>
                </li> */
    const li = document.createElement("li")
    li.innerHTML = html
    li.setAttribute('class', 'dropdown mensagens hidden-xs')
    li.setAttribute('id', 'painelBTNSup')
    painelBar.appendChild(li)
    estilizarTabela()

    
    const inputDados = (nome, result) => {

        const tds = document.querySelectorAll('.tabela td')
        let tdsSeparados = {}
        tdsSeparados[nome] = {}
        tds.forEach(td => {
            if (td.dataset.nome == nome)
                tdsSeparados[nome][td.dataset.date] = td
        })

        let chaves = Object.entries(result).map(e => e[0])
        
        chaves.forEach(chave => {
            tdsSeparados[nome][chave].innerHTML = result[chave]
        })
    }

    
    let aracaju = [
        {
            id: 131,
            nome: "ASLEY RODRIGO DE MELO LIMA",
            diasViagem: [],
            contagem: 0,
            atrasadas: 0
        },
        {
            id: 94,
            nome: "CARLOS HENRIQUE ESPASIANI",
            diasViagem: [],
            contagem: 0,
            atrasadas: 0
        },
        {
            id: 181,
            nome: "CHARLES DEMETRIUS BARRETO SILVA",
            diasViagem: null,
            contagem: 0,
            atrasadas: 0
        },
        {
            id: 194,
            nome: "BRYAN CAMPOS DE ANDRADE",
            diasViagem: [],
            contagem: 0,
            atrasadas: 0
        },
        {
            id: 51,
            nome: "JULIANO OLIVEIRA DE SOUZA",
            diasViagem: null,
            contagem: 0,
            atrasadas: 0
        },
        {
            id: 200,
            nome: "JULIO KAUÃ DE SOUSA PINTO",
            diasViagem: null,
            contagem: 0,
            atrasadas: 0
        },
        {
            id: 196,
            nome: "KAUÃ DE CARVALHO NASCIMENTO",
            diasViagem: null,
            contagem: 0,
            atrasadas: 0
        },
        {
            id: 64,
            nome: "LEANDRO SANTOS",
            diasViagem: null,
            contagem: 0,
            atrasadas: 0
        },
        {
            id: 199,
            nome: "LUCAS NATHAN NOGUEIRA DA SILVA",
            diasViagem: null,
            contagem: 0,
            atrasadas: 0
        },
        {
            id: 201,
            nome: "MARCO AURELIO LEITE GOMES",
            diasViagem: null,
            contagem: 0,
            atrasadas: 0
        },
	{
            id: 141,
            nome: "MARCOS ROBERT DE MELO LIMA",
            diasViagem: [],
            contagem: 0,
            atrasadas: 0
        },
	{
            id: 203,
            nome: "RENATA DE JESUS SANTOS",
            diasViagem: null,
            contagem: 0,
            atrasadas: 0
        },
        {
            id: 120,
            nome: "VICTOR MENDES DOS SANTOS",
            diasViagem: null,
            contagem: 0,
            atrasadas: 0
        },
        {
            id: 188,
            nome: "VINICIUS SOUSA BOMFIM",
            diasViagem: null,
            contagem: 0,
            atrasadas: 0
        },
        {
            id: 161,
            nome: "YURI DIAS PEREIRA",
            diasViagem: null,
            contagem: 0,
            atrasadas: 0
        },
    ]

    aracaju.forEach(e => {
        e['nomeTLC'] = e.nome.toLocaleLowerCase().split(' ')[0]
    })

    document.querySelector('#painelBTNSup').addEventListener('click', () => {
        for(let c = 0; c < aracaju.length; c++) {
            aracaju[c].contagem = getTarefasSemanal(aracaju[c].id, datas).then(result => {
                inputDados(aracaju[c].nomeTLC,result)
                return result
            })
        }
        getTarefasAtrasadas(aracaju).then(result => {
            aracaju.forEach(e => {
                inputDados(e.nomeTLC, result[e.nome])
            })
        })
    })
}

async function activate() {
    let { active, functions } = await getState()
    state.active = active
    state.functions = functions
    if (!active)
        return
    let url = getURL()
    createPainel()
    idPage(url)
}

function updateEvent() {
    enviarResposta()
}

async function run () {
    activate()
    updateEvent()
}

window.onload = run